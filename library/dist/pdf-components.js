!function(Q,U){"object"==typeof exports&&"object"==typeof module?module.exports=U(require("react-pdf"),require("react")):"function"==typeof define&&define.amd?define(["react-pdf","react"],U):"object"==typeof exports?exports["@allenai/pdf-components"]=U(require("react-pdf"),require("react")):Q["@allenai/pdf-components"]=U(Q["react-pdf"],Q.React)}(this,(function(__WEBPACK_EXTERNAL_MODULE__323__,__WEBPACK_EXTERNAL_MODULE__888__){return(()=>{var __webpack_modules__={184:(module,exports)=>{eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif ( true && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (true) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n\t\t\treturn classNames;\n\t\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzPzRkMjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsZ0JBQWdCOztBQUVoQjtBQUNBOztBQUVBLGlCQUFpQixzQkFBc0I7QUFDdkM7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxLQUFLLEtBQTZCO0FBQ2xDO0FBQ0E7QUFDQSxFQUFFLFVBQVUsSUFBNEU7QUFDeEY7QUFDQSxFQUFFLGlDQUFxQixFQUFFLG1DQUFFO0FBQzNCO0FBQ0EsR0FBRztBQUFBLGtHQUFDO0FBQ0osRUFBRSxNQUFNLEVBRU47QUFDRixDQUFDIiwiZmlsZSI6IjE4NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTggSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRpZiAoYXJnLmxlbmd0aCkge1xuXHRcdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGlmIChhcmcudG9TdHJpbmcgPT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpIHtcblx0XHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0Y2xhc3NOYW1lcy5kZWZhdWx0ID0gY2xhc3NOYW1lcztcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///184\n")},224:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ index)\n});\n\n// UNUSED EXPORTS: ArrowFlag, ArrowFlagBase, BoundingBox, ContextProvider, DEFAULT_ZOOM_SCALE, DocumentContext, DocumentWrapper, DownloadButton, HighlightOverlay, IconFlag, Outline, OutlineItem, Overlay, POSITION, PageNumberControl, PageRenderContext, PageWrapper, PercentFormatter, PrintButton, RENDER_TYPE, ScrollContext, SidePanel, Thumbnail, ThumbnailList, TransformContext, UiContext, ZoomInButton, ZoomOutButton, computeBoundingBoxStyle, computePageStyle, generatePageIdFromIndex, getPageHeight, getPageWidth, isSideways, rotateClockwise, rotateCounterClockwise, scaleRawBoundingBox, scrollToId, scrollToPdfPageIndex\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__(184);\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n// EXTERNAL MODULE: external {"commonjs":"react","commonjs2":"react","amd":"react","root":"React"}\nvar external_commonjs_react_commonjs2_react_amd_react_root_React_ = __webpack_require__(888);\n;// CONCATENATED MODULE: ./src/utils/provider.ts\nfunction logProviderWarning(functionName, providerName) {\r\n    console.warn(`Unable to call ${functionName}. The ${providerName} Provider may not be set up correctly.`);\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/rotate.ts\nvar PageRotation;\r\n(function (PageRotation) {\r\n    PageRotation[PageRotation["Rotate0"] = 0] = "Rotate0";\r\n    PageRotation[PageRotation["Rotate90"] = 90] = "Rotate90";\r\n    PageRotation[PageRotation["Rotate180"] = 180] = "Rotate180";\r\n    PageRotation[PageRotation["Rotate270"] = 270] = "Rotate270";\r\n})(PageRotation || (PageRotation = {}));\r\nfunction rotateClockwise(rotation) {\r\n    switch (rotation) {\r\n        case PageRotation.Rotate0:\r\n            return PageRotation.Rotate90;\r\n        case PageRotation.Rotate90:\r\n            return PageRotation.Rotate180;\r\n        case PageRotation.Rotate180:\r\n            return PageRotation.Rotate270;\r\n        default:\r\n            return PageRotation.Rotate0;\r\n    }\r\n}\r\nfunction rotateCounterClockwise(rotation) {\r\n    switch (rotation) {\r\n        case PageRotation.Rotate0:\r\n            return PageRotation.Rotate270;\r\n        case PageRotation.Rotate90:\r\n            return PageRotation.Rotate0;\r\n        case PageRotation.Rotate180:\r\n            return PageRotation.Rotate90;\r\n        default:\r\n            return PageRotation.Rotate180;\r\n    }\r\n}\r\n/**\r\n * Tests whether the page is rotated 90 degrees clockwise or counterclockwise from zero,\r\n * e.g. whether the page "is rotated sideways."\r\n */\r\nfunction isSideways(rotation) {\r\n    return rotation === PageRotation.Rotate90 || rotation === PageRotation.Rotate270;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/scroll.ts\n\r\n// Each page div is ID\'d according to page index\r\n// e.g. reader_pg_0, reader_pg_1, etc.\r\nconst PAGE_NAV_TARGET_ID_ROOT = \'reader_pg_\';\r\nconst PDF_HEIGHT_POINTS = 792;\r\nconst PDF_WIDTH_POINTS = 612;\r\nfunction generatePageIdFromIndex(pageIndex) {\r\n    return `${PAGE_NAV_TARGET_ID_ROOT}${pageIndex}`;\r\n}\r\nfunction scrollToId(id) {\r\n    const element = document.getElementById(id);\r\n    if (element) {\r\n        element.scrollIntoView({ behavior: \'smooth\', block: \'start\', inline: \'center\' });\r\n    }\r\n    else {\r\n        console.error(`Could not find scroll target with ID #${id}`);\r\n    }\r\n}\r\nfunction scrollToPdfPageIndex(pageIndex) {\r\n    scrollToId(generatePageIdFromIndex(pageIndex));\r\n}\r\n/**\r\n * Scroll PDF document to a specific position.\r\n * @param pageIndex The index of the page where the position locates at\r\n * @param leftPoints The horizontal distance between the origin and the position (in PDF coordinates)\r\n * @param bottomPoints The vertical distance between the origin and the position (in PDF coordinates)\r\n * @param rotation The rotation degree of the document\r\n */\r\nfunction scrollToPosition(pageIndex, leftPoints, bottomPoints, rotation = PageRotation.Rotate0) {\r\n    /*\r\n      Vertical scroll distance is calculated as\r\n      = total number of previous pages * page height including top/down margins\r\n      + the margin top of current page\r\n      + the distance from the page top to the specified position\r\n  \r\n      Notice that the scroll distance is measured in pixels,\r\n      so leftPoints/bottomPoints has to be transformed from points to pixels first.\r\n    */\r\n    const { width, height, marginTop, marginBottom, marginLeft, marginRight } = getPagePropertiesInPixels();\r\n    const heightWithMargins = height + marginTop + marginBottom;\r\n    // When a paper is rotated, its height and width would be switched automatically. However, leftPoints and bottomPoints remain the same.\r\n    let marginTopPixels = marginTop;\r\n    let bottomPixels = (height * bottomPoints) / PDF_HEIGHT_POINTS;\r\n    let leftPixels = (width * leftPoints) / PDF_WIDTH_POINTS;\r\n    if (rotation == PageRotation.Rotate90) {\r\n        marginTopPixels = marginLeft;\r\n        bottomPixels = (height * (PDF_WIDTH_POINTS - leftPoints)) / PDF_WIDTH_POINTS;\r\n        leftPixels = (width * bottomPoints) / PDF_HEIGHT_POINTS;\r\n    }\r\n    else if (rotation == PageRotation.Rotate180) {\r\n        marginTopPixels = marginBottom;\r\n        bottomPixels = (height * (PDF_HEIGHT_POINTS - bottomPoints)) / PDF_HEIGHT_POINTS;\r\n        leftPixels = (width * (PDF_WIDTH_POINTS - leftPoints)) / PDF_WIDTH_POINTS;\r\n    }\r\n    else if (rotation == PageRotation.Rotate270) {\r\n        marginTopPixels = marginRight;\r\n        bottomPixels = (height * leftPoints) / PDF_WIDTH_POINTS;\r\n        leftPixels = (width * (PDF_HEIGHT_POINTS - bottomPoints)) / PDF_HEIGHT_POINTS;\r\n    }\r\n    // Find page element\r\n    const pageId = generatePageIdFromIndex(pageIndex);\r\n    const pageIdElement = document.getElementById(pageId);\r\n    if (!pageIdElement) {\r\n        return;\r\n    }\r\n    // Find first scrollable parent\r\n    const parentElement = getScrollParent(pageIdElement);\r\n    if (!parentElement) {\r\n        return;\r\n    }\r\n    // Apply scroll\r\n    parentElement.scrollTo({\r\n        top: calculateTopPx({\r\n            heightWithMarginsInPx: heightWithMargins,\r\n            pageIndex: pageIndex,\r\n            marginTopPx: marginTopPixels,\r\n            heightPx: height,\r\n            bottomPx: bottomPixels,\r\n        }),\r\n        left: Math.floor(leftPixels),\r\n        behavior: \'smooth\',\r\n    });\r\n}\r\nfunction getScrollParent(node) {\r\n    const minScrollableHeight = 50; // used to check for a bug where Firefox gives inline containers a small scrollHeight when it shouldnt\r\n    if (typeof document === \'undefined\') {\r\n        return null;\r\n    }\r\n    if (!node || node.nodeName.toLowerCase() === \'body\') {\r\n        return document.documentElement;\r\n    }\r\n    if (node.scrollHeight - node.clientHeight > minScrollableHeight && !isOverflowIsHidden(node)) {\r\n        return node;\r\n    }\r\n    return getScrollParent(node.parentElement);\r\n}\r\nfunction isOverflowIsHidden(node) {\r\n    const style = getComputedStyle(node);\r\n    return (style.overflow.includes(\'hidden\') ||\r\n        style.overflowX.includes(\'hidden\') ||\r\n        style.overflowY.includes(\'hidden\'));\r\n}\r\nfunction calculateTopPx({ heightWithMarginsInPx, pageIndex, marginTopPx, heightPx, bottomPx, }) {\r\n    return Math.floor(heightWithMarginsInPx * pageIndex + marginTopPx + (heightPx - bottomPx));\r\n}\r\n/**\r\n * Get lengths, widths, and margins of a page.\r\n * @returns a PageProperties object\r\n */\r\nfunction getPagePropertiesInPixels() {\r\n    const firstPage = document.getElementById(generatePageIdFromIndex(0));\r\n    if (!firstPage) {\r\n        console.error(`Cannot get the first page of this document.`);\r\n        const emptyPageProperties = {\r\n            width: 0,\r\n            height: 0,\r\n            marginTop: 0,\r\n            marginBottom: 0,\r\n            marginLeft: 0,\r\n            marginRight: 0,\r\n        };\r\n        return emptyPageProperties;\r\n    }\r\n    const style = getComputedStyle(firstPage);\r\n    const pageProperties = {\r\n        width: parseInt(style.width),\r\n        height: parseInt(style.height),\r\n        marginTop: parseInt(style.marginTop),\r\n        marginBottom: parseInt(style.marginBottom),\r\n        marginLeft: parseInt(style.marginLeft),\r\n        marginRight: parseInt(style.marginRight),\r\n    };\r\n    return pageProperties;\r\n}\r\nfunction calculateTargetPosition({ scale, leftPoint, bottomPoint, pageDimensions, rotation = PageRotation.Rotate0, }) {\r\n    switch (rotation) {\r\n        default:\r\n        case PageRotation.Rotate0: {\r\n            const leftPx = (leftPoint / PDF_WIDTH_POINTS) * pageDimensions.width * scale;\r\n            const topPx = (1 - bottomPoint / PDF_HEIGHT_POINTS) * pageDimensions.height * scale;\r\n            return { leftPx, topPx };\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/context/DocumentContext.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nconst DocumentContext = external_commonjs_react_commonjs2_react_amd_react_root_React_.createContext({\r\n    numPages: 0,\r\n    numPagesLoaded: 0,\r\n    outline: [],\r\n    outlinePositions: null,\r\n    pageDimensions: { height: 0, width: 0 },\r\n    pdfDocProxy: undefined,\r\n    getOutlineTargets: opts => {\r\n        logProviderWarning(`getOutlineTargets(${JSON.stringify(opts)})`, \'DocumentContext\');\r\n        return [];\r\n    },\r\n    setNumPages: numPages => {\r\n        logProviderWarning(`setNumPages(${numPages})`, \'DocumentContext\');\r\n    },\r\n    setNumPagesLoaded: numPages => {\r\n        logProviderWarning(`setNumPagesLoaded(${numPages})`, \'DocumentContext\');\r\n    },\r\n    setOutline: outline => {\r\n        logProviderWarning(`setOutline(${outline})`, \'DocumentContext\');\r\n    },\r\n    setOutlinePositions: outline => {\r\n        logProviderWarning(`setOutlinePositions(${outline})`, \'DocumentContext\');\r\n    },\r\n    setPageDimensions: pageDimensions => {\r\n        logProviderWarning(`setPageDimensions(${pageDimensions})`, \'DocumentContext\');\r\n    },\r\n    setPdfDocProxy: pdfDocProxy => {\r\n        logProviderWarning(`setPdfDocProxy(${pdfDocProxy})`, \'DocumentContext\');\r\n    },\r\n});\r\nfunction useDocumentContextProps() {\r\n    const [numPages, setNumPages] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(0);\r\n    const [numPagesLoaded, setNumPagesLoaded] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(0);\r\n    const [outline, setOutline] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\r\n    const [outlinePositions, setOutlinePositions] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\r\n    const [pageDimensions, setPageDimensions] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState({\r\n        height: 0,\r\n        width: 0,\r\n    });\r\n    const [pdfDocProxy, setPdfDocProxy] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState();\r\n    // Draw outline target into the pdf based on the args\r\n    const getOutlineTargets = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex, scale, rotation, pageDimensions, }) => {\r\n        if (typeof pageIndex === \'number\') {\r\n            pageNumber = pageIndex + 1;\r\n        }\r\n        if (typeof pageNumber !== \'number\') {\r\n            return [];\r\n        }\r\n        const positions = (outlinePositions === null || outlinePositions === void 0 ? void 0 : outlinePositions.get(pageNumber)) || [];\r\n        return positions.map(({ dest, leftPoint, bottomPoint }) => {\r\n            const { leftPx, topPx } = calculateTargetPosition({\r\n                scale,\r\n                rotation,\r\n                leftPoint,\r\n                bottomPoint,\r\n                pageDimensions,\r\n            });\r\n            return {\r\n                dest,\r\n                leftPx,\r\n                topPx,\r\n            };\r\n        });\r\n    }, [outlinePositions]);\r\n    return {\r\n        numPages,\r\n        numPagesLoaded,\r\n        outline,\r\n        outlinePositions,\r\n        pageDimensions,\r\n        pdfDocProxy,\r\n        getOutlineTargets,\r\n        setNumPages,\r\n        setNumPagesLoaded,\r\n        setOutline,\r\n        setOutlinePositions,\r\n        setPageDimensions: setPageDimensions,\r\n        setPdfDocProxy,\r\n    };\r\n}\r\nfunction buildOutlinePositions(pdfDocProxy, outline) {\r\n    var _a;\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (!outline) {\r\n            outline = yield pdfDocProxy.getOutline();\r\n        }\r\n        // Depth first search through outline items\r\n        const itemQueue = outline.slice();\r\n        const proms = [];\r\n        while (itemQueue.length > 0) {\r\n            const item = itemQueue.pop();\r\n            if (!item) {\r\n                continue; // Not able to process\r\n            }\r\n            const { dest, items } = item;\r\n            // Add child items to queue\r\n            if (Array.isArray(items)) {\r\n                itemQueue.push(...items);\r\n            }\r\n            // Fetch destinations for item\r\n            if (Array.isArray(dest)) {\r\n                proms.push(...dest.map(dest => getDestination(pdfDocProxy, dest)));\r\n            }\r\n            else if (typeof dest === \'string\') {\r\n                proms.push(getDestination(pdfDocProxy, dest));\r\n            }\r\n        }\r\n        // Collect results all at once, so we don\'t have to pay for the cost of\r\n        // queueing messages sent to the worker\r\n        const results = yield Promise.all(proms);\r\n        // Split results into pages\r\n        const map = new Map();\r\n        for (const result of results) {\r\n            if (!result) {\r\n                continue; // Filter out null\r\n            }\r\n            const { pageNumber } = result;\r\n            if (!map.has(pageNumber)) {\r\n                map.set(pageNumber, []);\r\n            }\r\n            (_a = map.get(pageNumber)) === null || _a === void 0 ? void 0 : _a.push(result);\r\n        }\r\n        // Freeze objects so consumers cannot mutate\r\n        for (const pagePos of map.values()) {\r\n            for (const pos of pagePos) {\r\n                Object.freeze(pos);\r\n            }\r\n            Object.freeze(pagePos);\r\n        }\r\n        Object.freeze(map);\r\n        return map;\r\n    });\r\n}\r\nfunction getDestination(pdfDocProxy, dest) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const result = yield pdfDocProxy.getDestination(dest);\r\n        if (!result) {\r\n            return null;\r\n        }\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        const [ref, _format, leftPoint, bottomPoint] = result;\r\n        const pageIndex = yield pdfDocProxy.getPageIndex(ref);\r\n        const pageNumber = pageIndex + 1;\r\n        return { pageNumber, dest, leftPoint, bottomPoint };\r\n    });\r\n}\r\n\n;// CONCATENATED MODULE: ./src/context/TransformContext.ts\n\r\n\r\n\r\nconst DEFAULT_ZOOM_SCALE = 1.0;\r\nconst TransformContext = external_commonjs_react_commonjs2_react_amd_react_root_React_.createContext({\r\n    pixelRatio: (typeof window !== \'undefined\' ? window.devicePixelRatio : null) || 1,\r\n    rotation: PageRotation.Rotate0,\r\n    scale: 1,\r\n    zoomIncrementValue: 0.2,\r\n    setPixelRatio: pixelRatio => {\r\n        logProviderWarning(`setPixelRatio(${pixelRatio})`, \'TransformContext\');\r\n    },\r\n    setRotation: rotation => {\r\n        logProviderWarning(`setRotation(${rotation})`, \'TransformContext\');\r\n    },\r\n    setScale: scale => {\r\n        logProviderWarning(`setScale(${scale})`, \'TransformContext\');\r\n    },\r\n    setZoomIncrementValue: value => {\r\n        logProviderWarning(`setZoomIncrementValue(${value})`, \'TransformContext\');\r\n    },\r\n});\r\nfunction useTransformContextProps() {\r\n    const [pixelRatio, setPixelRatio] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState((typeof window !== \'undefined\' ? window.devicePixelRatio : null) || 1);\r\n    const [rotation, setRotation] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(PageRotation.Rotate0);\r\n    const [scale, setScale] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(DEFAULT_ZOOM_SCALE);\r\n    const [zoomIncrementValue, setZoomIncrementValue] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(0.2);\r\n    return {\r\n        pixelRatio,\r\n        rotation,\r\n        scale,\r\n        setPixelRatio,\r\n        setRotation,\r\n        setScale,\r\n        zoomIncrementValue,\r\n        setZoomIncrementValue,\r\n    };\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/style.ts\n\r\n// Computes the style for a bounding box, accounting for page roation and page scaling/zoom\r\nfunction computeBoundingBoxStyle(boundingBoxSize, pageDimensions, rotation, scale) {\r\n    const { top, left, height, width } = boundingBoxSize;\r\n    switch (rotation) {\r\n        case PageRotation.Rotate90:\r\n            return {\r\n                top: left * scale,\r\n                left: (pageDimensions.height - height - top) * scale,\r\n                height: width * scale,\r\n                width: height * scale,\r\n            };\r\n        case PageRotation.Rotate180:\r\n            return {\r\n                top: (pageDimensions.height - height - top) * scale,\r\n                left: (pageDimensions.width - width - left) * scale,\r\n                height: height * scale,\r\n                width: width * scale,\r\n            };\r\n        case PageRotation.Rotate270:\r\n            return {\r\n                top: (pageDimensions.width - width - left) * scale,\r\n                left: top * scale,\r\n                height: width * scale,\r\n                width: height * scale,\r\n            };\r\n        default:\r\n            return {\r\n                top: top * scale,\r\n                left: left * scale,\r\n                height: height * scale,\r\n                width: width * scale,\r\n            };\r\n    }\r\n}\r\n// Compute the style for a page, accounting for page rotation and page scaling/zoom\r\nfunction computePageStyle(pageDimensions, rotation, scale) {\r\n    return {\r\n        height: getPageHeight(pageDimensions, rotation) * scale,\r\n        width: getPageWidth(pageDimensions, rotation) * scale,\r\n        left: 0,\r\n        top: 0,\r\n    };\r\n}\r\n// Get page height accounting for page rotation- if the page is rotated on its side, its width becomes its height\r\nfunction getPageHeight(pageDimensions, rotation) {\r\n    return isSideways(rotation) ? pageDimensions.width : pageDimensions.height;\r\n}\r\n// Get page width accounting for page rotation- if the page is rotated on its side, its height becomes its width\r\nfunction getPageWidth(pageDimensions, rotation) {\r\n    return isSideways(rotation) ? pageDimensions.height : pageDimensions.width;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/BoundingBox.tsx\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\n\r\nconst BoundingBox = (_a) => {\r\n    var { top, left, height, width, className, underlineClassName, id, isHighlighted, onClick, voiceOverLabel } = _a, extraProps = __rest(_a, ["top", "left", "height", "width", "className", "underlineClassName", "id", "isHighlighted", "onClick", "voiceOverLabel"]);\r\n    const { pageDimensions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\r\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\r\n    const boxSize = { top, left, height, width };\r\n    const componentClassName = classnames_default()(\'pdf-reader__overlay-bounding-box\', isHighlighted === true ? \'pdf-reader__overlay-bounding-box-highlighted\' : \'\', className);\r\n    const getBoundingBoxStyle = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\r\n        return computeBoundingBoxStyle(boxSize, pageDimensions, rotation, scale);\r\n    }, [pageDimensions, rotation, scale]);\r\n    const rotationClassName = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\r\n        return `rotate${rotation}`;\r\n    }, [rotation]);\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(external_commonjs_react_commonjs2_react_amd_react_root_React_.Fragment, null,\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: `pdf-reader__overlay-bounding-box-underline ${underlineClassName || rotationClassName()}`, style: getBoundingBoxStyle() }),\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ id: id, className: `${componentClassName} ${rotationClassName()}`, style: getBoundingBoxStyle(), onClick: onClick, role: "button", tabIndex: 0, "aria-label": voiceOverLabel }, extraProps))));\r\n};\r\n\n// EXTERNAL MODULE: external "react-pdf"\nvar external_react_pdf_ = __webpack_require__(323);\n;// CONCATENATED MODULE: ./src/utils/ScrollDirectionDetector.ts\nvar ScrollDirection;\r\n(function (ScrollDirection) {\r\n    ScrollDirection["UP"] = "UP";\r\n    ScrollDirection["DOWN"] = "DOWN";\r\n})(ScrollDirection || (ScrollDirection = {}));\r\nclass ScrollDetector {\r\n    constructor(el, setScrollDirection, setIsAtTop, setScrollThresholdReachedInDirection, scrollThreshold) {\r\n        this._onScroll = () => {\r\n            const currScrollTop = this._el.scrollTop;\r\n            if (this._isAtTop !== (currScrollTop === 0)) {\r\n                this._isAtTop = currScrollTop === 0;\r\n                this._setIsAtTop(currScrollTop === 0);\r\n            }\r\n            if (this._lastScrollTop === currScrollTop) {\r\n                return;\r\n            }\r\n            // Determine direction\r\n            const currScrollDirection = (() => {\r\n                if (currScrollTop <= 0) {\r\n                    return ScrollDirection.DOWN;\r\n                }\r\n                return this._lastScrollTop < currScrollTop ? ScrollDirection.DOWN : ScrollDirection.UP;\r\n            })();\r\n            // Update state, if changed\r\n            this._lastScrollTop = currScrollTop;\r\n            if (this._lastScrollDirection !== currScrollDirection) {\r\n                this._lastScrollDirection = currScrollDirection;\r\n                this._setScrollDirection(currScrollDirection);\r\n                this._lastScrollTopBeforeDirectionChange = currScrollTop;\r\n                this._isScrollThresholdReachedInDirection = null;\r\n                if (this._setScrollThresholdReachedInDirection && !this._isAtTop) {\r\n                    this._setScrollThresholdReachedInDirection(null);\r\n                }\r\n            }\r\n            else {\r\n                if (this._scrollThreshold && this._setScrollThresholdReachedInDirection) {\r\n                    const scrolledAmount = Math.abs(this._lastScrollTopBeforeDirectionChange - currScrollTop);\r\n                    if (scrolledAmount >= this._scrollThreshold) {\r\n                        this._isScrollThresholdReachedInDirection = this._lastScrollDirection;\r\n                        this._setScrollThresholdReachedInDirection(this._lastScrollDirection);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        this._el = el;\r\n        this._lastScrollTop = this._el.scrollTop;\r\n        this._lastScrollDirection = null;\r\n        this._setScrollDirection = setScrollDirection;\r\n        this._isAtTop = null;\r\n        this._setIsAtTop = setIsAtTop;\r\n        this._lastScrollTopBeforeDirectionChange = this._el.scrollTop;\r\n        this._scrollThreshold = scrollThreshold;\r\n        this._isScrollThresholdReachedInDirection = null;\r\n        this._setScrollThresholdReachedInDirection = setScrollThresholdReachedInDirection;\r\n    }\r\n    attachScrollListener() {\r\n        var _a, _b;\r\n        if (((_b = (_a = this._el) === null || _a === void 0 ? void 0 : _a.tagName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === \'html\') {\r\n            window.addEventListener(\'scroll\', this._onScroll, false);\r\n            return;\r\n        }\r\n        this._el.addEventListener(\'scroll\', this._onScroll, false);\r\n    }\r\n    detachScrollListener() {\r\n        var _a, _b;\r\n        if (((_b = (_a = this._el) === null || _a === void 0 ? void 0 : _a.tagName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === \'html\') {\r\n            window.removeEventListener(\'scroll\', this._onScroll, false);\r\n            return;\r\n        }\r\n        this._el.removeEventListener(\'scroll\', this._onScroll, false);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/VisibleEntriesDetector.ts\nconst DEFAULT_ROOT_MARGIN = \'50px\';\r\nconst DEFAULT_THRESHOLD = Array.from({ length: 101 }).map((_, i) => i / 100);\r\nclass VisibleEntriesDetector {\r\n    constructor({ root, thresHold, setVisibleEntries, onVisibleEntriesChange, }) {\r\n        var _a;\r\n        this._root = root;\r\n        this._lastVisibleEntries = new Map();\r\n        this._setVisibleEntries = setVisibleEntries;\r\n        this._onVisibleEntriesChange = onVisibleEntriesChange;\r\n        this._observer = new IntersectionObserver(entries => {\r\n            // Collect visible and hidden elements\r\n            const visibleEntries = entries.filter(entry => entry.isIntersecting);\r\n            const hiddenEntries = entries.filter(entry => !entry.isIntersecting);\r\n            // Determine what needs saved\r\n            const newVisibleEntries = this._onVisibleEntriesChange({\r\n                visibleEntries,\r\n                hiddenEntries,\r\n                lastEntries: this._lastVisibleEntries,\r\n            });\r\n            const frozenEntries = new Map(newVisibleEntries);\r\n            Object.freeze(frozenEntries);\r\n            this._lastVisibleEntries = frozenEntries;\r\n            this._setVisibleEntries(frozenEntries);\r\n        }, \r\n        // Default setting for intersection observer\r\n        {\r\n            root: ((_a = this._root.tagName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === \'html\' ? null : this._root,\r\n            rootMargin: DEFAULT_ROOT_MARGIN,\r\n            threshold: thresHold ? thresHold : DEFAULT_THRESHOLD,\r\n        });\r\n    }\r\n    observeNodes(selector) {\r\n        for (const node of this._root.querySelectorAll(selector)) {\r\n            this._observer.observe(node);\r\n        }\r\n    }\r\n    destroy() {\r\n        this._observer.disconnect();\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/context/ScrollContext.ts\n\r\n\r\n\r\n\r\n\r\nconst OUTLINE_ATTRIBUTE = \'data-outline-target-dest\';\r\nconst OUTLINE_SELECTOR = \'.pdf-reader__page__outline-target\';\r\nconst PAGE_NUMBER_ATTRIBUTE = \'data-page-number\';\r\nconst PAGE_NUMBER_SELECTOR = `.pdf-reader__page[${PAGE_NUMBER_ATTRIBUTE}]`;\r\nconst DEFAULT_PAGE_SCROLLED_INTO_VIEW_THRESHOLD = 0.1;\r\nconst EMPTY_NUMBER_TO_VISIBLE_ENTRY_DETAIL_MAP = Object.freeze(new Map());\r\nconst DEFAULT_CONTEXT = {\r\n    scrollDirection: null,\r\n    visibleOutlineTargets: new Map(),\r\n    visiblePageRatios: new Map(),\r\n    isOutlineTargetVisible: opts => {\r\n        logProviderWarning(`isOutlineTargetVisible(${JSON.stringify(opts)})`, \'ScrollContext\');\r\n        return false;\r\n    },\r\n    isPageVisible: opts => {\r\n        logProviderWarning(`isPageVisible(${JSON.stringify(opts)})`, \'ScrollContext\');\r\n        return false;\r\n    },\r\n    resetScrollObservers: () => {\r\n        logProviderWarning(`resetScrollObservers()`, \'ScrollContext\');\r\n    },\r\n    scrollRoot: {},\r\n    setScrollRoot: (_el) => {\r\n        logProviderWarning(`setScrollRoot(...)`, \'ScrollContext\');\r\n    },\r\n    scrollToOutlineTarget: dest => {\r\n        logProviderWarning(`scrollToOutlineTarget(${dest})`, \'ScrollContext\');\r\n    },\r\n    setScrollThreshold: (scrollThreshold) => {\r\n        logProviderWarning(`setScrollThreshold(${scrollThreshold})`, \'ScrollContext\');\r\n    },\r\n    scrollToPage: opts => {\r\n        logProviderWarning(`scrollToPage(${JSON.stringify(opts)})`, \'ScrollContext\');\r\n    },\r\n    updateScrollPosition: zoomMultiplier => {\r\n        logProviderWarning(`updateScrollPosition(${JSON.stringify(zoomMultiplier)})`, \'ScrollContext\');\r\n    },\r\n    setIsOutlineClicked: opts => {\r\n        logProviderWarning(`setIsOutlineGetClicked(${JSON.stringify(opts)})`, \'ScrollContext\');\r\n    },\r\n    scrollThresholdReachedInDirection: null,\r\n    isAtTop: null,\r\n    isOutlineClicked: null,\r\n    pagesScrolledIntoView: new Map(),\r\n    setPageScrolledIntoViewThreshold: (threshold) => {\r\n        logProviderWarning(`pagesScrolledIntoView(${threshold})`, \'ScrollContext\');\r\n    },\r\n};\r\nconst ScrollContext = external_commonjs_react_commonjs2_react_amd_react_root_React_.createContext(DEFAULT_CONTEXT);\r\nfunction useScrollContextProps() {\r\n    // Node used for observing the scroll position\r\n    const [scrollRoot, setScrollRoot] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\r\n    // Determine scroll direction\r\n    const [scrollDirection, setScrollDirection] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\r\n    const [scrollThreshold, setScrollThreshold] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\r\n    const [scrollThresholdReachedInDirection, setScrollThresholdReachedInDirection] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\r\n    const [isAtTop, setIsAtTop] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\r\n    const [isOutlineClicked, setIsOutlineClicked] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\r\n    const [pageScrolledIntoViewThreshold, setPageScrolledIntoViewThreshold] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(DEFAULT_PAGE_SCROLLED_INTO_VIEW_THRESHOLD);\r\n    const [pagesScrolledIntoView, setPagesScrolledIntoView] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(() => EMPTY_NUMBER_TO_VISIBLE_ENTRY_DETAIL_MAP);\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        const scrollElem = scrollRoot || document.documentElement;\r\n        if (!scrollElem) {\r\n            return;\r\n        }\r\n        let scrollDirectionDetector;\r\n        if (!scrollThreshold) {\r\n            // scroll threshold is optional\r\n            scrollDirectionDetector = new ScrollDetector(scrollElem, setScrollDirection, setIsAtTop);\r\n        }\r\n        else {\r\n            scrollDirectionDetector = new ScrollDetector(scrollElem, setScrollDirection, setIsAtTop, setScrollThresholdReachedInDirection, scrollThreshold);\r\n        }\r\n        scrollDirectionDetector.attachScrollListener();\r\n        return () => {\r\n            scrollDirectionDetector.detachScrollListener();\r\n        };\r\n    }, [scrollRoot, scrollThreshold]);\r\n    // Causes the IntersectionObservers to disconnect and be recreated (useful when DOM changes)\r\n    const [observerIndex, setObserverIndex] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(0);\r\n    const resetScrollObservers = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\r\n        setObserverIndex(observerIndex + 1);\r\n    }, [observerIndex]);\r\n    const [visibleOutlineTargets, setVisibleOutlineNodes] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(() => {\r\n        const map = new Map();\r\n        Object.freeze(map);\r\n        return map;\r\n    });\r\n    const [visiblePageRatios, setVisiblePageRatios] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(() => EMPTY_NUMBER_TO_VISIBLE_ENTRY_DETAIL_MAP);\r\n    const isOutlineTargetVisible = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((dest) => {\r\n        return visibleOutlineTargets.has(dest);\r\n    }, [visibleOutlineTargets]);\r\n    const scrollToOutlineTarget = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((dest) => {\r\n        var _a;\r\n        setIsOutlineClicked(true);\r\n        (_a = document\r\n            .querySelector(`[data-outline-target-dest="${dest}"]`)) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ behavior: \'smooth\' });\r\n    }, []);\r\n    const isPageVisible = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex }) => {\r\n        if (typeof pageIndex === \'number\') {\r\n            pageNumber = pageIndex + 1;\r\n        }\r\n        if (typeof pageNumber !== \'number\') {\r\n            return false;\r\n        }\r\n        return visiblePageRatios.has(pageNumber);\r\n    }, [visiblePageRatios]);\r\n    const scrollToPage = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex }) => {\r\n        var _a;\r\n        if (typeof pageNumber === \'number\') {\r\n            pageIndex = pageNumber - 1;\r\n        }\r\n        if (typeof pageIndex !== \'number\') {\r\n            return;\r\n        }\r\n        (_a = document\r\n            .getElementById(generatePageIdFromIndex(pageIndex))) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ behavior: \'smooth\' });\r\n    }, []);\r\n    // Watch outline nodes\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        const root = scrollRoot || document.documentElement;\r\n        const detector = new VisibleEntriesDetector({\r\n            root: root,\r\n            setVisibleEntries: setVisibleOutlineNodes,\r\n            onVisibleEntriesChange: ({ visibleEntries, hiddenEntries, lastEntries }) => {\r\n                hiddenEntries.map(entry => lastEntries.delete(entry.target.getAttribute(OUTLINE_ATTRIBUTE)));\r\n                const newEntries = new Map(lastEntries);\r\n                visibleEntries.map(entry => newEntries.set(entry.target.getAttribute(OUTLINE_ATTRIBUTE), {\r\n                    ratio: entry.intersectionRatio,\r\n                    timestamp: entry.time,\r\n                }));\r\n                return newEntries;\r\n            },\r\n        });\r\n        detector.observeNodes(OUTLINE_SELECTOR);\r\n        return () => {\r\n            detector.destroy();\r\n        };\r\n    }, [scrollRoot, observerIndex]);\r\n    // Watch pages\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        const root = scrollRoot || document.documentElement;\r\n        const detector = new VisibleEntriesDetector({\r\n            root: root,\r\n            setVisibleEntries: setVisiblePageRatios,\r\n            onVisibleEntriesChange: ({ visibleEntries, hiddenEntries, lastEntries }) => {\r\n                if (hiddenEntries.length) {\r\n                    const maxTime = Math.max(...hiddenEntries.map(e => e.time));\r\n                    const hiddenPageNums = hiddenEntries.map(e => { var _a; return ((_a = e.target) === null || _a === void 0 ? void 0 : _a.getAttribute(PAGE_NUMBER_ATTRIBUTE)) || \'\'; });\r\n                    // due to upper limit on how fast the Intersection Observer API can sample and how fast browsers can render (happens when users scroll fast)\r\n                    // sometimes entries will not be signaled as hidden, meaning they should be removed from lastEntries but weren\'t\r\n                    // so if an entry has a timestamp thats older then an entry we are currently removing, we can assume its "stale" and delete\r\n                    // more details about this issue here: https://stackoverflow.com/questions/61951380/intersection-observer-fails-sometimes-when-i-scroll-fast\r\n                    for (const [key, value] of lastEntries.entries()) {\r\n                        if (value.timestamp <= maxTime || hiddenPageNums.includes(String(key))) {\r\n                            lastEntries.delete(key);\r\n                        }\r\n                    }\r\n                }\r\n                const newEntries = new Map(lastEntries);\r\n                visibleEntries.map(entry => {\r\n                    var _a;\r\n                    newEntries.set(parseInt(((_a = entry.target) === null || _a === void 0 ? void 0 : _a.getAttribute(PAGE_NUMBER_ATTRIBUTE)) || \'\', 10), {\r\n                        ratio: entry.intersectionRatio,\r\n                        timestamp: entry.time,\r\n                    });\r\n                });\r\n                return newEntries;\r\n            },\r\n        });\r\n        detector.observeNodes(PAGE_NUMBER_SELECTOR);\r\n        return () => {\r\n            detector.destroy();\r\n        };\r\n    }, [scrollRoot, observerIndex]);\r\n    // map of pages at the moment they are scrolled into view, useful for tracking analytics such as page impressions\r\n    // different than the visiblePageRatios in that it only saves the ~initial~ point of when a page comes into view\r\n    // it doesn\'t track the live change in ratios as the page remains in view when scrolled\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        const root = scrollRoot || document.documentElement;\r\n        const detector = new VisibleEntriesDetector({\r\n            root: root,\r\n            thresHold: pageScrolledIntoViewThreshold,\r\n            setVisibleEntries: setPagesScrolledIntoView,\r\n            onVisibleEntriesChange: ({ visibleEntries }) => {\r\n                const newEntries = new Map();\r\n                visibleEntries.map(entry => {\r\n                    var _a;\r\n                    newEntries.set(parseInt(((_a = entry.target) === null || _a === void 0 ? void 0 : _a.getAttribute(PAGE_NUMBER_ATTRIBUTE)) || \'\', 10), entry.intersectionRatio);\r\n                });\r\n                return newEntries;\r\n            },\r\n        });\r\n        detector.observeNodes(PAGE_NUMBER_SELECTOR);\r\n        return () => {\r\n            detector.destroy();\r\n        };\r\n    }, [scrollRoot, observerIndex]);\r\n    // calculates a new scroll position after zooming in/out so user doesnt lose their position\r\n    const updateScrollPosition = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((zoomMultiplier) => {\r\n        const root = scrollRoot || document.documentElement;\r\n        if (!root) {\r\n            return;\r\n        }\r\n        const newScrollTop = Math.floor(root.scrollTop * zoomMultiplier);\r\n        setTimeout(() => {\r\n            root.scrollTop = newScrollTop;\r\n        }, 0);\r\n    }, [scrollRoot]);\r\n    return {\r\n        isOutlineTargetVisible,\r\n        isPageVisible,\r\n        scrollDirection,\r\n        visibleOutlineTargets,\r\n        visiblePageRatios,\r\n        resetScrollObservers,\r\n        scrollRoot,\r\n        setScrollRoot,\r\n        scrollToOutlineTarget,\r\n        setScrollThreshold,\r\n        scrollToPage,\r\n        updateScrollPosition,\r\n        setIsOutlineClicked,\r\n        scrollThresholdReachedInDirection,\r\n        isAtTop,\r\n        isOutlineClicked,\r\n        pagesScrolledIntoView,\r\n        setPageScrolledIntoViewThreshold,\r\n    };\r\n}\r\n\n;// CONCATENATED MODULE: ./src/context/UiContext.ts\n\r\n\r\nconst UiContext = external_commonjs_react_commonjs2_react_amd_react_root_React_.createContext({\r\n    errorMessage: null,\r\n    isLoading: false,\r\n    isShowingHighlightOverlay: false,\r\n    isShowingOutline: false,\r\n    isShowingTextHighlight: false,\r\n    isShowingThumbnail: false,\r\n    isShowingInteract: false,\r\n    setErrorMessage: errorMessage => {\r\n        logProviderWarning(`setErrorMessage(${errorMessage})`, \'UiContext\');\r\n    },\r\n    setIsShowingOutline: isShowingOutline => {\r\n        logProviderWarning(`setIsShowingOutline(${isShowingOutline})`, \'UiContext\');\r\n    },\r\n    setIsShowingInteract: isShowingInteract => {\r\n        logProviderWarning(`setIsShowingInteract(${isShowingInteract})`, \'UiContext\');\r\n    },\r\n    setIsLoading: isLoading => {\r\n        logProviderWarning(`setIsLoading(${isLoading})`, \'UiContext\');\r\n    },\r\n    setIsShowingHighlightOverlay: isShowingHighlightOverlay => {\r\n        logProviderWarning(`setIsShowingHighlightOverlay(${isShowingHighlightOverlay})`, \'UiContext\');\r\n    },\r\n    setIsShowingTextHighlight: isShowingTextHighlight => {\r\n        logProviderWarning(`setIsShowingTextHighlight(${isShowingTextHighlight})`, \'UiContext\');\r\n    },\r\n    setIsShowingThumbnail: isShowingThumbnail => {\r\n        logProviderWarning(`setIsShowingThumbnail(${isShowingThumbnail})`, \'UiContext\');\r\n    },\r\n});\r\nfunction useUiContextProps() {\r\n    const [errorMessage, setErrorMessage] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\r\n    const [isLoading, setIsLoading] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(true);\r\n    const [isShowingHighlightOverlay, setIsShowingHighlightOverlay] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\r\n    const [isShowingOutline, setIsShowingOutline] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\r\n    const [isShowingTextHighlight, setIsShowingTextHighlight] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\r\n    const [isShowingThumbnail, setIsShowingThumbnail] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\r\n    const [isShowingInteract, setIsShowingInteract] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\r\n    return {\r\n        errorMessage,\r\n        isLoading,\r\n        isShowingHighlightOverlay,\r\n        isShowingOutline,\r\n        isShowingTextHighlight,\r\n        isShowingThumbnail,\r\n        isShowingInteract,\r\n        setErrorMessage,\r\n        setIsLoading,\r\n        setIsShowingHighlightOverlay,\r\n        setIsShowingOutline,\r\n        setIsShowingTextHighlight,\r\n        setIsShowingThumbnail,\r\n        setIsShowingInteract,\r\n    };\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/errorMessage.ts\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction getErrorMessage(error) {\r\n    if (!error) {\r\n        return \'Unknown error\';\r\n    }\r\n    if (typeof error === \'string\') {\r\n        return error;\r\n    }\r\n    if (error instanceof Error) {\r\n        return error.message;\r\n    }\r\n    if (typeof error.error === \'string\') {\r\n        return error.error;\r\n    }\r\n    return error.toString();\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/pdfWorker.ts\n\r\n// Set PDFjs worker source or else PDF will not load when this library is imported as a package.\r\nfunction initPdfWorker() {\r\n    external_react_pdf_.pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${external_react_pdf_.pdfjs.version}/pdf.worker.min.js`;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/reader-utils.ts\nconst RENDER_TYPE = {\r\n    MULTI_CANVAS: \'multi-canvas\',\r\n    SINGLE_CANVAS: \'single-canvas\',\r\n};\r\nfunction getRenderMode(renderType) {\r\n    switch (renderType) {\r\n        case RENDER_TYPE.SINGLE_CANVAS:\r\n            return \'none\';\r\n        default:\r\n            return \'canvas\';\r\n    }\r\n}\r\nfunction getClassNameSuffixFromRenderType(renderType) {\r\n    switch (renderType) {\r\n        case RENDER_TYPE.SINGLE_CANVAS:\r\n            return \'single-canvas\';\r\n        default:\r\n            return \'multi-canvas\';\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/scale.ts\n// We assume 96 DPI for display\r\n// TODO: There are more accurate ways to do this, but this is what ScholarPhi does now\r\nconst DPI = 96;\r\n// PDF units are in 1/72nds of an inch\r\nconst USER_UNIT_DENOMINATOR = 72;\r\n/**\r\n * Given a PDFPageProxy, calculates the screen pixel size of the PDF page at 100% scale\r\n * @param page The PDFPageProxy to calculate size for\r\n * @returns Pixel size of a page at 100% scale assuming 96DPI display\r\n */\r\nfunction computePageDimensions(page) {\r\n    const [leftPx, topPx, rightPx, bottomPx] = page.view;\r\n    const PPI = (page.userUnit / USER_UNIT_DENOMINATOR) * DPI;\r\n    return {\r\n        height: (bottomPx - topPx) * PPI,\r\n        width: (rightPx - leftPx) * PPI,\r\n    };\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/types/destination.ts\n/**\r\n * This class is the definition of the first item when Destination is returned as an array.\r\n * It is created based on the same class in \'react-pdf\' library:\r\n * https://github.com/wojtekmaj/react-pdf/blob/ca4453f123af51e2faed39a8a62800901030459a/src/Ref.js\r\n */\r\nclass Ref {\r\n    constructor({ num, gen }) {\r\n        this.num = num;\r\n        this.gen = gen;\r\n    }\r\n    toString() {\r\n        return this.gen !== 0 ? `${this.num}R${this.gen}` : `${this.num}R`;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/DocumentWrapper.tsx\nvar DocumentWrapper_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst DocumentWrapper = (_a) => {\r\n    var { children, renderType } = _a, extraProps = DocumentWrapper_rest(_a, ["children", "renderType"]);\r\n    initPdfWorker();\r\n    const { pdfDocProxy, setNumPages, setNumPagesLoaded, setPageDimensions, setPdfDocProxy } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\r\n    const { resetScrollObservers, updateScrollPosition } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(ScrollContext);\r\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\r\n    const { setErrorMessage, setIsLoading } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(UiContext);\r\n    const [lastScale, setLastScale] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(1); // assuming the scale defaults to 100%\r\n    function getFirstPage(pdfDoc) {\r\n        // getPage uses 1-indexed pageNumber, not 0-indexed pageIndex\r\n        return pdfDoc.getPage(1);\r\n    }\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        resetScrollObservers();\r\n    }, []);\r\n    // after scale changes, update scroll position so the user stays looking at the same position of the paper\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        if (scale === lastScale) {\r\n            return;\r\n        }\r\n        const zoomMultiplier = scale / lastScale;\r\n        updateScrollPosition(zoomMultiplier);\r\n        setLastScale(scale);\r\n    }, [scale, updateScrollPosition]);\r\n    const onPdfLoadSuccess = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((pdfDoc) => {\r\n        setNumPagesLoaded(0);\r\n        setNumPages(pdfDoc.numPages);\r\n        getFirstPage(pdfDoc)\r\n            .then(page => {\r\n            setPageDimensions(computePageDimensions(page));\r\n            setErrorMessage(null);\r\n        })\r\n            .catch(error => {\r\n            setErrorMessage(getErrorMessage(error));\r\n        })\r\n            .finally(() => {\r\n            setIsLoading(false);\r\n        });\r\n        if (!pdfDocProxy) {\r\n            setPdfDocProxy(pdfDoc);\r\n        }\r\n    }, []);\r\n    const onSourceError = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((error) => {\r\n        setErrorMessage(getErrorMessage(error));\r\n        setIsLoading(false);\r\n    }, []);\r\n    const onPdfLoadError = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((error) => {\r\n        setErrorMessage(getErrorMessage(error));\r\n        setIsLoading(false);\r\n    }, []);\r\n    const onItemClicked = (param) => {\r\n        if (!pdfDocProxy) {\r\n            return;\r\n        }\r\n        // Scroll to the destination of the item\r\n        pdfDocProxy.getDestination(param.dest).then(destArray => {\r\n            if (!destArray) {\r\n                return;\r\n            }\r\n            const [ref, , , bottomPoints] = destArray;\r\n            pdfDocProxy.getPageIndex(new Ref(ref)).then(refInfo => {\r\n                scrollToPosition(parseInt(refInfo.toString()), 0, bottomPoints, rotation);\r\n            });\r\n        });\r\n    };\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(external_react_pdf_.Document, Object.assign({ options: { cMapUrl: \'cmaps/\', cMapPacked: true }, onSourceError: onSourceError, onLoadError: onPdfLoadError, onLoadSuccess: onPdfLoadSuccess, externalLinkTarget: "_blank", renderMode: getRenderMode(renderType), \r\n        // @ts-ignore: the arguments should be { dest, pageIndex, pageNumber }\r\n        // @types/react-pdf hasn\'t updated the function signature\r\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/d73eb652e0ba8f89395a0ef2ba69cf1e640ce5be/types/react-pdf/dist/Document.d.ts#L72\r\n        onItemClick: onItemClicked }, extraProps), children));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/DownloadButton.tsx\nvar DownloadButton_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n/**\r\n * HTML anchor tag allows you to download a file from the same origin.\r\n * This is a workaround to download a file served from a different origin\r\n */\r\nconst DownloadButton = (_a) => {\r\n    var { pdfUrl, children, className } = _a, extraProps = DownloadButton_rest(_a, ["pdfUrl", "children", "className"]);\r\n    const [fetching, setFetching] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\r\n    const download = () => {\r\n        setFetching(true);\r\n        fetch(pdfUrl)\r\n            .then(response => response.blob())\r\n            .then(blob => {\r\n            setFetching(false);\r\n            const blobURL = URL.createObjectURL(blob);\r\n            const a = document.createElement(\'a\');\r\n            a.href = blobURL;\r\n            a.download = pdfUrl.split(\'/\').pop() || pdfUrl;\r\n            document.body.appendChild(a);\r\n            a.click();\r\n        });\r\n    };\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("button", Object.assign({ disabled: fetching, onClick: () => download(), "aria-label": "Download PDF", className: `pdf-reader__download-btn ${className}` }, extraProps), children ? children : \'Download\'));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/HighlightOverlay.tsx\nvar HighlightOverlay_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\nconst HighlightOverlay = (_a) => {\r\n    var { children, pageIndex } = _a, extraProps = HighlightOverlay_rest(_a, ["children", "pageIndex"]);\r\n    const { pageDimensions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\r\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\r\n    const maskId = `highlight-overlay-mask-${pageIndex}`;\r\n    const getPageStyle = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\r\n        return computePageStyle(pageDimensions, rotation, scale);\r\n    }, [pageDimensions, rotation, scale]);\r\n    const getUnmaskedArea = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((boundingBoxes) => {\r\n        const boxes = Array.isArray(boundingBoxes) ? boundingBoxes : [boundingBoxes];\r\n        return boxes.map((box, i) => {\r\n            const boxStyle = computeBoundingBoxStyle(box.props, pageDimensions, rotation, scale);\r\n            return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("rect", { style: boxStyle, x: boxStyle.left, y: boxStyle.top, key: i, fill: "black" }));\r\n        });\r\n    }, [pageDimensions, rotation, scale]);\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ className: "pdf-reader__page-highlight-overlay", style: getPageStyle() }, extraProps),\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("svg", { className: "page-mask", style: getPageStyle() },\r\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("mask", { id: maskId },\r\n                external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("rect", { style: getPageStyle(), fill: "white" }),\r\n                children && getUnmaskedArea(children)),\r\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("rect", { style: getPageStyle(), fill: "white", opacity: "0.6", mask: `url(#${maskId})` }))));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/marker/ArrowFlagBase.tsx\nvar ArrowFlagBase_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst POSITION = {\r\n    LEFT: \'LEFT\',\r\n    RIGHT: \'RIGHT\',\r\n};\r\nconst DEFAULT_ORIGIN_TOP_PX = 0;\r\nconst DEFAULT_FLAG_WIDTH_PX = 62;\r\nconst DEFAULT_FLAG_HEIGHT_PX = 20;\r\nconst DEFAULT_TAIL_LENGTH_PX = 40;\r\nconst DEFAULT_TAIL_WIDTH_PX = 7;\r\nconst ArrowFlagBase = (_a) => {\r\n    var { className, label, flagWidth, originTop, position = POSITION.LEFT, tailLength, tailWidgth } = _a, extraProps = ArrowFlagBase_rest(_a, ["className", "label", "flagWidth", "originTop", "position", "tailLength", "tailWidgth"]);\r\n    const { pageDimensions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\r\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\r\n    // function for scaling bounding boxes based on current document states\r\n    const computeSize = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((box) => computeBoundingBoxStyle(box, pageDimensions, rotation, scale), [pageDimensions, rotation, scale, originTop]);\r\n    // bounding box of the flag\r\n    const flagSize = {\r\n        top: originTop || DEFAULT_ORIGIN_TOP_PX,\r\n        left: 0,\r\n        height: DEFAULT_FLAG_HEIGHT_PX,\r\n        width: flagWidth || DEFAULT_FLAG_WIDTH_PX,\r\n    };\r\n    // bounding box of the tail\r\n    const tailSize = {\r\n        top: originTop || DEFAULT_ORIGIN_TOP_PX,\r\n        left: 0,\r\n        height: tailLength || DEFAULT_TAIL_LENGTH_PX,\r\n        width: tailWidgth || DEFAULT_TAIL_WIDTH_PX,\r\n    };\r\n    const computedFlagSize = computeSize(flagSize);\r\n    const computedTailSize = computeSize(tailSize);\r\n    const tailPosition = {\r\n        top: computedTailSize.top,\r\n        left: position === POSITION.LEFT ? -computedTailSize.width : pageDimensions.width * scale,\r\n        height: computedTailSize.height,\r\n        width: computedTailSize.width,\r\n    };\r\n    const renderFlag = () => {\r\n        const { top, width, height } = computedFlagSize;\r\n        const flagPosition = {\r\n            top,\r\n            height,\r\n            width,\r\n            left: position === POSITION.LEFT\r\n                ? -computedTailSize.width\r\n                : tailPosition.left + tailPosition.width - width + 1,\r\n        };\r\n        const labelPosition = position === POSITION.LEFT ? \'47%\' : \'53%\';\r\n        return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__arrow-flag-base__flag", style: flagPosition },\r\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(IconFlag, { className: "pdf-reader__arrow-flag-base__flag-icon", headerPosition: position },\r\n                external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("text", { x: labelPosition, y: "54%", dominantBaseline: "middle", textAnchor: "middle", className: "pdf-reader__arrow-flag-base__flag-label" }, label))));\r\n    };\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ className: classnames_default()(\'pdf-reader__arrow-flag-base\', className) }, extraProps),\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__arrow-flag-base__tail", style: tailPosition }),\r\n        label && renderFlag()));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/icon/IconFlag.tsx\n\r\n\r\nconst IconFlag = ({ children, className, headerPosition = POSITION.LEFT, }) => {\r\n    if (headerPosition == POSITION.LEFT) {\r\n        return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("svg", { viewBox: "0 0 62 22", className: className },\r\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("path", { d: "M52.0108 20.8315L52.0105 20.8318C51.5525 21.2525 50.9527 21.491 50.3265 21.5H3.02828C2.35623 21.5 1.71264 21.2355 1.23885 20.7661C0.76522 20.2969 0.5 19.6615 0.5 19V3C0.5 2.33848 0.765221 1.70309 1.23885 1.23389C1.71264 0.764519 2.35623 0.5 3.02828 0.5H50.2457C50.8719 0.50902 51.4718 0.747466 51.9298 1.16821L51.93 1.16846L60.6515 9.16846L60.6514 9.16852L60.658 9.17439C60.9175 9.40408 61.126 9.68412 61.2707 9.99679C61.4154 10.3095 61.4933 10.6482 61.4996 10.9917C61.5059 11.3353 61.4405 11.6765 61.3074 11.9941C61.1749 12.3104 60.9779 12.5966 60.7286 12.8348L52.0108 20.8315Z" }),\r\n            children));\r\n    }\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("svg", { viewBox: "0 0 62 22", className: className },\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("path", { d: "M9.98922 1.16846L9.9895 1.16821C10.4475 0.747472 11.0473 0.509029 11.6735 0.499999L58.9717 0.500004C59.6438 0.500004 60.2874 0.764522 60.7611 1.23389C61.2348 1.7031 61.5 2.33848 61.5 3L61.5 19C61.5 19.6615 61.2348 20.2969 60.7611 20.7661C60.2874 21.2355 59.6438 21.5 58.9717 21.5L11.7543 21.5C11.1281 21.491 10.5282 21.2525 10.0702 20.8318L10.07 20.8315L1.34854 12.8315L1.3486 12.8315L1.34196 12.8256C1.08248 12.5959 0.87399 12.3159 0.729283 12.0032C0.584584 11.6905 0.506719 11.3518 0.500417 11.0083C0.494111 10.6647 0.559495 10.3235 0.692605 10.0059C0.825143 9.68961 1.02206 9.40341 1.27136 9.16519L9.98922 1.16846Z" }),\r\n        children));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/types/boundingBox.ts\n// Calculate a bounding box\'s pixel coordinates from the raw bounding box\'s coorditate ratios scaled to the page size\r\nfunction scaleRawBoundingBox(boundingBoxRaw, pageHeight, pageWidth) {\r\n    const boxScaled = {\r\n        page: boundingBoxRaw.page,\r\n        top: boundingBoxRaw.top * pageHeight,\r\n        left: boundingBoxRaw.left * pageWidth,\r\n        height: boundingBoxRaw.height * pageHeight,\r\n        width: boundingBoxRaw.width * pageWidth,\r\n    };\r\n    return boxScaled;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/marker/ArrowFlag.tsx\nvar ArrowFlag_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\n\r\nconst CENTER_LINE = 0.5;\r\nconst LINE_HEIGHT_MULTIPLIER = 1.5;\r\nconst ArrowFlag = (_a) => {\r\n    var { boundingBoxes, className, label } = _a, extraProps = ArrowFlag_rest(_a, ["boundingBoxes", "className", "label"]);\r\n    const { pageDimensions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\r\n    const convertRatioToPx = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((rawBoundingBox) => scaleRawBoundingBox(rawBoundingBox, pageDimensions.height, pageDimensions.width), [pageDimensions]);\r\n    if (boundingBoxes.length == 0)\r\n        return null;\r\n    // If any bounding boxes span over the center line, we know that either the paper is\r\n    // single-column or a mix of single-column and two-column. In such case, bounding\r\n    // boxes will not be divided so as to guarantee only 1 flag is rendered on the left side.\r\n    const hasWideBox = boundingBoxes.some(({ left, width }) => left < CENTER_LINE && left + width >= CENTER_LINE);\r\n    let leftBoundingBoxes = boundingBoxes, rightBoundingBoxes = [];\r\n    if (!hasWideBox) {\r\n        leftBoundingBoxes = boundingBoxes.filter(({ left }) => left < CENTER_LINE);\r\n        rightBoundingBoxes = boundingBoxes.filter(({ left }) => left >= CENTER_LINE);\r\n    }\r\n    // To handle a special case where the previous bounding box is on the right while\r\n    // the later is on the left. In such case, there are only 2 bounding boxes.\r\n    // The vertical distance between the two boxes is used to differentiate whether this case\r\n    // happens on a single-column paper or a two-column paper. If it\'s the previous, then\r\n    // the whole flag should appear on the left. Both bounding boxes will be categorized\r\n    // as leftBoundingBoxes. Otherwise, the tail wrapping still applies.\r\n    if (leftBoundingBoxes.length === 1 && rightBoundingBoxes.length === 1) {\r\n        // If the vertical difference between the two boxes is smaller then 1.5 times line height,\r\n        // the paper is categorized as single-column. Both bounding boxes are set to leftBoundingBoxes.\r\n        // ArrowFlag will appear on the left\r\n        if (Math.abs(rightBoundingBoxes[0].top - leftBoundingBoxes[0].top) <\r\n            LINE_HEIGHT_MULTIPLIER * rightBoundingBoxes[0].height) {\r\n            leftBoundingBoxes = boundingBoxes;\r\n            rightBoundingBoxes = [];\r\n        }\r\n    }\r\n    // Sort bounding boxes by their top positions\r\n    leftBoundingBoxes.sort((first, second) => first.top - second.top);\r\n    rightBoundingBoxes.sort((first, second) => first.top - second.top);\r\n    const renderArrowFlagBase = (boxes, position, showLabel) => {\r\n        if (boxes.length == 0)\r\n            return null;\r\n        const firstBox = convertRatioToPx(boxes[0]), lastBox = convertRatioToPx(boxes[boxes.length - 1]);\r\n        const props = {\r\n            label: showLabel ? label : undefined,\r\n            tailLength: lastBox.top + lastBox.height - firstBox.top,\r\n            originTop: firstBox.top,\r\n            position,\r\n        };\r\n        return external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(ArrowFlagBase, Object.assign({}, props));\r\n    };\r\n    const hasLeftFlag = leftBoundingBoxes.length > 0;\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ className: classnames_default()(\'pdf-reader__arrow-flag\', className) }, extraProps),\r\n        renderArrowFlagBase(leftBoundingBoxes, POSITION.LEFT, hasLeftFlag),\r\n        renderArrowFlagBase(rightBoundingBoxes, POSITION.RIGHT, !hasLeftFlag)));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/outline/OutlineItem.tsx\n\r\n\r\n\r\nconst OutlineItem = ({ items, onClick }) => {\r\n    const { isOutlineTargetVisible } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(ScrollContext);\r\n    if (!items || !items.length) {\r\n        return null;\r\n    }\r\n    function renderItem(item) {\r\n        var _a;\r\n        const clickHandler = (event) => {\r\n            event.preventDefault();\r\n            if (onClick) {\r\n                onClick(item.dest);\r\n            }\r\n        };\r\n        // If an item has sub titles, render <OutlineItem />\r\n        return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("li", { key: ((_a = item.dest) === null || _a === void 0 ? void 0 : _a.toString()) || item.title, className: classnames_default()(\'reader__outline-item\', {\r\n                \'reader__outline-item--target-visible\': isOutlineTargetVisible(item.dest),\r\n            }) },\r\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("a", { href: "#", onClick: clickHandler, "data-test-id": "reader-outline-item" }, item.title),\r\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(OutlineItem, { items: item.items, onClick: onClick })));\r\n    }\r\n    return external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("ul", { className: "reader__outline-items" }, items.map(item => renderItem(item)));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/outline/Outline.tsx\nvar Outline_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\nconst Outline = (_a) => {\r\n    var extraProps = Outline_rest(_a, []);\r\n    const { outline, pdfDocProxy, setOutline, setOutlinePositions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\r\n    const { scrollToOutlineTarget, resetScrollObservers } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(ScrollContext);\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        if (outline) {\r\n            return;\r\n        }\r\n        if (!pdfDocProxy) {\r\n            return;\r\n        }\r\n        pdfDocProxy\r\n            .getOutline()\r\n            .then((outlineArray) => {\r\n            setOutline(outlineArray);\r\n            return buildOutlinePositions(pdfDocProxy, outlineArray);\r\n        })\r\n            .then(outlinePositions => {\r\n            setOutlinePositions(outlinePositions);\r\n        })\r\n            .then(() => {\r\n            resetScrollObservers();\r\n        });\r\n    }, [outline]);\r\n    const clickHandler = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((dest) => {\r\n        if (!dest) {\r\n            return;\r\n        }\r\n        scrollToOutlineTarget(dest);\r\n        return;\r\n    }, []);\r\n    if (!pdfDocProxy) {\r\n        return null;\r\n    }\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ className: "reader__outline" }, extraProps), !!outline && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(OutlineItem, { items: outline, onClick: clickHandler })));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/Overlay.tsx\nvar Overlay_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\nconst Overlay = (_a) => {\r\n    var { children } = _a, extraProps = Overlay_rest(_a, ["children"]);\r\n    const { pageDimensions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\r\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\r\n    const getOverlayStyle = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\r\n        return computePageStyle(pageDimensions, rotation, scale);\r\n    }, [pageDimensions, rotation, scale]);\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ className: "pdf-reader__overlay", style: getOverlayStyle() }, extraProps), children));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/utils/MaxVisibleElement.ts\nfunction getMaxVisibleElement(visibleElements) {\r\n    let maxVisibleKey = null;\r\n    let maxRatio = 0;\r\n    for (const [visibleKey, { ratio }] of visibleElements) {\r\n        if (maxRatio < ratio) {\r\n            maxVisibleKey = visibleKey;\r\n            maxRatio = ratio;\r\n        }\r\n    }\r\n    return maxVisibleKey;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/PageNumberControl.tsx\n\r\n\r\n\r\n\r\n\r\nconst DELAY_SCROLL_TIME_OUT_MS = 1000;\r\nconst PageNumberControl = ({ className }) => {\r\n    const delayTimerRef = external_commonjs_react_commonjs2_react_amd_react_root_React_.useRef();\r\n    const { numPages } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\r\n    const { scrollToPage, visiblePageRatios } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(ScrollContext);\r\n    const [minPage, setMinPage] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(0);\r\n    const [userInput, setUserInput] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(\'0\');\r\n    // Initialize page control element\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        if (numPages != 0) {\r\n            setMinPage(1);\r\n        }\r\n    }, [numPages]);\r\n    // Everytime we scroll through the page this useEffect\r\n    // will trigger and set current page based on our current\r\n    // scroll position\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        if (visiblePageRatios.size !== 0) {\r\n            const maxVisiblePageNumber = getMaxVisibleElement(visiblePageRatios);\r\n            if (maxVisiblePageNumber) {\r\n                setUserInput(maxVisiblePageNumber.toString());\r\n            }\r\n        }\r\n    }, [visiblePageRatios]);\r\n    const onPageNumberChange = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((event) => {\r\n        const { value } = event.currentTarget;\r\n        // Decimal case\r\n        if (!Number.isInteger(value)) {\r\n            setUserInput(parseInt(value, 10).toString());\r\n        }\r\n        setUserInput(value);\r\n        if (delayTimerRef.current) {\r\n            clearTimeout(delayTimerRef.current);\r\n        }\r\n        // After user input the page that they want to scroll to\r\n        // our ref will start setting a delay around 1s before scroll\r\n        // to the position that user desire\r\n        const newPageNumber = parseInt(value, 10);\r\n        if (newPageNumber >= minPage && newPageNumber <= numPages) {\r\n            delayTimerRef.current = setTimeout(() => {\r\n                scrollToPage({ pageNumber: newPageNumber });\r\n            }, DELAY_SCROLL_TIME_OUT_MS);\r\n        }\r\n    }, [minPage, numPages, scrollToPage]);\r\n    const handleBlur = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\r\n        if (delayTimerRef.current) {\r\n            clearTimeout(delayTimerRef.current);\r\n        }\r\n        const pageNumber = parseInt(userInput, 10);\r\n        if (Number.isNaN(pageNumber)) {\r\n            return;\r\n        }\r\n        delayTimerRef.current = setTimeout(() => {\r\n            scrollToPage({ pageNumber: pageNumber });\r\n        }, DELAY_SCROLL_TIME_OUT_MS);\r\n    }, [userInput, scrollToPage]);\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: classnames_default()(\'pdf-reader__page-number-control\', className) },\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("input", { "aria-label": "Current Page", className: "pdf-reader__page-number-control__current-page", type: "number", name: "currentPage", value: userInput, onChange: onPageNumberChange, onBlur: handleBlur }),\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("span", { className: "pdf-reader__page-number-control__separator " }, "/"),\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("span", { "aria-label": "Total Pages", className: "pdf-reader__page-number-control__total-pages" }, numPages)));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/context/PageRenderContext.ts\nvar PageRenderContext_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\nconst PageRenderContext = external_commonjs_react_commonjs2_react_amd_react_root_React_.createContext({\r\n    pageRenderStates: new Map(),\r\n    getObjectURLForPage: args => {\r\n        logProviderWarning(`getObjectURLForPage(${JSON.stringify(args)})`, \'PageRenderContext\');\r\n        return null;\r\n    },\r\n    isBuildingObjectURLForPage: args => {\r\n        logProviderWarning(`isBuildingObjectURLForPage(${JSON.stringify(args)})`, \'PageRenderContext\');\r\n        return false;\r\n    },\r\n    isFinishedBuildingAllPagesObjectURLs: () => {\r\n        logProviderWarning(`isFinishedBuildingAllPagesObjectURLs()`, \'PageRenderContext\');\r\n        return false;\r\n    },\r\n    buildObjectURLForPage: args => {\r\n        logProviderWarning(`buildObjectURLForPage(${JSON.stringify(args)})`, \'PageRenderContext\');\r\n        return Promise.resolve(\'\');\r\n    },\r\n});\r\nfunction usePageRenderContextProps({ pdfDocProxy, pixelRatio, scale, visiblePageRatios, }) {\r\n    const [pageRenderStates, _setPageRenderStates] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(() => {\r\n        const map = new Map();\r\n        Object.freeze(map);\r\n        return map;\r\n    });\r\n    // Because rendering a page is async, we will lose the current pageRenderStates\r\n    // This ref trick allows the latest to be accessible when the objectURL is ready\r\n    const pageRenderStatesRef = external_commonjs_react_commonjs2_react_amd_react_root_React_.useRef(pageRenderStates);\r\n    const setPageRenderStates = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((pageRenderStates) => {\r\n        pageRenderStatesRef.current = pageRenderStates;\r\n        _setPageRenderStates(pageRenderStates);\r\n    }, [pageRenderStatesRef]);\r\n    const isBuildingObjectURLForPage = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex }) => {\r\n        if (typeof pageIndex === \'number\') {\r\n            pageNumber = pageIndex + 1;\r\n        }\r\n        if (typeof pageNumber !== \'number\') {\r\n            return false;\r\n        }\r\n        const state = pageRenderStates.get(pageNumber);\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        return !state.objectURL;\r\n    }, [pageRenderStates]);\r\n    const isFinishedBuildingAllPagesObjectURLs = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\r\n        var _a;\r\n        if (!pdfDocProxy)\r\n            return false;\r\n        for (let pageNumber = 1; pageNumber <= pdfDocProxy.numPages; pageNumber++) {\r\n            if (!((_a = pageRenderStates.get(pageNumber)) === null || _a === void 0 ? void 0 : _a.objectURL)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }, [pdfDocProxy, pageRenderStates]);\r\n    const getObjectURLForPage = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex }) => {\r\n        var _a;\r\n        if (typeof pageIndex === \'number\') {\r\n            pageNumber = pageIndex + 1;\r\n        }\r\n        if (typeof pageNumber !== \'number\') {\r\n            return null;\r\n        }\r\n        return ((_a = pageRenderStates.get(pageNumber)) === null || _a === void 0 ? void 0 : _a.objectURL) || null;\r\n    }, [pageRenderStates]);\r\n    const buildObjectURLForPage = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex }) => {\r\n        var _a;\r\n        if (typeof pageIndex === \'number\') {\r\n            pageNumber = pageIndex + 1;\r\n        }\r\n        if (typeof pageNumber !== \'number\') {\r\n            throw new Error(\'prop "pageNumber" is not a number\');\r\n        }\r\n        if (!pdfDocProxy) {\r\n            throw new Error(\'cannot build a page until a "pdfDocProxy" is set on DocumentContext\');\r\n        }\r\n        // Don\'t need to start another task if already rendered\r\n        const existingPromise = (_a = pageRenderStates.get(pageNumber)) === null || _a === void 0 ? void 0 : _a.promise;\r\n        if (existingPromise) {\r\n            return existingPromise;\r\n        }\r\n        const promise = buildPageObjectURL({\r\n            pageNumber,\r\n            pdfDocProxy,\r\n            pixelRatio,\r\n            scale,\r\n            promiseTimestamp: flushTimestamp,\r\n        });\r\n        const renderState = {\r\n            promise,\r\n            objectURL: null,\r\n        };\r\n        promise.then(objectURL => {\r\n            if (!objectURL)\r\n                return;\r\n            renderState.objectURL = objectURL;\r\n            const newPageRenderStates = new Map(pageRenderStatesRef.current);\r\n            Object.freeze(newPageRenderStates);\r\n            setPageRenderStates(newPageRenderStates);\r\n        });\r\n        const newPageRenderStates = new Map(pageRenderStatesRef.current);\r\n        newPageRenderStates.set(pageNumber, renderState);\r\n        Object.freeze(newPageRenderStates);\r\n        setPageRenderStates(newPageRenderStates);\r\n        return promise;\r\n    }, [pageRenderStates, pdfDocProxy, scale]);\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        const visiblePages = [...visiblePageRatios.keys()];\r\n        if (!pdfDocProxy || [...pageRenderStates.keys()].length === pdfDocProxy.numPages) {\r\n            return;\r\n        }\r\n        const priorityQueue = getPriorityQueue(visiblePages, pdfDocProxy.numPages);\r\n        for (const pageNumber of priorityQueue) {\r\n            buildObjectURLForPage({ pageNumber });\r\n        }\r\n    }, [pageRenderStates, pdfDocProxy, visiblePageRatios]);\r\n    // Flush page render states when scale changes\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        // Clean memory of old generated images\r\n        for (const [, renderState] of pageRenderStatesRef.current) {\r\n            if (renderState.objectURL) {\r\n                URL.revokeObjectURL(renderState.objectURL);\r\n            }\r\n        }\r\n        // if current async promises dont have this timestamp, then we flush them\r\n        flushTimestamp = new Date().getTime();\r\n        // Clear all page render states, so pages can rebuild images\r\n        const newPageRenderStates = new Map();\r\n        Object.freeze(newPageRenderStates);\r\n        setPageRenderStates(newPageRenderStates);\r\n    }, [scale, pixelRatio]);\r\n    return {\r\n        pageRenderStates,\r\n        getObjectURLForPage,\r\n        isBuildingObjectURLForPage,\r\n        isFinishedBuildingAllPagesObjectURLs,\r\n        buildObjectURLForPage,\r\n    };\r\n}\r\nfunction getNeighboringPages(pages, numTotalPages) {\r\n    return pages.length === 0\r\n        ? []\r\n        : [Math.max(1, pages[0] - 1), Math.min(numTotalPages, pages[pages.length - 1] + 1)];\r\n}\r\nfunction getPriorityQueue(visiblePages, numPages) {\r\n    const visiblePagesNeighbors = getNeighboringPages(visiblePages, numPages);\r\n    const allPages = Array.from({ length: numPages }, (_, i) => i + 1);\r\n    const priorityQueue = new Set([...visiblePages, ...visiblePagesNeighbors, ...allPages]); // put into set to remove duplicats\r\n    return Array.from(priorityQueue); // convert set to array\r\n}\r\n// This boost causes the rendered image to be scaled up by this amount\r\nconst SCALE_BOOST = 2;\r\n// Generate an object url for a given page, rendered in a shared canvas\r\nfunction buildPageObjectURL({ pageNumber, pdfDocProxy, pixelRatio = (typeof window !== \'undefined\' ? window.devicePixelRatio : null) || 0, scale = 1, imageType = \'image/png\', imageQuality = 1.0, promiseTimestamp, }) {\r\n    return PageRenderContext_awaiter(this, void 0, void 0, function* () {\r\n        const pageProxy = yield pdfDocProxy.getPage(pageNumber);\r\n        const blob = yield useRenderCanvas((canvas) => PageRenderContext_awaiter(this, void 0, void 0, function* () {\r\n            if (promiseTimestamp !== flushTimestamp) {\r\n                return promiseTimestamp; // flush stale promise\r\n            }\r\n            // Render page in a canvas\r\n            const viewport = pageProxy.getViewport({ scale: scale * pixelRatio * SCALE_BOOST });\r\n            canvas.height = viewport.height;\r\n            canvas.width = viewport.width;\r\n            const canvasContext = canvas.getContext(\'2d\');\r\n            if (!canvasContext) {\r\n                throw new Error(\'canvas was unable to get a context\');\r\n            }\r\n            const renderTask = pageProxy.render({\r\n                canvasContext,\r\n                viewport,\r\n                intent: \'print\', // immediately render pages on inactive pages\r\n            });\r\n            yield renderTask.promise;\r\n            yield new Promise(resolve => setTimeout(resolve, 16));\r\n            // Fetch a blob for an image of the canvas\r\n            return new Promise((resolve, reject) => {\r\n                try {\r\n                    canvas.toBlob(blob => resolve(blob), imageType, imageQuality);\r\n                }\r\n                catch (error) {\r\n                    reject(error);\r\n                }\r\n            });\r\n        }));\r\n        if (typeof blob === \'number\') {\r\n            return \'\';\r\n        }\r\n        // Convert blob image to object url\r\n        if (!blob) {\r\n            throw new Error(\'unable to create image from page\');\r\n        }\r\n        return URL.createObjectURL(blob);\r\n    });\r\n}\r\nlet renderCanvas = null;\r\n// Get or create a shared canvas for rendering pages in\r\nfunction getRenderCanvas() {\r\n    if (!renderCanvas) {\r\n        renderCanvas = document.createElement(\'canvas\');\r\n    }\r\n    return renderCanvas;\r\n}\r\nlet flushTimestamp = new Date().getTime();\r\nlet nextCanvasUse = Promise.resolve();\r\n// Use the shared canvas to render a page, using promises to create a queue\r\nfunction useRenderCanvas(callback) {\r\n    return PageRenderContext_awaiter(this, void 0, void 0, function* () {\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        let resolve = (_value) => { };\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        let reject = (_reason) => { };\r\n        const prom = new Promise((_resolve, _reject) => {\r\n            resolve = _resolve;\r\n            reject = _reject;\r\n        });\r\n        nextCanvasUse = nextCanvasUse.then(() => callback(getRenderCanvas()).then(resolve, reject));\r\n        const result = yield prom;\r\n        yield new Promise(res => setTimeout(res, 16)); // Give some time between renders\r\n        return result;\r\n    });\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/PageWrapper.tsx\nvar PageWrapper_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst PageWrapper = (_a) => {\r\n    var { children, error, loading, loadingContentForBuildingImage, noData, pageIndex, renderType } = _a, extraProps = PageWrapper_rest(_a, ["children", "error", "loading", "loadingContentForBuildingImage", "noData", "pageIndex", "renderType"]);\r\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\r\n    const { pageDimensions, getOutlineTargets, setNumPagesLoaded } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\r\n    const { getObjectURLForPage, isBuildingObjectURLForPage } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(PageRenderContext);\r\n    const { isLoading } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(UiContext);\r\n    const objectURLForPage = getObjectURLForPage({ pageIndex });\r\n    const isBuildingPageImage = isBuildingObjectURLForPage({ pageIndex });\r\n    // Don\'t display until we have page size data\r\n    // TODO: Handle this nicer so we display either the loading or error treatment\r\n    if (!pageDimensions) {\r\n        return null;\r\n    }\r\n    const getPageStyle = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\r\n        const styles = computePageStyle(pageDimensions, rotation, scale);\r\n        if (objectURLForPage) {\r\n            styles.backgroundImage = `url(${objectURLForPage})`;\r\n        }\r\n        return styles;\r\n    }, [pageDimensions, rotation, scale, objectURLForPage]);\r\n    const getWidth = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\r\n        return getPageWidth(pageDimensions, rotation);\r\n    }, [pageDimensions, rotation]);\r\n    const outlineTargets = getOutlineTargets({\r\n        pageIndex,\r\n        scale,\r\n        rotation,\r\n        pageDimensions,\r\n    });\r\n    const markPageAsLoaded = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\r\n        setNumPagesLoaded(prevNumPagesLoaded => prevNumPagesLoaded + 1);\r\n    }, []);\r\n    // Width needs to be set to prevent the outermost Page div from extending to fit the parent,\r\n    // and mis-aligning the text layer.\r\n    // TODO: Can we CSS this to auto-shrink?\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ id: generatePageIdFromIndex(pageIndex), className: classnames_default()(\'pdf-reader__page\', { \'pdf-reader__page--has-page-image\': objectURLForPage }, { \'pdf-reader__page--no-page-image\': !objectURLForPage }, `pdf-reader__page--render-type-${getClassNameSuffixFromRenderType(renderType)}`, { \'pdf-reader__is-building-page-image\': isBuildingPageImage }), "data-page-number": pageIndex + 1, style: getPageStyle() }, extraProps),\r\n        children,\r\n        isBuildingPageImage && !isLoading && (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: classnames_default()(\'pdf-reader__page\', {\r\n                \'pdf-reader__page--is-loading-image\': isBuildingPageImage,\r\n            }) }, loadingContentForBuildingImage)),\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(external_react_pdf_.Page, { width: getWidth(), error: error, loading: loading, noData: noData, pageIndex: pageIndex, scale: scale, rotate: rotation, renderAnnotationLayer: true, onGetTextSuccess: markPageAsLoaded }),\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__page__outline-targets" }, outlineTargets.map(({ dest, leftPx, topPx }) => (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("span", { key: dest, className: "pdf-reader__page__outline-target", "data-outline-target-dest": dest, "data-test-id": "pdf-reader__page__outline-target", style: { left: leftPx + \'px\', top: topPx + \'px\' } }))))));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/PrintButton.tsx\nvar PrintButton_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n/**\r\n * HTML anchor tag allows you to download a file from the same origin.\r\n * This is a workaround to download a file served from a different origin\r\n */\r\nconst PrintButton = (_a) => {\r\n    var { children, className } = _a, extraProps = PrintButton_rest(_a, ["children", "className"]);\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("button", Object.assign({ onClick: () => onClickPrint(), "aria-label": "Print PDF", className: `pdf-reader__print-btn ${className}` }, extraProps), children ? children : \'Print\'));\r\n};\r\nfunction onClickPrint() {\r\n    window.print();\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/util.ts\n// This function returns min or max if value exceeds the range, otherwise\r\n// the original value is returned\r\nconst bandPassFilter = (value, min, max) => {\r\n    return Math.min(Math.max(value, min), max);\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/SidePanel.tsx\nvar SidePanel_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\nconst DEFAULT_MIN_WIDTH_PX = 300;\r\nconst DEFAULT_MAX_WIDTH_PX = 700;\r\nconst SidePanel = (_a) => {\r\n    var { minWidthPx = DEFAULT_MIN_WIDTH_PX, maxWidthPx = DEFAULT_MAX_WIDTH_PX, className, children, header, content, footer, dragHandlePosition, closeButton, isVisible = true, onClose } = _a, extraProps = SidePanel_rest(_a, ["minWidthPx", "maxWidthPx", "className", "children", "header", "content", "footer", "dragHandlePosition", "closeButton", "isVisible", "onClose"]);\r\n    // The overlay is used to catch mouse up events over iframe contents\r\n    // so the mouseup events will not be missed if the click is released over\r\n    // the iframe and the event listeners will fail to be removed\r\n    const [isOverlayVisible, setIsOverlayVisible] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\r\n    const [panelWidth, setPanelWidth] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(minWidthPx);\r\n    const sidePanelRef = external_commonjs_react_commonjs2_react_amd_react_root_React_.useRef(null);\r\n    const dragHandleRef = external_commonjs_react_commonjs2_react_amd_react_root_React_.useRef(null);\r\n    const renderCloseButton = () => {\r\n        if (typeof closeButton === \'boolean\') {\r\n            return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("button", { className: "pdf-reader__side-panel-close-button", onClick: onClose }, "x"));\r\n        }\r\n        return closeButton;\r\n    };\r\n    const renderDragHandle = () => {\r\n        const isDragHandleOnLeft = dragHandlePosition === \'left\';\r\n        const isDragHandleOnRight = dragHandlePosition === \'right\';\r\n        if (!isDragHandleOnLeft && !isDragHandleOnRight) {\r\n            return null;\r\n        }\r\n        const onMouseMove = (mouseMoveEvent) => {\r\n            if (!sidePanelRef || !sidePanelRef.current) {\r\n                return;\r\n            }\r\n            const newWidth = dragHandlePosition === \'left\'\r\n                ? sidePanelRef.current.getBoundingClientRect().right - mouseMoveEvent.pageX\r\n                : mouseMoveEvent.pageX - sidePanelRef.current.getBoundingClientRect().left;\r\n            setPanelWidth(bandPassFilter(newWidth, minWidthPx, maxWidthPx));\r\n        };\r\n        const onMouseUp = () => {\r\n            // drop opacity styling on drag handle\r\n            if (dragHandleRef && dragHandleRef.current) {\r\n                dragHandleRef.current.removeAttribute(\'style\');\r\n            }\r\n            setIsOverlayVisible(false);\r\n            document.body.removeEventListener(\'mousemove\', onMouseMove);\r\n        };\r\n        const onDraggingHandle = () => {\r\n            // prevent flashing when the mouse hovers outside the resize zone\r\n            if (dragHandleRef && dragHandleRef.current) {\r\n                dragHandleRef.current.style.opacity = \'1\';\r\n            }\r\n            setIsOverlayVisible(true);\r\n            document.body.addEventListener(\'mousemove\', onMouseMove);\r\n            document.body.addEventListener(\'mouseup\', onMouseUp, { once: true });\r\n        };\r\n        const onChangePanelWidth = (event) => {\r\n            const newWidth = parseInt(event.currentTarget.value);\r\n            setPanelWidth(bandPassFilter(newWidth, minWidthPx, maxWidthPx));\r\n        };\r\n        return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: classnames_default()(\'pdf-reader__resize-zone\', {\r\n                \'pdf-reader__resize-zone--left\': isDragHandleOnLeft,\r\n                \'pdf-reader__resize-zone--right\': isDragHandleOnRight,\r\n            }) },\r\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("input", { className: "pdf-reader__drag-handle__assistive-input", type: "range", min: minWidthPx, max: maxWidthPx, step: "5", value: panelWidth, onChange: onChangePanelWidth }),\r\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { ref: dragHandleRef, role: "slider", "aria-valuenow": panelWidth, tabIndex: -1, onMouseDown: onDraggingHandle, className: "pdf-reader__drag-handle" },\r\n                external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__drag-handle__inner" }))));\r\n    };\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ ref: sidePanelRef, style: { width: panelWidth }, className: classnames_default()(\'pdf-reader__side-panel\', { \'pdf-reader__side-panel--hidden\': !isVisible }, className) }, extraProps),\r\n        renderDragHandle(),\r\n        closeButton && renderCloseButton(),\r\n        header && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("h2", { className: "pdf-reader__side-panel-title" }, header),\r\n        content && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__side-panel-content" }, content),\r\n        footer && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__side-panel-footer" }, footer),\r\n        children,\r\n        isOverlayVisible && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__side-panel-overlay" })));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/thumbnails/Thumbnail.tsx\n\r\n\r\n\r\n\r\n\r\nconst Thumbnail = ({ pageNumber }) => {\r\n    const { getObjectURLForPage } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(PageRenderContext);\r\n    const { isPageVisible, scrollToPage, visiblePageRatios } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(ScrollContext);\r\n    const [maxVisiblePageNumber, setMaxVisiblePageNumber] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\r\n    const objectURL = getObjectURLForPage({ pageNumber });\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        if (visiblePageRatios.size !== 0) {\r\n            const max = getMaxVisibleElement(visiblePageRatios);\r\n            if (max) {\r\n                setMaxVisiblePageNumber(max.toString());\r\n            }\r\n        }\r\n    }, [visiblePageRatios]);\r\n    const isThumbnailVisible = maxVisiblePageNumber &&\r\n        parseInt(maxVisiblePageNumber) === pageNumber &&\r\n        isPageVisible({ pageNumber });\r\n    const onClick = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(event => {\r\n        event.preventDefault();\r\n        scrollToPage({ pageNumber });\r\n    }, [pageNumber, scrollToPage]);\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("a", { "aria-label": `scroll to page ${pageNumber}`, href: `#${pageNumber}`, onClick: onClick, className: classnames_default()(\'pdf-reader__thumbnail\', { \'pdf-reader__thumbnail--no-image\': !objectURL }, { \'pdf-reader__thumbnail--is-visible\': isThumbnailVisible }), "data-page-number": pageNumber, "data-test-id": "thumbnail-link" }, !!objectURL && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("img", { className: "pdf-reader__thumbnail-image", src: objectURL })));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/thumbnails/ThumbnailList.tsx\n\r\n\r\n\r\nconst ThumbnailList = () => {\r\n    const { numPages } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__thumbnail-list-wrapper" },\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("ul", { className: "pdf-reader__thumbnail-list" }, Array.from({ length: numPages }).map((_, pageIndex) => (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("li", { key: pageIndex + 1, className: "pdf-reader__thumbnail-list__item" },\r\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(Thumbnail, { pageNumber: pageIndex + 1 })))))));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/utils/format.ts\nconst PercentFormatter = new Intl.NumberFormat(\'en-US\', {\r\n    style: \'percent\',\r\n    maximumSignificantDigits: 3,\r\n});\r\n\n;// CONCATENATED MODULE: ./src/components/ZoomInButton.tsx\nvar ZoomInButton_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\nconst MAX_ZOOM_IN_SCALE = 500;\r\nconst ZoomInButton = (_a) => {\r\n    var { className, children, onZoom } = _a, extraProps = ZoomInButton_rest(_a, ["className", "children", "onZoom"]);\r\n    const { scale, setScale, zoomIncrementValue } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\r\n    const handleZoomIn = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const newScaleValue = scale + zoomIncrementValue;\r\n        const zoomScale = Number(PercentFormatter.format(newScaleValue).replace(\'%\', \'\'));\r\n        if (zoomScale <= MAX_ZOOM_IN_SCALE) {\r\n            if (onZoom) {\r\n                onZoom(newScaleValue);\r\n            }\r\n            setScale(newScaleValue);\r\n        }\r\n    }, [scale]);\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("button", Object.assign({ className: `reader__zoom-btn zoom-in ${className}`, onClick: handleZoomIn }, extraProps), children ? children : \'+\'));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/ZoomOutButton.tsx\nvar ZoomOutButton_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\nconst MIN_ZOOM_OUT_SCALE = 20;\r\nconst ZoomOutButton = (_a) => {\r\n    var { className, children, onZoom } = _a, extraProps = ZoomOutButton_rest(_a, ["className", "children", "onZoom"]);\r\n    const { scale, setScale, zoomIncrementValue } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\r\n    const handleZoomOut = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const newScaleValue = scale - zoomIncrementValue;\r\n        const zoomScale = Number(PercentFormatter.format(newScaleValue).replace(\'%\', \'\'));\r\n        if (zoomScale >= MIN_ZOOM_OUT_SCALE) {\r\n            if (onZoom) {\r\n                onZoom(newScaleValue);\r\n            }\r\n            setScale(newScaleValue);\r\n        }\r\n    }, [scale]);\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("button", Object.assign({ className: `reader__zoom-btn zoom-out ${className}`, onClick: handleZoomOut }, extraProps), children ? children : \'-\'));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/context/ContextProvider.tsx\n\r\n\r\n\r\n\r\n\r\n\r\nconst ContextProvider = ({ children }) => {\r\n    const documentProps = useDocumentContextProps();\r\n    const transformProps = useTransformContextProps();\r\n    const uiProps = useUiContextProps();\r\n    const scrollProps = useScrollContextProps();\r\n    const pageRenderProps = usePageRenderContextProps({\r\n        pdfDocProxy: documentProps.pdfDocProxy,\r\n        pixelRatio: transformProps.pixelRatio,\r\n        scale: transformProps.scale,\r\n        visiblePageRatios: scrollProps.visiblePageRatios,\r\n    });\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(DocumentContext.Provider, { value: documentProps },\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(TransformContext.Provider, { value: transformProps },\r\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(UiContext.Provider, { value: uiProps },\r\n                external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(ScrollContext.Provider, { value: scrollProps },\r\n                    external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(PageRenderContext.Provider, { value: pageRenderProps }, children))))));\r\n};\r\n\n;// CONCATENATED MODULE: ./index.ts\n/*\r\n * PDF Component Library exports\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* harmony default export */ const index = ({\r\n    BoundingBox: BoundingBox,\r\n    computeBoundingBoxStyle: computeBoundingBoxStyle,\r\n    computePageStyle: computePageStyle,\r\n    ContextProvider: ContextProvider,\r\n    DEFAULT_ZOOM_SCALE: DEFAULT_ZOOM_SCALE,\r\n    DocumentContext: DocumentContext,\r\n    DocumentWrapper: DocumentWrapper,\r\n    DownloadButton: DownloadButton,\r\n    ArrowFlag: ArrowFlag,\r\n    ArrowFlagBase: ArrowFlagBase,\r\n    PrintButton: PrintButton,\r\n    generatePageIdFromIndex: generatePageIdFromIndex,\r\n    getPageHeight: getPageHeight,\r\n    getPageWidth: getPageWidth,\r\n    HighlightOverlay: HighlightOverlay,\r\n    IconFlag: IconFlag,\r\n    isSideways: isSideways,\r\n    Outline: Outline,\r\n    OutlineItem: OutlineItem,\r\n    Overlay: Overlay,\r\n    PageNumberControl: PageNumberControl,\r\n    PageRenderContext: PageRenderContext,\r\n    PageRotation: PageRotation,\r\n    PageWrapper: PageWrapper,\r\n    POSITION: POSITION,\r\n    SidePanel: SidePanel,\r\n    PercentFormatter: PercentFormatter,\r\n    RENDER_TYPE: RENDER_TYPE,\r\n    rotateClockwise: rotateClockwise,\r\n    rotateCounterClockwise: rotateCounterClockwise,\r\n    scaleRawBoundingBox: scaleRawBoundingBox,\r\n    scrollToId: scrollToId,\r\n    scrollToPdfPageIndex: scrollToPdfPageIndex,\r\n    Thumbnail: Thumbnail,\r\n    ThumbnailList: ThumbnailList,\r\n    ScrollContext: ScrollContext,\r\n    TransformContext: TransformContext,\r\n    UiContext: UiContext,\r\n    ZoomInButton: ZoomInButton,\r\n    ZoomOutButton: ZoomOutButton,\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy91dGlscy9wcm92aWRlci50cz84NWFhIiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL3V0aWxzL3JvdGF0ZS50cz9jZGJiIiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL3V0aWxzL3Njcm9sbC50cz83YjA1Iiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL2NvbnRleHQvRG9jdW1lbnRDb250ZXh0LnRzPzJmMDMiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvY29udGV4dC9UcmFuc2Zvcm1Db250ZXh0LnRzP2JlNjQiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvdXRpbHMvc3R5bGUudHM/ZTMxYiIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL0JvdW5kaW5nQm94LnRzeD81NmNmIiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL3V0aWxzL1Njcm9sbERpcmVjdGlvbkRldGVjdG9yLnRzP2FjZTYiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvdXRpbHMvVmlzaWJsZUVudHJpZXNEZXRlY3Rvci50cz9mZjZiIiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL2NvbnRleHQvU2Nyb2xsQ29udGV4dC50cz9jZjkxIiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL2NvbnRleHQvVWlDb250ZXh0LnRzPzZiYjMiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvdXRpbHMvZXJyb3JNZXNzYWdlLnRzPzMwYTUiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvdXRpbHMvcGRmV29ya2VyLnRzP2E1ZGUiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvdXRpbHMvcmVhZGVyLXV0aWxzLnRzPzBlNDkiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvdXRpbHMvc2NhbGUudHM/YTAwNSIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL3R5cGVzL2Rlc3RpbmF0aW9uLnRzP2IxYTMiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9Eb2N1bWVudFdyYXBwZXIudHN4PzUyMDQiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9Eb3dubG9hZEJ1dHRvbi50c3g/ZTIzNSIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL0hpZ2hsaWdodE92ZXJsYXkudHN4PzIyMWEiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9tYXJrZXIvQXJyb3dGbGFnQmFzZS50c3g/NTlhYyIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL2ljb24vSWNvbkZsYWcudHN4P2RiZGQiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy90eXBlcy9ib3VuZGluZ0JveC50cz84NjEwIiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL2NvbXBvbmVudHMvbWFya2VyL0Fycm93RmxhZy50c3g/YjZlYSIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL291dGxpbmUvT3V0bGluZUl0ZW0udHN4PzZhNzMiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9vdXRsaW5lL091dGxpbmUudHN4PzMzY2EiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9PdmVybGF5LnRzeD9lOWYzIiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL3V0aWxzL01heFZpc2libGVFbGVtZW50LnRzPzM5YzkiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9QYWdlTnVtYmVyQ29udHJvbC50c3g/NzkwYyIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy9jb250ZXh0L1BhZ2VSZW5kZXJDb250ZXh0LnRzP2YwN2MiLCJ3ZWJwYWNrOi8vQGFsbGVuYWkvcGRmLWNvbXBvbmVudHMvLi9zcmMvY29tcG9uZW50cy9QYWdlV3JhcHBlci50c3g/YzljNSIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL1ByaW50QnV0dG9uLnRzeD8xNzM5Iiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL3V0aWxzL3V0aWwudHM/NmRkYiIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL1NpZGVQYW5lbC50c3g/YmU2OCIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy9jb21wb25lbnRzL3RodW1ibmFpbHMvVGh1bWJuYWlsLnRzeD85MjA3Iiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL2NvbXBvbmVudHMvdGh1bWJuYWlscy9UaHVtYm5haWxMaXN0LnRzeD81Y2YwIiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL3V0aWxzL2Zvcm1hdC50cz8yZDhjIiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL2NvbXBvbmVudHMvWm9vbUluQnV0dG9uLnRzeD84NmI5Iiwid2VicGFjazovL0BhbGxlbmFpL3BkZi1jb21wb25lbnRzLy4vc3JjL2NvbXBvbmVudHMvWm9vbU91dEJ1dHRvbi50c3g/NmJmMyIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL3NyYy9jb250ZXh0L0NvbnRleHRQcm92aWRlci50c3g/YmM4YiIsIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL2luZGV4LnRzP2E5NTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBTyxTQUFTLGtCQUFrQixDQUFDLFlBQW9CLEVBQUUsWUFBb0I7SUFDM0UsT0FBTyxDQUFDLElBQUksQ0FDVixrQkFBa0IsWUFBWSxTQUFTLFlBQVksd0NBQXdDLENBQzVGLENBQUM7QUFDSixDQUFDOzs7QUNKRCxJQUFZLFlBS1g7QUFMRCxXQUFZLFlBQVk7SUFDdEIscURBQVc7SUFDWCx3REFBYTtJQUNiLDJEQUFlO0lBQ2YsMkRBQWU7QUFDakIsQ0FBQyxFQUxXLFlBQVksS0FBWixZQUFZLFFBS3ZCO0FBRU0sU0FBUyxlQUFlLENBQUMsUUFBc0I7SUFDcEQsUUFBUSxRQUFRLEVBQUU7UUFDaEIsS0FBSyxZQUFZLENBQUMsT0FBTztZQUN2QixPQUFPLFlBQVksQ0FBQyxRQUFRLENBQUM7UUFDL0IsS0FBSyxZQUFZLENBQUMsUUFBUTtZQUN4QixPQUFPLFlBQVksQ0FBQyxTQUFTLENBQUM7UUFDaEMsS0FBSyxZQUFZLENBQUMsU0FBUztZQUN6QixPQUFPLFlBQVksQ0FBQyxTQUFTLENBQUM7UUFDaEM7WUFDRSxPQUFPLFlBQVksQ0FBQyxPQUFPLENBQUM7S0FDL0I7QUFDSCxDQUFDO0FBRU0sU0FBUyxzQkFBc0IsQ0FBQyxRQUFzQjtJQUMzRCxRQUFRLFFBQVEsRUFBRTtRQUNoQixLQUFLLFlBQVksQ0FBQyxPQUFPO1lBQ3ZCLE9BQU8sWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUNoQyxLQUFL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QU87SUFDUCxpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLFlBQVk7SUFDWixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxnQkFBZ0I7SUFDaEIsV0FBVztJQUNYLGVBQWU7SUFDZixzQkFBc0I7SUFDdEIsbUJBQW1CO0lBQ25CLFVBQVU7SUFDVixvQkFBb0I7SUFDcEIsU0FBUztJQUNULGFBQWE7SUFDYixhQUFhO0lBQ2IsZ0JBQWdCO0lBQ2hCLFNBQVM7SUFDVCxZQUFZO0lBQ1osYUFBYTtDQUNkLEVBQUMiLCJmaWxlIjoiMjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGxvZ1Byb3ZpZGVyV2FybmluZyhmdW5jdGlvbk5hbWU6IHN0cmluZywgcHJvdmlkZXJOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgY29uc29sZS53YXJuKFxuICAgIGBVbmFibGUgdG8gY2FsbCAke2Z1bmN0aW9uTmFtZX0uIFRoZSAke3Byb3ZpZGVyTmFtZX0gUHJvdmlkZXIgbWF5IG5vdCBiZSBzZXQgdXAgY29ycmVjdGx5LmBcbiAgKTtcbn1cbiIsImV4cG9ydCBlbnVtIFBhZ2VSb3RhdGlvbiB7XG4gIFJvdGF0ZTAgPSAwLFxuICBSb3RhdGU5MCA9IDkwLFxuICBSb3RhdGUxODAgPSAxODAsXG4gIFJvdGF0ZTI3MCA9IDI3MCxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZUNsb2Nrd2lzZShyb3RhdGlvbjogUGFnZVJvdGF0aW9uKTogUGFnZVJvdGF0aW9uIHtcbiAgc3dpdGNoIChyb3RhdGlvbikge1xuICAgIGNhc2UgUGFnZVJvdGF0aW9uLlJvdGF0ZTA6XG4gICAgICByZXR1cm4gUGFnZVJvdGF0aW9uLlJvdGF0ZTkwO1xuICAgIGNhc2UgUGFnZVJvdGF0aW9uLlJvdGF0ZTkwOlxuICAgICAgcmV0dXJuIFBhZ2VSb3RhdGlvbi5Sb3RhdGUxODA7XG4gICAgY2FzZSBQYWdlUm90YXRpb24uUm90YXRlMTgwOlxuICAgICAgcmV0dXJuIFBhZ2VSb3RhdGlvbi5Sb3RhdGUyNzA7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBQYWdlUm90YXRpb24uUm90YXRlMDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlQ291bnRlckNsb2Nrd2lzZShyb3RhdGlvbjogUGFnZVJvdGF0aW9uKTogUGFnZVJvdGF0aW9uIHtcbiAgc3dpdGNoIChyb3RhdGlvbikge1xuICAgIGNhc2UgUGFnZVJvdGF0aW9uLlJvdGF0ZTA6XG4gICAgICByZXR1cm4gUGFnZVJvdGF0aW9uLlJvdGF0ZTI3MDtcbiAgICBjYXNlIFBhZ2VSb3RhdGlvbi5Sb3RhdGU5MDpcbiAgICAgIHJldHVybiBQYWdlUm90YXRpb24uUm90YXRlMDtcbiAgICBjYXNlIFBhZ2VSb3RhdGlvbi5Sb3RhdGUxODA6XG4gICAgICByZXR1cm4gUGFnZVJvdGF0aW9uLlJvdGF0ZTkwO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gUGFnZVJvdGF0aW9uLlJvdGF0ZTE4MDtcbiAgfVxufVxuXG4vKipcbiAqIFRlc3RzIHdoZXRoZXIgdGhlIHBhZ2UgaXMgcm90YXRlZCA5MCBkZWdyZWVzIGNsb2Nrd2lzZSBvciBjb3VudGVyY2xvY2t3aXNlIGZyb20gemVybyxcbiAqIGUuZy4gd2hldGhlciB0aGUgcGFnZSBcImlzIHJvdGF0ZWQgc2lkZXdheXMuXCJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2lkZXdheXMocm90YXRpb246IFBhZ2VSb3RhdGlvbik6IGJvb2xlYW4ge1xuICByZXR1cm4gcm90YXRpb24gPT09IFBhZ2VSb3RhdGlvbi5Sb3RhdGU5MCB8fCByb3RhdGlvbiA9PT0gUGFnZVJvdGF0aW9uLlJvdGF0ZTI3MDtcbn1cbiIsImltcG9ydCB7IERpbWVuc2lvbnMgfSBmcm9tICcuLi9jb21wb25lbnRzL3R5cGVzL2JvdW5kaW5nQm94JztcbmltcG9ydCB7IFBhZ2VQcm9wZXJ0aWVzIH0gZnJvbSAnLi4vY29tcG9uZW50cy90eXBlcy9wYWdlJztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAnLi4vY29tcG9uZW50cy90eXBlcy91dGlscyc7XG5pbXBvcnQgeyBQYWdlUm90YXRpb24gfSBmcm9tICcuLi91dGlscy9yb3RhdGUnO1xuXG4vLyBFYWNoIHBhZ2UgZGl2IGlzIElEJ2QgYWNjb3JkaW5nIHRvIHBhZ2UgaW5kZXhcbi8vIGUuZy4gcmVhZGVyX3BnXzAsIHJlYWRlcl9wZ18xLCBldGMuXG5leHBvcnQgY29uc3QgUEFHRV9OQVZfVEFSR0VUX0lEX1JPT1QgPSAncmVhZGVyX3BnXyc7XG5cbmNvbnN0IFBERl9IRUlHSFRfUE9JTlRTID0gNzkyO1xuY29uc3QgUERGX1dJRFRIX1BPSU5UUyA9IDYxMjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUGFnZUlkRnJvbUluZGV4KHBhZ2VJbmRleDogbnVtYmVyIHwgc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGAke1BBR0VfTkFWX1RBUkdFVF9JRF9ST09UfSR7cGFnZUluZGV4fWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY3JvbGxUb0lkKGlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcbiAgaWYgKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnLCBibG9jazogJ3N0YXJ0JywgaW5saW5lOiAnY2VudGVyJyB9KTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmVycm9yKGBDb3VsZCBub3QgZmluZCBzY3JvbGwgdGFyZ2V0IHdpdGggSUQgIyR7aWR9YCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNjcm9sbFRvUGRmUGFnZUluZGV4KHBhZ2VJbmRleDogbnVtYmVyIHwgc3RyaW5nKTogdm9pZCB7XG4gIHNjcm9sbFRvSWQoZ2VuZXJhdGVQYWdlSWRGcm9tSW5kZXgocGFnZUluZGV4KSk7XG59XG5cbi8qKlxuICogU2Nyb2xsIFBERiBkb2N1bWVudCB0byBhIHNwZWNpZmljIHBvc2l0aW9uLlxuICogQHBhcmFtIHBhZ2VJbmRleCBUaGUgaW5kZXggb2YgdGhlIHBhZ2Ugd2hlcmUgdGhlIHBvc2l0aW9uIGxvY2F0ZXMgYXRcbiAqIEBwYXJhbSBsZWZ0UG9pbnRzIFRoZSBob3Jpem9udGFsIGRpc3RhbmNlIGJldHdlZW4gdGhlIG9yaWdpbiBhbmQgdGhlIHBvc2l0aW9uIChpbiBQREYgY29vcmRpbmF0ZXMpXG4gKiBAcGFyYW0gYm90dG9tUG9pbnRzIFRoZSB2ZXJ0aWNhbCBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBvcmlnaW4gYW5kIHRoZSBwb3NpdGlvbiAoaW4gUERGIGNvb3JkaW5hdGVzKVxuICogQHBhcmFtIHJvdGF0aW9uIFRoZSByb3RhdGlvbiBkZWdyZWUgb2YgdGhlIGRvY3VtZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY3JvbGxUb1Bvc2l0aW9uKFxuICBwYWdlSW5kZXg6IG51bWJlcixcbiAgbGVmdFBvaW50czogbnVtYmVyLFxuICBib3R0b21Qb2ludHM6IG51bWJlcixcbiAgcm90YXRpb246IFBhZ2VSb3RhdGlvbiA9IFBhZ2VSb3RhdGlvbi5Sb3RhdGUwXG4pOiB2b2lkIHtcbiAgLypcbiAgICBWZXJ0aWNhbCBzY3JvbGwgZGlzdGFuY2UgaXMgY2FsY3VsYXRlZCBhc1xuICAgID0gdG90YWwgbnVtYmVyIG9mIHByZXZpb3VzIHBhZ2VzICogcGFnZSBoZWlnaHQgaW5jbHVkaW5nIHRvcC9kb3duIG1hcmdpbnNcbiAgICArIHRoZSBtYXJnaW4gdG9wIG9mIGN1cnJlbnQgcGFnZVxuICAgICsgdGhlIGRpc3RhbmNlIGZyb20gdGhlIHBhZ2UgdG9wIHRvIHRoZSBzcGVjaWZpZWQgcG9zaXRpb25cblxuICAgIE5vdGljZSB0aGF0IHRoZSBzY3JvbGwgZGlzdGFuY2UgaXMgbWVhc3VyZWQgaW4gcGl4ZWxzLFxuICAgIHNvIGxlZnRQb2ludHMvYm90dG9tUG9pbnRzIGhhcyB0byBiZSB0cmFuc2Zvcm1lZCBmcm9tIHBvaW50cyB0byBwaXhlbHMgZmlyc3QuXG4gICovXG5cbiAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0LCBtYXJnaW5Ub3AsIG1hcmdpbkJvdHRvbSwgbWFyZ2luTGVmdCwgbWFyZ2luUmlnaHQgfSA9XG4gICAgZ2V0UGFnZVByb3BlcnRpZXNJblBpeGVscygpO1xuICBjb25zdCBoZWlnaHRXaXRoTWFyZ2lucyA9IGhlaWdodCArIG1hcmdpblRvcCArIG1hcmdpbkJvdHRvbTtcblxuICAvLyBXaGVuIGEgcGFwZXIgaXMgcm90YXRlZCwgaXRzIGhlaWdodCBhbmQgd2lkdGggd291bGQgYmUgc3dpdGNoZWQgYXV0b21hdGljYWxseS4gSG93ZXZlciwgbGVmdFBvaW50cyBhbmQgYm90dG9tUG9pbnRzIHJlbWFpbiB0aGUgc2FtZS5cbiAgbGV0IG1hcmdpblRvcFBpeGVscyA9IG1hcmdpblRvcDtcbiAgbGV0IGJvdHRvbVBpeGVscyA9IChoZWlnaHQgKiBib3R0b21Qb2ludHMpIC8gUERGX0hFSUdIVF9QT0lOVFM7XG4gIGxldCBsZWZ0UGl4ZWxzID0gKHdpZHRoICogbGVmdFBvaW50cykgLyBQREZfV0lEVEhfUE9JTlRTO1xuXG4gIGlmIChyb3RhdGlvbiA9PSBQYWdlUm90YXRpb24uUm90YXRlOTApIHtcbiAgICBtYXJnaW5Ub3BQaXhlbHMgPSBtYXJnaW5MZWZ0O1xuICAgIGJvdHRvbVBpeGVscyA9IChoZWlnaHQgKiAoUERGX1dJRFRIX1BPSU5UUyAtIGxlZnRQb2ludHMpKSAvIFBERl9XSURUSF9QT0lOVFM7XG4gICAgbGVmdFBpeGVscyA9ICh3aWR0aCAqIGJvdHRvbVBvaW50cykgLyBQREZfSEVJR0hUX1BPSU5UUztcbiAgfSBlbHNlIGlmIChyb3RhdGlvbiA9PSBQYWdlUm90YXRpb24uUm90YXRlMTgwKSB7XG4gICAgbWFyZ2luVG9wUGl4ZWxzID0gbWFyZ2luQm90dG9tO1xuICAgIGJvdHRvbVBpeGVscyA9IChoZWlnaHQgKiAoUERGX0hFSUdIVF9QT0lOVFMgLSBib3R0b21Qb2ludHMpKSAvIFBERl9IRUlHSFRfUE9JTlRTO1xuICAgIGxlZnRQaXhlbHMgPSAod2lkdGggKiAoUERGX1dJRFRIX1BPSU5UUyAtIGxlZnRQb2ludHMpKSAvIFBERl9XSURUSF9QT0lOVFM7XG4gIH0gZWxzZSBpZiAocm90YXRpb24gPT0gUGFnZVJvdGF0aW9uLlJvdGF0ZTI3MCkge1xuICAgIG1hcmdpblRvcFBpeGVscyA9IG1hcmdpblJpZ2h0O1xuICAgIGJvdHRvbVBpeGVscyA9IChoZWlnaHQgKiBsZWZ0UG9pbnRzKSAvIFBERl9XSURUSF9QT0lOVFM7XG4gICAgbGVmdFBpeGVscyA9ICh3aWR0aCAqIChQREZfSEVJR0hUX1BPSU5UUyAtIGJvdHRvbVBvaW50cykpIC8gUERGX0hFSUdIVF9QT0lOVFM7XG4gIH1cblxuICAvLyBGaW5kIHBhZ2UgZWxlbWVudFxuICBjb25zdCBwYWdlSWQgPSBnZW5lcmF0ZVBhZ2VJZEZyb21JbmRleChwYWdlSW5kZXgpO1xuICBjb25zdCBwYWdlSWRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocGFnZUlkKTtcbiAgaWYgKCFwYWdlSWRFbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRmluZCBmaXJzdCBzY3JvbGxhYmxlIHBhcmVudFxuICBjb25zdCBwYXJlbnRFbGVtZW50ID0gZ2V0U2Nyb2xsUGFyZW50KHBhZ2VJZEVsZW1lbnQpO1xuICBpZiAoIXBhcmVudEVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBBcHBseSBzY3JvbGxcbiAgcGFyZW50RWxlbWVudC5zY3JvbGxUbyh7XG4gICAgdG9wOiBjYWxjdWxhdGVUb3BQeCh7XG4gICAgICBoZWlnaHRXaXRoTWFyZ2luc0luUHg6IGhlaWdodFdpdGhNYXJnaW5zLFxuICAgICAgcGFnZUluZGV4OiBwYWdlSW5kZXgsXG4gICAgICBtYXJnaW5Ub3BQeDogbWFyZ2luVG9wUGl4ZWxzLFxuICAgICAgaGVpZ2h0UHg6IGhlaWdodCxcbiAgICAgIGJvdHRvbVB4OiBib3R0b21QaXhlbHMsXG4gICAgfSksXG4gICAgbGVmdDogTWF0aC5mbG9vcihsZWZ0UGl4ZWxzKSxcbiAgICBiZWhhdmlvcjogJ3Ntb290aCcsXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KG5vZGU6IEhUTUxFbGVtZW50KTogTnVsbGFibGU8SFRNTEVsZW1lbnQ+IHtcbiAgY29uc3QgbWluU2Nyb2xsYWJsZUhlaWdodCA9IDUwOyAvLyB1c2VkIHRvIGNoZWNrIGZvciBhIGJ1ZyB3aGVyZSBGaXJlZm94IGdpdmVzIGlubGluZSBjb250YWluZXJzIGEgc21hbGwgc2Nyb2xsSGVpZ2h0IHdoZW4gaXQgc2hvdWxkbnRcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAoIW5vZGUgfHwgbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnYm9keScpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG4gIGlmIChub2RlLnNjcm9sbEhlaWdodCAtIG5vZGUuY2xpZW50SGVpZ2h0ID4gbWluU2Nyb2xsYWJsZUhlaWdodCAmJiAhaXNPdmVyZmxvd0lzSGlkZGVuKG5vZGUpKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChub2RlLnBhcmVudEVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBpc092ZXJmbG93SXNIaWRkZW4obm9kZTogSFRNTEVsZW1lbnQpOiBib29sZWFuIHtcbiAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICByZXR1cm4gKFxuICAgIHN0eWxlLm92ZXJmbG93LmluY2x1ZGVzKCdoaWRkZW4nKSB8fFxuICAgIHN0eWxlLm92ZXJmbG93WC5pbmNsdWRlcygnaGlkZGVuJykgfHxcbiAgICBzdHlsZS5vdmVyZmxvd1kuaW5jbHVkZXMoJ2hpZGRlbicpXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVUb3BQeCh7XG4gIGhlaWdodFdpdGhNYXJnaW5zSW5QeCxcbiAgcGFnZUluZGV4LFxuICBtYXJnaW5Ub3BQeCxcbiAgaGVpZ2h0UHgsXG4gIGJvdHRvbVB4LFxufToge1xuICBoZWlnaHRXaXRoTWFyZ2luc0luUHg6IG51bWJlcjtcbiAgcGFnZUluZGV4OiBudW1iZXI7XG4gIG1hcmdpblRvcFB4OiBudW1iZXI7XG4gIGhlaWdodFB4OiBudW1iZXI7XG4gIGJvdHRvbVB4OiBudW1iZXI7XG59KTogbnVtYmVyIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoaGVpZ2h0V2l0aE1hcmdpbnNJblB4ICogcGFnZUluZGV4ICsgbWFyZ2luVG9wUHggKyAoaGVpZ2h0UHggLSBib3R0b21QeCkpO1xufVxuXG4vKipcbiAqIEdldCBsZW5ndGhzLCB3aWR0aHMsIGFuZCBtYXJnaW5zIG9mIGEgcGFnZS5cbiAqIEByZXR1cm5zIGEgUGFnZVByb3BlcnRpZXMgb2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYWdlUHJvcGVydGllc0luUGl4ZWxzKCk6IFBhZ2VQcm9wZXJ0aWVzIHtcbiAgY29uc3QgZmlyc3RQYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZ2VuZXJhdGVQYWdlSWRGcm9tSW5kZXgoMCkpO1xuICBpZiAoIWZpcnN0UGFnZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoYENhbm5vdCBnZXQgdGhlIGZpcnN0IHBhZ2Ugb2YgdGhpcyBkb2N1bWVudC5gKTtcbiAgICBjb25zdCBlbXB0eVBhZ2VQcm9wZXJ0aWVzOiBQYWdlUHJvcGVydGllcyA9IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgICAgbWFyZ2luVG9wOiAwLFxuICAgICAgbWFyZ2luQm90dG9tOiAwLFxuICAgICAgbWFyZ2luTGVmdDogMCxcbiAgICAgIG1hcmdpblJpZ2h0OiAwLFxuICAgIH07XG4gICAgcmV0dXJuIGVtcHR5UGFnZVByb3BlcnRpZXM7XG4gIH1cblxuICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZmlyc3RQYWdlIGFzIEVsZW1lbnQpO1xuICBjb25zdCBwYWdlUHJvcGVydGllczogUGFnZVByb3BlcnRpZXMgPSB7XG4gICAgd2lkdGg6IHBhcnNlSW50KHN0eWxlLndpZHRoKSxcbiAgICBoZWlnaHQ6IHBhcnNlSW50KHN0eWxlLmhlaWdodCksXG4gICAgbWFyZ2luVG9wOiBwYXJzZUludChzdHlsZS5tYXJnaW5Ub3ApLFxuICAgIG1hcmdpbkJvdHRvbTogcGFyc2VJbnQoc3R5bGUubWFyZ2luQm90dG9tKSxcbiAgICBtYXJnaW5MZWZ0OiBwYXJzZUludChzdHlsZS5tYXJnaW5MZWZ0KSxcbiAgICBtYXJnaW5SaWdodDogcGFyc2VJbnQoc3R5bGUubWFyZ2luUmlnaHQpLFxuICB9O1xuXG4gIHJldHVybiBwYWdlUHJvcGVydGllcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVRhcmdldFBvc2l0aW9uKHtcbiAgc2NhbGUsXG4gIGxlZnRQb2ludCxcbiAgYm90dG9tUG9pbnQsXG4gIHBhZ2VEaW1lbnNpb25zLFxuICByb3RhdGlvbiA9IFBhZ2VSb3RhdGlvbi5Sb3RhdGUwLFxufToge1xuICBzY2FsZTogbnVtYmVyO1xuICBsZWZ0UG9pbnQ6IG51bWJlcjtcbiAgYm90dG9tUG9pbnQ6IG51bWJlcjtcbiAgcGFnZURpbWVuc2lvbnM6IERpbWVuc2lvbnM7XG4gIHJvdGF0aW9uOiBQYWdlUm90YXRpb247XG59KTogeyBsZWZ0UHg6IG51bWJlcjsgdG9wUHg6IG51bWJlciB9IHtcbiAgc3dpdGNoIChyb3RhdGlvbikge1xuICAgIGRlZmF1bHQ6XG4gICAgY2FzZSBQYWdlUm90YXRpb24uUm90YXRlMDoge1xuICAgICAgY29uc3QgbGVmdFB4ID0gKGxlZnRQb2ludCAvIFBERl9XSURUSF9QT0lOVFMpICogcGFnZURpbWVuc2lvbnMud2lkdGggKiBzY2FsZTtcbiAgICAgIGNvbnN0IHRvcFB4ID0gKDEgLSBib3R0b21Qb2ludCAvIFBERl9IRUlHSFRfUE9JTlRTKSAqIHBhZ2VEaW1lbnNpb25zLmhlaWdodCAqIHNjYWxlO1xuICAgICAgcmV0dXJuIHsgbGVmdFB4LCB0b3BQeCB9O1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcGRmanMgfSBmcm9tICdyZWFjdC1wZGYnO1xuXG5pbXBvcnQgeyBEaW1lbnNpb25zIH0gZnJvbSAnLi4vY29tcG9uZW50cy90eXBlcy9ib3VuZGluZ0JveCc7XG5pbXBvcnQge1xuICBPdXRsaW5lTm9kZSxcbiAgT3V0bGluZVBvc2l0aW9uLFxuICBPdXRsaW5lUG9zaXRpb25zQnlQYWdlTnVtYmVyTWFwLFxuICBPdXRsaW5lVGFyZ2V0LFxuICBPdXRsaW5lVGFyZ2V0QXJncyxcbn0gZnJvbSAnLi4vY29tcG9uZW50cy90eXBlcy9vdXRsaW5lJztcbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAnLi4vY29tcG9uZW50cy90eXBlcy91dGlscyc7XG5pbXBvcnQgeyBsb2dQcm92aWRlcldhcm5pbmcgfSBmcm9tICcuLi91dGlscy9wcm92aWRlcic7XG5pbXBvcnQgeyBjYWxjdWxhdGVUYXJnZXRQb3NpdGlvbiB9IGZyb20gJy4uL3V0aWxzL3Njcm9sbCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURvY3VtZW50Q29udGV4dCB7XG4gIG51bVBhZ2VzOiBudW1iZXI7XG4gIG51bVBhZ2VzTG9hZGVkOiBudW1iZXI7XG4gIG91dGxpbmU6IE51bGxhYmxlPEFycmF5PE91dGxpbmVOb2RlPj47XG4gIG91dGxpbmVQb3NpdGlvbnM6IE51bGxhYmxlPE91dGxpbmVQb3NpdGlvbnNCeVBhZ2VOdW1iZXJNYXA+O1xuICBwYWdlRGltZW5zaW9uczogRGltZW5zaW9uczsgLy8gU2NhbGVkIGF0IDEwMCVcbiAgcGRmRG9jUHJveHk/OiBwZGZqcy5QREZEb2N1bWVudFByb3h5O1xuICBnZXRPdXRsaW5lVGFyZ2V0czogKG9wdHM6IE91dGxpbmVUYXJnZXRBcmdzKSA9PiBPdXRsaW5lVGFyZ2V0W107XG4gIHNldE51bVBhZ2VzOiAobnVtUGFnZXM6IG51bWJlcikgPT4gdm9pZDtcbiAgc2V0TnVtUGFnZXNMb2FkZWQ6IChudW1QYWdlc0xvYWRlZDogbnVtYmVyIHwgKChwcmV2TnVtUGFnZXNMb2FkZWQ6IG51bWJlcikgPT4gbnVtYmVyKSkgPT4gdm9pZDtcbiAgc2V0T3V0bGluZTogKG91dGxpbmU6IE51bGxhYmxlPEFycmF5PE91dGxpbmVOb2RlPj4pID0+IHZvaWQ7XG4gIHNldE91dGxpbmVQb3NpdGlvbnM6IChvdXRsaW5lUG9zaXRpb25zOiBOdWxsYWJsZTxPdXRsaW5lUG9zaXRpb25zQnlQYWdlTnVtYmVyTWFwPikgPT4gdm9pZDtcbiAgc2V0UGFnZURpbWVuc2lvbnM6IChwYWdlRGltZW5zaW9uczogRGltZW5zaW9ucykgPT4gdm9pZDtcbiAgc2V0UGRmRG9jUHJveHk6IChwZGZEb2NQcm94eTogcGRmanMuUERGRG9jdW1lbnRQcm94eSkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IERvY3VtZW50Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8SURvY3VtZW50Q29udGV4dD4oe1xuICBudW1QYWdlczogMCxcbiAgbnVtUGFnZXNMb2FkZWQ6IDAsXG4gIG91dGxpbmU6IFtdLFxuICBvdXRsaW5lUG9zaXRpb25zOiBudWxsLFxuICBwYWdlRGltZW5zaW9uczogeyBoZWlnaHQ6IDAsIHdpZHRoOiAwIH0sXG4gIHBkZkRvY1Byb3h5OiB1bmRlZmluZWQsXG4gIGdldE91dGxpbmVUYXJnZXRzOiBvcHRzID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYGdldE91dGxpbmVUYXJnZXRzKCR7SlNPTi5zdHJpbmdpZnkob3B0cyl9KWAsICdEb2N1bWVudENvbnRleHQnKTtcbiAgICByZXR1cm4gW107XG4gIH0sXG4gIHNldE51bVBhZ2VzOiBudW1QYWdlcyA9PiB7XG4gICAgbG9nUHJvdmlkZXJXYXJuaW5nKGBzZXROdW1QYWdlcygke251bVBhZ2VzfSlgLCAnRG9jdW1lbnRDb250ZXh0Jyk7XG4gIH0sXG4gIHNldE51bVBhZ2VzTG9hZGVkOiBudW1QYWdlcyA9PiB7XG4gICAgbG9nUHJvdmlkZXJXYXJuaW5nKGBzZXROdW1QYWdlc0xvYWRlZCgke251bVBhZ2VzfSlgLCAnRG9jdW1lbnRDb250ZXh0Jyk7XG4gIH0sXG4gIHNldE91dGxpbmU6IG91dGxpbmUgPT4ge1xuICAgIGxvZ1Byb3ZpZGVyV2FybmluZyhgc2V0T3V0bGluZSgke291dGxpbmV9KWAsICdEb2N1bWVudENvbnRleHQnKTtcbiAgfSxcbiAgc2V0T3V0bGluZVBvc2l0aW9uczogb3V0bGluZSA9PiB7XG4gICAgbG9nUHJvdmlkZXJXYXJuaW5nKGBzZXRPdXRsaW5lUG9zaXRpb25zKCR7b3V0bGluZX0pYCwgJ0RvY3VtZW50Q29udGV4dCcpO1xuICB9LFxuICBzZXRQYWdlRGltZW5zaW9uczogcGFnZURpbWVuc2lvbnMgPT4ge1xuICAgIGxvZ1Byb3ZpZGVyV2FybmluZyhgc2V0UGFnZURpbWVuc2lvbnMoJHtwYWdlRGltZW5zaW9uc30pYCwgJ0RvY3VtZW50Q29udGV4dCcpO1xuICB9LFxuICBzZXRQZGZEb2NQcm94eTogcGRmRG9jUHJveHkgPT4ge1xuICAgIGxvZ1Byb3ZpZGVyV2FybmluZyhgc2V0UGRmRG9jUHJveHkoJHtwZGZEb2NQcm94eX0pYCwgJ0RvY3VtZW50Q29udGV4dCcpO1xuICB9LFxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VEb2N1bWVudENvbnRleHRQcm9wcygpOiBJRG9jdW1lbnRDb250ZXh0IHtcbiAgY29uc3QgW251bVBhZ2VzLCBzZXROdW1QYWdlc10gPSBSZWFjdC51c2VTdGF0ZTxudW1iZXI+KDApO1xuICBjb25zdCBbbnVtUGFnZXNMb2FkZWQsIHNldE51bVBhZ2VzTG9hZGVkXSA9IFJlYWN0LnVzZVN0YXRlPG51bWJlcj4oMCk7XG4gIGNvbnN0IFtvdXRsaW5lLCBzZXRPdXRsaW5lXSA9IFJlYWN0LnVzZVN0YXRlPE51bGxhYmxlPEFycmF5PE91dGxpbmVOb2RlPj4+KG51bGwpO1xuICBjb25zdCBbb3V0bGluZVBvc2l0aW9ucywgc2V0T3V0bGluZVBvc2l0aW9uc10gPVxuICAgIFJlYWN0LnVzZVN0YXRlPE51bGxhYmxlPE91dGxpbmVQb3NpdGlvbnNCeVBhZ2VOdW1iZXJNYXA+PihudWxsKTtcbiAgY29uc3QgW3BhZ2VEaW1lbnNpb25zLCBzZXRQYWdlRGltZW5zaW9uc10gPSBSZWFjdC51c2VTdGF0ZTxEaW1lbnNpb25zPih7XG4gICAgaGVpZ2h0OiAwLFxuICAgIHdpZHRoOiAwLFxuICB9KTtcbiAgY29uc3QgW3BkZkRvY1Byb3h5LCBzZXRQZGZEb2NQcm94eV0gPSBSZWFjdC51c2VTdGF0ZTxwZGZqcy5QREZEb2N1bWVudFByb3h5PigpO1xuXG4gIC8vIERyYXcgb3V0bGluZSB0YXJnZXQgaW50byB0aGUgcGRmIGJhc2VkIG9uIHRoZSBhcmdzXG4gIGNvbnN0IGdldE91dGxpbmVUYXJnZXRzID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKHtcbiAgICAgIHBhZ2VOdW1iZXIsXG4gICAgICBwYWdlSW5kZXgsXG4gICAgICBzY2FsZSxcbiAgICAgIHJvdGF0aW9uLFxuICAgICAgcGFnZURpbWVuc2lvbnMsXG4gICAgfTogT3V0bGluZVRhcmdldEFyZ3MpOiBPdXRsaW5lVGFyZ2V0W10gPT4ge1xuICAgICAgaWYgKHR5cGVvZiBwYWdlSW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICAgIHBhZ2VOdW1iZXIgPSBwYWdlSW5kZXggKyAxO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBwYWdlTnVtYmVyICE9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBjb25zdCBwb3NpdGlvbnMgPSBvdXRsaW5lUG9zaXRpb25zPy5nZXQocGFnZU51bWJlcikgfHwgW107XG4gICAgICByZXR1cm4gcG9zaXRpb25zLm1hcCgoeyBkZXN0LCBsZWZ0UG9pbnQsIGJvdHRvbVBvaW50IH0pID0+IHtcbiAgICAgICAgY29uc3QgeyBsZWZ0UHgsIHRvcFB4IH0gPSBjYWxjdWxhdGVUYXJnZXRQb3NpdGlvbih7XG4gICAgICAgICAgc2NhbGUsXG4gICAgICAgICAgcm90YXRpb24sXG4gICAgICAgICAgbGVmdFBvaW50LFxuICAgICAgICAgIGJvdHRvbVBvaW50LFxuICAgICAgICAgIHBhZ2VEaW1lbnNpb25zLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkZXN0LFxuICAgICAgICAgIGxlZnRQeCxcbiAgICAgICAgICB0b3BQeCxcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgW291dGxpbmVQb3NpdGlvbnNdXG4gICk7XG5cbiAgcmV0dXJuIHtcbiAgICBudW1QYWdlcyxcbiAgICBudW1QYWdlc0xvYWRlZCxcbiAgICBvdXRsaW5lLFxuICAgIG91dGxpbmVQb3NpdGlvbnMsXG4gICAgcGFnZURpbWVuc2lvbnMsXG4gICAgcGRmRG9jUHJveHksXG4gICAgZ2V0T3V0bGluZVRhcmdldHMsXG4gICAgc2V0TnVtUGFnZXMsXG4gICAgc2V0TnVtUGFnZXNMb2FkZWQsXG4gICAgc2V0T3V0bGluZSxcbiAgICBzZXRPdXRsaW5lUG9zaXRpb25zLFxuICAgIHNldFBhZ2VEaW1lbnNpb25zOiBzZXRQYWdlRGltZW5zaW9ucyxcbiAgICBzZXRQZGZEb2NQcm94eSxcbiAgfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJ1aWxkT3V0bGluZVBvc2l0aW9ucyhcbiAgcGRmRG9jUHJveHk6IHBkZmpzLlBERkRvY3VtZW50UHJveHksXG4gIG91dGxpbmU/OiBPdXRsaW5lTm9kZVtdXG4pOiBQcm9taXNlPE91dGxpbmVQb3NpdGlvbnNCeVBhZ2VOdW1iZXJNYXA+IHtcbiAgaWYgKCFvdXRsaW5lKSB7XG4gICAgb3V0bGluZSA9IGF3YWl0IHBkZkRvY1Byb3h5LmdldE91dGxpbmUoKTtcbiAgfVxuXG4gIC8vIERlcHRoIGZpcnN0IHNlYXJjaCB0aHJvdWdoIG91dGxpbmUgaXRlbXNcbiAgY29uc3QgaXRlbVF1ZXVlID0gb3V0bGluZS5zbGljZSgpO1xuICBjb25zdCBwcm9tczogUHJvbWlzZTxOdWxsYWJsZTxPdXRsaW5lUG9zaXRpb24+PltdID0gW107XG4gIHdoaWxlIChpdGVtUXVldWUubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGl0ZW0gPSBpdGVtUXVldWUucG9wKCk7XG4gICAgaWYgKCFpdGVtKSB7XG4gICAgICBjb250aW51ZTsgLy8gTm90IGFibGUgdG8gcHJvY2Vzc1xuICAgIH1cbiAgICBjb25zdCB7IGRlc3QsIGl0ZW1zIH0gPSBpdGVtO1xuXG4gICAgLy8gQWRkIGNoaWxkIGl0ZW1zIHRvIHF1ZXVlXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbXMpKSB7XG4gICAgICBpdGVtUXVldWUucHVzaCguLi5pdGVtcyk7XG4gICAgfVxuXG4gICAgLy8gRmV0Y2ggZGVzdGluYXRpb25zIGZvciBpdGVtXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGVzdCkpIHtcbiAgICAgIHByb21zLnB1c2goLi4uZGVzdC5tYXAoZGVzdCA9PiBnZXREZXN0aW5hdGlvbihwZGZEb2NQcm94eSwgZGVzdCkpKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkZXN0ID09PSAnc3RyaW5nJykge1xuICAgICAgcHJvbXMucHVzaChnZXREZXN0aW5hdGlvbihwZGZEb2NQcm94eSwgZGVzdCkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIENvbGxlY3QgcmVzdWx0cyBhbGwgYXQgb25jZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byBwYXkgZm9yIHRoZSBjb3N0IG9mXG4gIC8vIHF1ZXVlaW5nIG1lc3NhZ2VzIHNlbnQgdG8gdGhlIHdvcmtlclxuICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwocHJvbXMpO1xuXG4gIC8vIFNwbGl0IHJlc3VsdHMgaW50byBwYWdlc1xuICBjb25zdCBtYXAgPSBuZXcgTWFwPG51bWJlciwgT3V0bGluZVBvc2l0aW9uW10+KCk7XG4gIGZvciAoY29uc3QgcmVzdWx0IG9mIHJlc3VsdHMpIHtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgY29udGludWU7IC8vIEZpbHRlciBvdXQgbnVsbFxuICAgIH1cbiAgICBjb25zdCB7IHBhZ2VOdW1iZXIgfSA9IHJlc3VsdDtcbiAgICBpZiAoIW1hcC5oYXMocGFnZU51bWJlcikpIHtcbiAgICAgIG1hcC5zZXQocGFnZU51bWJlciwgW10pO1xuICAgIH1cbiAgICBtYXAuZ2V0KHBhZ2VOdW1iZXIpPy5wdXNoKHJlc3VsdCk7XG4gIH1cblxuICAvLyBGcmVlemUgb2JqZWN0cyBzbyBjb25zdW1lcnMgY2Fubm90IG11dGF0ZVxuICBmb3IgKGNvbnN0IHBhZ2VQb3Mgb2YgbWFwLnZhbHVlcygpKSB7XG4gICAgZm9yIChjb25zdCBwb3Mgb2YgcGFnZVBvcykge1xuICAgICAgT2JqZWN0LmZyZWV6ZShwb3MpO1xuICAgIH1cbiAgICBPYmplY3QuZnJlZXplKHBhZ2VQb3MpO1xuICB9XG4gIE9iamVjdC5mcmVlemUobWFwKTtcblxuICByZXR1cm4gbWFwO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXREZXN0aW5hdGlvbihcbiAgcGRmRG9jUHJveHk6IHBkZmpzLlBERkRvY3VtZW50UHJveHksXG4gIGRlc3Q6IHN0cmluZ1xuKTogUHJvbWlzZTxOdWxsYWJsZTxPdXRsaW5lUG9zaXRpb24+PiB7XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHBkZkRvY1Byb3h5LmdldERlc3RpbmF0aW9uKGRlc3QpO1xuICBpZiAoIXJlc3VsdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICBjb25zdCBbcmVmLCBfZm9ybWF0LCBsZWZ0UG9pbnQsIGJvdHRvbVBvaW50XSA9IHJlc3VsdDtcbiAgY29uc3QgcGFnZUluZGV4ID0gYXdhaXQgcGRmRG9jUHJveHkuZ2V0UGFnZUluZGV4KHJlZik7XG4gIGNvbnN0IHBhZ2VOdW1iZXIgPSBwYWdlSW5kZXggKyAxO1xuICByZXR1cm4geyBwYWdlTnVtYmVyLCBkZXN0LCBsZWZ0UG9pbnQsIGJvdHRvbVBvaW50IH07XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IGxvZ1Byb3ZpZGVyV2FybmluZyB9IGZyb20gJy4uL3V0aWxzL3Byb3ZpZGVyJztcbmltcG9ydCB7IFBhZ2VSb3RhdGlvbiB9IGZyb20gJy4uL3V0aWxzL3JvdGF0ZSc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1pPT01fU0NBTEUgPSAxLjA7XG5leHBvcnQgaW50ZXJmYWNlIElUcmFuc2Zvcm1Db250ZXh0IHtcbiAgcGl4ZWxSYXRpbzogbnVtYmVyO1xuICByb3RhdGlvbjogUGFnZVJvdGF0aW9uO1xuICBzY2FsZTogbnVtYmVyO1xuICB6b29tSW5jcmVtZW50VmFsdWU6IG51bWJlcjtcbiAgc2V0UGl4ZWxSYXRpbzogKGRldmljZVBpeGVsUmF0aW86IG51bWJlcikgPT4gdm9pZDtcbiAgc2V0Um90YXRpb246IChyb3RhdGlvbjogUGFnZVJvdGF0aW9uKSA9PiB2b2lkO1xuICBzZXRTY2FsZTogKHNjYWxlOiBudW1iZXIpID0+IHZvaWQ7XG4gIHNldFpvb21JbmNyZW1lbnRWYWx1ZTogKHZhbHVlOiBudW1iZXIpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCBUcmFuc2Zvcm1Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxJVHJhbnNmb3JtQ29udGV4dD4oe1xuICBwaXhlbFJhdGlvOiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA6IG51bGwpIHx8IDEsXG4gIHJvdGF0aW9uOiBQYWdlUm90YXRpb24uUm90YXRlMCxcbiAgc2NhbGU6IDEsXG4gIHpvb21JbmNyZW1lbnRWYWx1ZTogMC4yLFxuICBzZXRQaXhlbFJhdGlvOiBwaXhlbFJhdGlvID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYHNldFBpeGVsUmF0aW8oJHtwaXhlbFJhdGlvfSlgLCAnVHJhbnNmb3JtQ29udGV4dCcpO1xuICB9LFxuICBzZXRSb3RhdGlvbjogcm90YXRpb24gPT4ge1xuICAgIGxvZ1Byb3ZpZGVyV2FybmluZyhgc2V0Um90YXRpb24oJHtyb3RhdGlvbn0pYCwgJ1RyYW5zZm9ybUNvbnRleHQnKTtcbiAgfSxcbiAgc2V0U2NhbGU6IHNjYWxlID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYHNldFNjYWxlKCR7c2NhbGV9KWAsICdUcmFuc2Zvcm1Db250ZXh0Jyk7XG4gIH0sXG4gIHNldFpvb21JbmNyZW1lbnRWYWx1ZTogdmFsdWUgPT4ge1xuICAgIGxvZ1Byb3ZpZGVyV2FybmluZyhgc2V0Wm9vbUluY3JlbWVudFZhbHVlKCR7dmFsdWV9KWAsICdUcmFuc2Zvcm1Db250ZXh0Jyk7XG4gIH0sXG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVRyYW5zZm9ybUNvbnRleHRQcm9wcygpOiBJVHJhbnNmb3JtQ29udGV4dCB7XG4gIGNvbnN0IFtwaXhlbFJhdGlvLCBzZXRQaXhlbFJhdGlvXSA9IFJlYWN0LnVzZVN0YXRlPG51bWJlcj4oXG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93LmRldmljZVBpeGVsUmF0aW8gOiBudWxsKSB8fCAxXG4gICk7XG4gIGNvbnN0IFtyb3RhdGlvbiwgc2V0Um90YXRpb25dID0gUmVhY3QudXNlU3RhdGU8UGFnZVJvdGF0aW9uPihQYWdlUm90YXRpb24uUm90YXRlMCk7XG4gIGNvbnN0IFtzY2FsZSwgc2V0U2NhbGVdID0gUmVhY3QudXNlU3RhdGU8bnVtYmVyPihERUZBVUxUX1pPT01fU0NBTEUpO1xuICBjb25zdCBbem9vbUluY3JlbWVudFZhbHVlLCBzZXRab29tSW5jcmVtZW50VmFsdWVdID0gUmVhY3QudXNlU3RhdGU8bnVtYmVyPigwLjIpO1xuXG4gIHJldHVybiB7XG4gICAgcGl4ZWxSYXRpbyxcbiAgICByb3RhdGlvbixcbiAgICBzY2FsZSxcbiAgICBzZXRQaXhlbFJhdGlvLFxuICAgIHNldFJvdGF0aW9uLFxuICAgIHNldFNjYWxlLFxuICAgIHpvb21JbmNyZW1lbnRWYWx1ZSxcbiAgICBzZXRab29tSW5jcmVtZW50VmFsdWUsXG4gIH07XG59XG4iLCJpbXBvcnQgeyBEaW1lbnNpb25zLCBTaXplIH0gZnJvbSAnLi4vY29tcG9uZW50cy90eXBlcy9ib3VuZGluZ0JveCc7XG5pbXBvcnQgeyBpc1NpZGV3YXlzLCBQYWdlUm90YXRpb24gfSBmcm9tICcuL3JvdGF0ZSc7XG5cbi8vIENvbXB1dGVzIHRoZSBzdHlsZSBmb3IgYSBib3VuZGluZyBib3gsIGFjY291bnRpbmcgZm9yIHBhZ2Ugcm9hdGlvbiBhbmQgcGFnZSBzY2FsaW5nL3pvb21cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlQm91bmRpbmdCb3hTdHlsZShcbiAgYm91bmRpbmdCb3hTaXplOiBTaXplLFxuICBwYWdlRGltZW5zaW9uczogRGltZW5zaW9ucyxcbiAgcm90YXRpb246IFBhZ2VSb3RhdGlvbixcbiAgc2NhbGU6IG51bWJlclxuKTogU2l6ZSB7XG4gIGNvbnN0IHsgdG9wLCBsZWZ0LCBoZWlnaHQsIHdpZHRoIH0gPSBib3VuZGluZ0JveFNpemU7XG5cbiAgc3dpdGNoIChyb3RhdGlvbikge1xuICAgIGNhc2UgUGFnZVJvdGF0aW9uLlJvdGF0ZTkwOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiBsZWZ0ICogc2NhbGUsXG4gICAgICAgIGxlZnQ6IChwYWdlRGltZW5zaW9ucy5oZWlnaHQgLSBoZWlnaHQgLSB0b3ApICogc2NhbGUsXG4gICAgICAgIGhlaWdodDogd2lkdGggKiBzY2FsZSxcbiAgICAgICAgd2lkdGg6IGhlaWdodCAqIHNjYWxlLFxuICAgICAgfTtcbiAgICBjYXNlIFBhZ2VSb3RhdGlvbi5Sb3RhdGUxODA6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IChwYWdlRGltZW5zaW9ucy5oZWlnaHQgLSBoZWlnaHQgLSB0b3ApICogc2NhbGUsXG4gICAgICAgIGxlZnQ6IChwYWdlRGltZW5zaW9ucy53aWR0aCAtIHdpZHRoIC0gbGVmdCkgKiBzY2FsZSxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKiBzY2FsZSxcbiAgICAgICAgd2lkdGg6IHdpZHRoICogc2NhbGUsXG4gICAgICB9O1xuICAgIGNhc2UgUGFnZVJvdGF0aW9uLlJvdGF0ZTI3MDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogKHBhZ2VEaW1lbnNpb25zLndpZHRoIC0gd2lkdGggLSBsZWZ0KSAqIHNjYWxlLFxuICAgICAgICBsZWZ0OiB0b3AgKiBzY2FsZSxcbiAgICAgICAgaGVpZ2h0OiB3aWR0aCAqIHNjYWxlLFxuICAgICAgICB3aWR0aDogaGVpZ2h0ICogc2NhbGUsXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHRvcCAqIHNjYWxlLFxuICAgICAgICBsZWZ0OiBsZWZ0ICogc2NhbGUsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0ICogc2NhbGUsXG4gICAgICAgIHdpZHRoOiB3aWR0aCAqIHNjYWxlLFxuICAgICAgfTtcbiAgfVxufVxuXG4vLyBDb21wdXRlIHRoZSBzdHlsZSBmb3IgYSBwYWdlLCBhY2NvdW50aW5nIGZvciBwYWdlIHJvdGF0aW9uIGFuZCBwYWdlIHNjYWxpbmcvem9vbVxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVQYWdlU3R5bGUoXG4gIHBhZ2VEaW1lbnNpb25zOiBEaW1lbnNpb25zLFxuICByb3RhdGlvbjogUGFnZVJvdGF0aW9uLFxuICBzY2FsZTogbnVtYmVyXG4pOiBTaXplIHtcbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IGdldFBhZ2VIZWlnaHQocGFnZURpbWVuc2lvbnMsIHJvdGF0aW9uKSAqIHNjYWxlLFxuICAgIHdpZHRoOiBnZXRQYWdlV2lkdGgocGFnZURpbWVuc2lvbnMsIHJvdGF0aW9uKSAqIHNjYWxlLFxuICAgIGxlZnQ6IDAsXG4gICAgdG9wOiAwLFxuICB9O1xufVxuXG4vLyBHZXQgcGFnZSBoZWlnaHQgYWNjb3VudGluZyBmb3IgcGFnZSByb3RhdGlvbi0gaWYgdGhlIHBhZ2UgaXMgcm90YXRlZCBvbiBpdHMgc2lkZSwgaXRzIHdpZHRoIGJlY29tZXMgaXRzIGhlaWdodFxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhZ2VIZWlnaHQocGFnZURpbWVuc2lvbnM6IERpbWVuc2lvbnMsIHJvdGF0aW9uOiBQYWdlUm90YXRpb24pOiBudW1iZXIge1xuICByZXR1cm4gaXNTaWRld2F5cyhyb3RhdGlvbikgPyBwYWdlRGltZW5zaW9ucy53aWR0aCA6IHBhZ2VEaW1lbnNpb25zLmhlaWdodDtcbn1cblxuLy8gR2V0IHBhZ2Ugd2lkdGggYWNjb3VudGluZyBmb3IgcGFnZSByb3RhdGlvbi0gaWYgdGhlIHBhZ2UgaXMgcm90YXRlZCBvbiBpdHMgc2lkZSwgaXRzIGhlaWdodCBiZWNvbWVzIGl0cyB3aWR0aFxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhZ2VXaWR0aChwYWdlRGltZW5zaW9uczogRGltZW5zaW9ucywgcm90YXRpb246IFBhZ2VSb3RhdGlvbik6IG51bWJlciB7XG4gIHJldHVybiBpc1NpZGV3YXlzKHJvdGF0aW9uKSA/IHBhZ2VEaW1lbnNpb25zLmhlaWdodCA6IHBhZ2VEaW1lbnNpb25zLndpZHRoO1xufVxuIiwiaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IERvY3VtZW50Q29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvRG9jdW1lbnRDb250ZXh0JztcbmltcG9ydCB7IFRyYW5zZm9ybUNvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L1RyYW5zZm9ybUNvbnRleHQnO1xuaW1wb3J0IHsgY29tcHV0ZUJvdW5kaW5nQm94U3R5bGUgfSBmcm9tICcuLi91dGlscy9zdHlsZSc7XG5pbXBvcnQgeyBCb3VuZGluZ0JveCBhcyBCb3VuZGluZ0JveFR5cGUgfSBmcm9tICcuL3R5cGVzL2JvdW5kaW5nQm94JztcblxuZXhwb3J0IHR5cGUgUHJvcHMgPSB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgdW5kZXJsaW5lQ2xhc3NOYW1lPzogc3RyaW5nO1xuICBpZD86IHN0cmluZztcbiAgaXNIaWdobGlnaHRlZD86IGJvb2xlYW47XG4gIG9uQ2xpY2s/OiAoKSA9PiB2b2lkO1xuICB2b2ljZU92ZXJMYWJlbD86IHN0cmluZztcbn0gJiBCb3VuZGluZ0JveFR5cGU7XG5cbmV4cG9ydCBjb25zdCBCb3VuZGluZ0JveDogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+ID0gKHtcbiAgdG9wLFxuICBsZWZ0LFxuICBoZWlnaHQsXG4gIHdpZHRoLFxuICBjbGFzc05hbWUsXG4gIHVuZGVybGluZUNsYXNzTmFtZSxcbiAgaWQsXG4gIGlzSGlnaGxpZ2h0ZWQsXG4gIG9uQ2xpY2ssXG4gIHZvaWNlT3ZlckxhYmVsLFxuICAuLi5leHRyYVByb3BzXG59OiBQcm9wcykgPT4ge1xuICBjb25zdCB7IHBhZ2VEaW1lbnNpb25zIH0gPSBSZWFjdC51c2VDb250ZXh0KERvY3VtZW50Q29udGV4dCk7XG4gIGNvbnN0IHsgcm90YXRpb24sIHNjYWxlIH0gPSBSZWFjdC51c2VDb250ZXh0KFRyYW5zZm9ybUNvbnRleHQpO1xuICBjb25zdCBib3hTaXplID0geyB0b3AsIGxlZnQsIGhlaWdodCwgd2lkdGggfTtcbiAgY29uc3QgY29tcG9uZW50Q2xhc3NOYW1lID0gY2xhc3NOYW1lcyhcbiAgICAncGRmLXJlYWRlcl9fb3ZlcmxheS1ib3VuZGluZy1ib3gnLFxuICAgIGlzSGlnaGxpZ2h0ZWQgPT09IHRydWUgPyAncGRmLXJlYWRlcl9fb3ZlcmxheS1ib3VuZGluZy1ib3gtaGlnaGxpZ2h0ZWQnIDogJycsXG4gICAgY2xhc3NOYW1lXG4gICk7XG5cbiAgY29uc3QgZ2V0Qm91bmRpbmdCb3hTdHlsZSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICByZXR1cm4gY29tcHV0ZUJvdW5kaW5nQm94U3R5bGUoYm94U2l6ZSwgcGFnZURpbWVuc2lvbnMsIHJvdGF0aW9uLCBzY2FsZSk7XG4gIH0sIFtwYWdlRGltZW5zaW9ucywgcm90YXRpb24sIHNjYWxlXSk7XG5cbiAgY29uc3Qgcm90YXRpb25DbGFzc05hbWUgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgcmV0dXJuIGByb3RhdGUke3JvdGF0aW9ufWA7XG4gIH0sIFtyb3RhdGlvbl0pO1xuXG4gIHJldHVybiAoXG4gICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2BwZGYtcmVhZGVyX19vdmVybGF5LWJvdW5kaW5nLWJveC11bmRlcmxpbmUgJHtcbiAgICAgICAgICB1bmRlcmxpbmVDbGFzc05hbWUgfHwgcm90YXRpb25DbGFzc05hbWUoKVxuICAgICAgICB9YH1cbiAgICAgICAgc3R5bGU9e2dldEJvdW5kaW5nQm94U3R5bGUoKX1cbiAgICAgIC8+XG4gICAgICA8ZGl2XG4gICAgICAgIGlkPXtpZH1cbiAgICAgICAgY2xhc3NOYW1lPXtgJHtjb21wb25lbnRDbGFzc05hbWV9ICR7cm90YXRpb25DbGFzc05hbWUoKX1gfVxuICAgICAgICBzdHlsZT17Z2V0Qm91bmRpbmdCb3hTdHlsZSgpfVxuICAgICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgICByb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgdGFiSW5kZXg9ezB9XG4gICAgICAgIGFyaWEtbGFiZWw9e3ZvaWNlT3ZlckxhYmVsfVxuICAgICAgICB7Li4uZXh0cmFQcm9wc31cbiAgICAgIC8+XG4gICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgKTtcbn07XG4iLCJpbXBvcnQgeyBOdWxsYWJsZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvdHlwZXMvdXRpbHMnO1xuXG5leHBvcnQgZW51bSBTY3JvbGxEaXJlY3Rpb24ge1xuICBVUCA9ICdVUCcsXG4gIERPV04gPSAnRE9XTicsXG59XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY3JvbGxEZXRlY3RvciB7XG4gIF9sYXN0U2Nyb2xsVG9wOiBudW1iZXI7XG4gIF9sYXN0U2Nyb2xsRGlyZWN0aW9uOiBOdWxsYWJsZTxTY3JvbGxEaXJlY3Rpb24+O1xuICBfZWw6IEVsZW1lbnQ7XG4gIF9zZXRTY3JvbGxEaXJlY3Rpb246IChzY3JvbGxEaXJlY3Rpb246IFNjcm9sbERpcmVjdGlvbikgPT4gYW55O1xuICBfbGFzdFNjcm9sbFRvcEJlZm9yZURpcmVjdGlvbkNoYW5nZTogbnVtYmVyO1xuICBfc2Nyb2xsVGhyZXNob2xkPzogbnVtYmVyO1xuICBfaXNTY3JvbGxUaHJlc2hvbGRSZWFjaGVkSW5EaXJlY3Rpb246IE51bGxhYmxlPFNjcm9sbERpcmVjdGlvbj47XG4gIF9zZXRTY3JvbGxUaHJlc2hvbGRSZWFjaGVkSW5EaXJlY3Rpb24/OiAoc2Nyb2xsRGlyZWN0aW9uOiBOdWxsYWJsZTxTY3JvbGxEaXJlY3Rpb24+KSA9PiBhbnk7XG4gIF9pc0F0VG9wOiBOdWxsYWJsZTxib29sZWFuPjtcbiAgX3NldElzQXRUb3A6IChpc0F0VG9wOiBib29sZWFuKSA9PiBhbnk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgZWw6IEVsZW1lbnQsXG4gICAgc2V0U2Nyb2xsRGlyZWN0aW9uOiAoc2Nyb2xsRGlyZWN0aW9uOiBTY3JvbGxEaXJlY3Rpb24pID0+IGFueSxcbiAgICBzZXRJc0F0VG9wOiAoaXNBdFRvcDogYm9vbGVhbikgPT4gYW55LFxuICAgIHNldFNjcm9sbFRocmVzaG9sZFJlYWNoZWRJbkRpcmVjdGlvbj86IChzY3JvbGxEaXJlY3Rpb246IE51bGxhYmxlPFNjcm9sbERpcmVjdGlvbj4pID0+IGFueSxcbiAgICBzY3JvbGxUaHJlc2hvbGQ/OiBudW1iZXJcbiAgKSB7XG4gICAgdGhpcy5fZWwgPSBlbDtcbiAgICB0aGlzLl9sYXN0U2Nyb2xsVG9wID0gdGhpcy5fZWwuc2Nyb2xsVG9wO1xuICAgIHRoaXMuX2xhc3RTY3JvbGxEaXJlY3Rpb24gPSBudWxsO1xuICAgIHRoaXMuX3NldFNjcm9sbERpcmVjdGlvbiA9IHNldFNjcm9sbERpcmVjdGlvbjtcbiAgICB0aGlzLl9pc0F0VG9wID0gbnVsbDtcbiAgICB0aGlzLl9zZXRJc0F0VG9wID0gc2V0SXNBdFRvcDtcbiAgICB0aGlzLl9sYXN0U2Nyb2xsVG9wQmVmb3JlRGlyZWN0aW9uQ2hhbmdlID0gdGhpcy5fZWwuc2Nyb2xsVG9wO1xuICAgIHRoaXMuX3Njcm9sbFRocmVzaG9sZCA9IHNjcm9sbFRocmVzaG9sZDtcblxuICAgIHRoaXMuX2lzU2Nyb2xsVGhyZXNob2xkUmVhY2hlZEluRGlyZWN0aW9uID0gbnVsbDtcbiAgICB0aGlzLl9zZXRTY3JvbGxUaHJlc2hvbGRSZWFjaGVkSW5EaXJlY3Rpb24gPSBzZXRTY3JvbGxUaHJlc2hvbGRSZWFjaGVkSW5EaXJlY3Rpb247XG4gIH1cblxuICBhdHRhY2hTY3JvbGxMaXN0ZW5lcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fZWw/LnRhZ05hbWU/LnRvTG93ZXJDYXNlKCkgPT09ICdodG1sJykge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuX29uU2Nyb2xsLCBmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2VsLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuX29uU2Nyb2xsLCBmYWxzZSk7XG4gIH1cblxuICBkZXRhY2hTY3JvbGxMaXN0ZW5lcigpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fZWw/LnRhZ05hbWU/LnRvTG93ZXJDYXNlKCkgPT09ICdodG1sJykge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuX29uU2Nyb2xsLCBmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2VsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuX29uU2Nyb2xsLCBmYWxzZSk7XG4gIH1cblxuICBfb25TY3JvbGwgPSAoKTogdm9pZCA9PiB7XG4gICAgY29uc3QgY3VyclNjcm9sbFRvcCA9IHRoaXMuX2VsLnNjcm9sbFRvcDtcbiAgICBpZiAodGhpcy5faXNBdFRvcCAhPT0gKGN1cnJTY3JvbGxUb3AgPT09IDApKSB7XG4gICAgICB0aGlzLl9pc0F0VG9wID0gY3VyclNjcm9sbFRvcCA9PT0gMDtcbiAgICAgIHRoaXMuX3NldElzQXRUb3AoY3VyclNjcm9sbFRvcCA9PT0gMCk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9sYXN0U2Nyb2xsVG9wID09PSBjdXJyU2Nyb2xsVG9wKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRGV0ZXJtaW5lIGRpcmVjdGlvblxuICAgIGNvbnN0IGN1cnJTY3JvbGxEaXJlY3Rpb24gPSAoKCkgPT4ge1xuICAgICAgaWYgKGN1cnJTY3JvbGxUb3AgPD0gMCkge1xuICAgICAgICByZXR1cm4gU2Nyb2xsRGlyZWN0aW9uLkRPV047XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fbGFzdFNjcm9sbFRvcCA8IGN1cnJTY3JvbGxUb3AgPyBTY3JvbGxEaXJlY3Rpb24uRE9XTiA6IFNjcm9sbERpcmVjdGlvbi5VUDtcbiAgICB9KSgpO1xuXG4gICAgLy8gVXBkYXRlIHN0YXRlLCBpZiBjaGFuZ2VkXG4gICAgdGhpcy5fbGFzdFNjcm9sbFRvcCA9IGN1cnJTY3JvbGxUb3A7XG4gICAgaWYgKHRoaXMuX2xhc3RTY3JvbGxEaXJlY3Rpb24gIT09IGN1cnJTY3JvbGxEaXJlY3Rpb24pIHtcbiAgICAgIHRoaXMuX2xhc3RTY3JvbGxEaXJlY3Rpb24gPSBjdXJyU2Nyb2xsRGlyZWN0aW9uO1xuICAgICAgdGhpcy5fc2V0U2Nyb2xsRGlyZWN0aW9uKGN1cnJTY3JvbGxEaXJlY3Rpb24pO1xuXG4gICAgICB0aGlzLl9sYXN0U2Nyb2xsVG9wQmVmb3JlRGlyZWN0aW9uQ2hhbmdlID0gY3VyclNjcm9sbFRvcDtcbiAgICAgIHRoaXMuX2lzU2Nyb2xsVGhyZXNob2xkUmVhY2hlZEluRGlyZWN0aW9uID0gbnVsbDtcbiAgICAgIGlmICh0aGlzLl9zZXRTY3JvbGxUaHJlc2hvbGRSZWFjaGVkSW5EaXJlY3Rpb24gJiYgIXRoaXMuX2lzQXRUb3ApIHtcbiAgICAgICAgdGhpcy5fc2V0U2Nyb2xsVGhyZXNob2xkUmVhY2hlZEluRGlyZWN0aW9uKG51bGwpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5fc2Nyb2xsVGhyZXNob2xkICYmIHRoaXMuX3NldFNjcm9sbFRocmVzaG9sZFJlYWNoZWRJbkRpcmVjdGlvbikge1xuICAgICAgICBjb25zdCBzY3JvbGxlZEFtb3VudCA9IE1hdGguYWJzKHRoaXMuX2xhc3RTY3JvbGxUb3BCZWZvcmVEaXJlY3Rpb25DaGFuZ2UgLSBjdXJyU2Nyb2xsVG9wKTtcbiAgICAgICAgaWYgKHNjcm9sbGVkQW1vdW50ID49IHRoaXMuX3Njcm9sbFRocmVzaG9sZCkge1xuICAgICAgICAgIHRoaXMuX2lzU2Nyb2xsVGhyZXNob2xkUmVhY2hlZEluRGlyZWN0aW9uID0gdGhpcy5fbGFzdFNjcm9sbERpcmVjdGlvbjtcbiAgICAgICAgICB0aGlzLl9zZXRTY3JvbGxUaHJlc2hvbGRSZWFjaGVkSW5EaXJlY3Rpb24odGhpcy5fbGFzdFNjcm9sbERpcmVjdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG4iLCJjb25zdCBERUZBVUxUX1JPT1RfTUFSR0lOID0gJzUwcHgnO1xuY29uc3QgREVGQVVMVF9USFJFU0hPTEQgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiAxMDEgfSkubWFwKChfLCBpKSA9PiBpIC8gMTAwKTtcblxuZXhwb3J0IHR5cGUgU2V0VmlzaWJsZUVudHJpZXNDYWxsYmFjazxURW50cnk+ID0gKFxuICB2aXNpYmxlOiBNYXA8VEVudHJ5LCBWaXNpYmxlRW50cnlEZXRhaWxUeXBlPlxuKSA9PiB2b2lkO1xuZXhwb3J0IHR5cGUgb25WaXNpYmxlRW50cmllc0NoYW5nZUNhbGxiYWNrPFRFbnRyeT4gPSAoYXJnczoge1xuICB2aXNpYmxlRW50cmllczogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeVtdO1xuICBoaWRkZW5FbnRyaWVzOiBJbnRlcnNlY3Rpb25PYnNlcnZlckVudHJ5W107XG4gIGxhc3RFbnRyaWVzOiBNYXA8VEVudHJ5LCBWaXNpYmxlRW50cnlEZXRhaWxUeXBlPjtcbn0pID0+IE1hcDxURW50cnksIFZpc2libGVFbnRyeURldGFpbFR5cGU+O1xuXG5leHBvcnQgdHlwZSBWaXNpYmxlRW50cnlEZXRhaWxUeXBlID0ge1xuICByYXRpbzogbnVtYmVyO1xuICB0aW1lc3RhbXA6IG51bWJlcjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpc2libGVFbnRyaWVzRGV0ZWN0b3I8VEVudHJ5PiB7XG4gIF9yb290OiBFbGVtZW50O1xuICBfb2JzZXJ2ZXI6IEludGVyc2VjdGlvbk9ic2VydmVyO1xuICBfbGFzdFZpc2libGVFbnRyaWVzOiBNYXA8VEVudHJ5LCBWaXNpYmxlRW50cnlEZXRhaWxUeXBlPjtcbiAgX3NldFZpc2libGVFbnRyaWVzOiBTZXRWaXNpYmxlRW50cmllc0NhbGxiYWNrPFRFbnRyeT47XG4gIF9vblZpc2libGVFbnRyaWVzQ2hhbmdlOiBvblZpc2libGVFbnRyaWVzQ2hhbmdlQ2FsbGJhY2s8VEVudHJ5PjtcblxuICBjb25zdHJ1Y3Rvcih7XG4gICAgcm9vdCxcbiAgICB0aHJlc0hvbGQsXG4gICAgc2V0VmlzaWJsZUVudHJpZXMsXG4gICAgb25WaXNpYmxlRW50cmllc0NoYW5nZSxcbiAgfToge1xuICAgIHJvb3Q6IEVsZW1lbnQ7XG4gICAgdGhyZXNIb2xkPzogbnVtYmVyIHwgQXJyYXk8bnVtYmVyPjtcbiAgICBzZXRWaXNpYmxlRW50cmllczogU2V0VmlzaWJsZUVudHJpZXNDYWxsYmFjazxURW50cnk+O1xuICAgIG9uVmlzaWJsZUVudHJpZXNDaGFuZ2U6IG9uVmlzaWJsZUVudHJpZXNDaGFuZ2VDYWxsYmFjazxURW50cnk+O1xuICB9KSB7XG4gICAgdGhpcy5fcm9vdCA9IHJvb3Q7XG4gICAgdGhpcy5fbGFzdFZpc2libGVFbnRyaWVzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX3NldFZpc2libGVFbnRyaWVzID0gc2V0VmlzaWJsZUVudHJpZXM7XG4gICAgdGhpcy5fb25WaXNpYmxlRW50cmllc0NoYW5nZSA9IG9uVmlzaWJsZUVudHJpZXNDaGFuZ2U7XG4gICAgdGhpcy5fb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoXG4gICAgICBlbnRyaWVzID0+IHtcbiAgICAgICAgLy8gQ29sbGVjdCB2aXNpYmxlIGFuZCBoaWRkZW4gZWxlbWVudHNcbiAgICAgICAgY29uc3QgdmlzaWJsZUVudHJpZXMgPSBlbnRyaWVzLmZpbHRlcihlbnRyeSA9PiBlbnRyeS5pc0ludGVyc2VjdGluZyk7XG4gICAgICAgIGNvbnN0IGhpZGRlbkVudHJpZXMgPSBlbnRyaWVzLmZpbHRlcihlbnRyeSA9PiAhZW50cnkuaXNJbnRlcnNlY3RpbmcpO1xuXG4gICAgICAgIC8vIERldGVybWluZSB3aGF0IG5lZWRzIHNhdmVkXG4gICAgICAgIGNvbnN0IG5ld1Zpc2libGVFbnRyaWVzID0gdGhpcy5fb25WaXNpYmxlRW50cmllc0NoYW5nZSh7XG4gICAgICAgICAgdmlzaWJsZUVudHJpZXMsXG4gICAgICAgICAgaGlkZGVuRW50cmllcyxcbiAgICAgICAgICBsYXN0RW50cmllczogdGhpcy5fbGFzdFZpc2libGVFbnRyaWVzLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBmcm96ZW5FbnRyaWVzID0gbmV3IE1hcChuZXdWaXNpYmxlRW50cmllcyk7XG4gICAgICAgIE9iamVjdC5mcmVlemUoZnJvemVuRW50cmllcyk7XG4gICAgICAgIHRoaXMuX2xhc3RWaXNpYmxlRW50cmllcyA9IGZyb3plbkVudHJpZXM7XG4gICAgICAgIHRoaXMuX3NldFZpc2libGVFbnRyaWVzKGZyb3plbkVudHJpZXMpO1xuICAgICAgfSxcblxuICAgICAgLy8gRGVmYXVsdCBzZXR0aW5nIGZvciBpbnRlcnNlY3Rpb24gb2JzZXJ2ZXJcbiAgICAgIHtcbiAgICAgICAgcm9vdDogdGhpcy5fcm9vdC50YWdOYW1lPy50b0xvd2VyQ2FzZSgpID09PSAnaHRtbCcgPyBudWxsIDogdGhpcy5fcm9vdCxcbiAgICAgICAgcm9vdE1hcmdpbjogREVGQVVMVF9ST09UX01BUkdJTixcbiAgICAgICAgdGhyZXNob2xkOiB0aHJlc0hvbGQgPyB0aHJlc0hvbGQgOiBERUZBVUxUX1RIUkVTSE9MRCxcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgb2JzZXJ2ZU5vZGVzKHNlbGVjdG9yOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBmb3IgKGNvbnN0IG5vZGUgb2YgdGhpcy5fcm9vdC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSkge1xuICAgICAgdGhpcy5fb2JzZXJ2ZXIub2JzZXJ2ZShub2RlKTtcbiAgICB9XG4gIH1cblxuICBkZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuX29ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBOb2RlRGVzdGluYXRpb24gfSBmcm9tICcuLi9jb21wb25lbnRzL3R5cGVzL291dGxpbmUnO1xuaW1wb3J0IHsgUGFnZU51bWJlciB9IGZyb20gJy4uL2NvbXBvbmVudHMvdHlwZXMvcGFnZSc7XG5pbXBvcnQgeyBOdWxsYWJsZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvdHlwZXMvdXRpbHMnO1xuaW1wb3J0IHsgbG9nUHJvdmlkZXJXYXJuaW5nIH0gZnJvbSAnLi4vdXRpbHMvcHJvdmlkZXInO1xuaW1wb3J0IHsgZ2VuZXJhdGVQYWdlSWRGcm9tSW5kZXggfSBmcm9tICcuLi91dGlscy9zY3JvbGwnO1xuaW1wb3J0IFNjcm9sbERldGVjdG9yLCB7IFNjcm9sbERpcmVjdGlvbiB9IGZyb20gJy4uL3V0aWxzL1Njcm9sbERpcmVjdGlvbkRldGVjdG9yJztcbmltcG9ydCBWaXNpYmxlRW50cmllc0RldGVjdG9yLCB7IFZpc2libGVFbnRyeURldGFpbFR5cGUgfSBmcm9tICcuLi91dGlscy9WaXNpYmxlRW50cmllc0RldGVjdG9yJztcblxuY29uc3QgT1VUTElORV9BVFRSSUJVVEUgPSAnZGF0YS1vdXRsaW5lLXRhcmdldC1kZXN0JztcblxuY29uc3QgT1VUTElORV9TRUxFQ1RPUiA9ICcucGRmLXJlYWRlcl9fcGFnZV9fb3V0bGluZS10YXJnZXQnO1xuXG5jb25zdCBQQUdFX05VTUJFUl9BVFRSSUJVVEUgPSAnZGF0YS1wYWdlLW51bWJlcic7XG5cbmNvbnN0IFBBR0VfTlVNQkVSX1NFTEVDVE9SID0gYC5wZGYtcmVhZGVyX19wYWdlWyR7UEFHRV9OVU1CRVJfQVRUUklCVVRFfV1gO1xuXG5jb25zdCBERUZBVUxUX1BBR0VfU0NST0xMRURfSU5UT19WSUVXX1RIUkVTSE9MRCA9IDAuMTtcblxuY29uc3QgRU1QVFlfTlVNQkVSX1RPX1ZJU0lCTEVfRU5UUllfREVUQUlMX01BUCA9IE9iamVjdC5mcmVlemUoXG4gIG5ldyBNYXA8bnVtYmVyLCBWaXNpYmxlRW50cnlEZXRhaWxUeXBlPigpXG4pO1xuXG5leHBvcnQgaW50ZXJmYWNlIElTY3JvbGxDb250ZXh0IHtcbiAgaXNPdXRsaW5lVGFyZ2V0VmlzaWJsZTogKGRlc3Q6IE5vZGVEZXN0aW5hdGlvbikgPT4gYm9vbGVhbjtcbiAgaXNQYWdlVmlzaWJsZTogKHBhZ2VOdW1iZXI6IFBhZ2VOdW1iZXIpID0+IGJvb2xlYW47XG4gIHNjcm9sbERpcmVjdGlvbjogTnVsbGFibGU8U2Nyb2xsRGlyZWN0aW9uPjtcbiAgdmlzaWJsZU91dGxpbmVUYXJnZXRzOiBNYXA8Tm9kZURlc3RpbmF0aW9uLCBWaXNpYmxlRW50cnlEZXRhaWxUeXBlPjsgLy8gbWFwcGluZyBub2RlIGRlc3RpbmF0aW9uIHdpdGggdGhlaXIgaW50ZXJzZWN0aW9uIHJhdGlvXG4gIHZpc2libGVQYWdlUmF0aW9zOiBNYXA8bnVtYmVyLCBWaXNpYmxlRW50cnlEZXRhaWxUeXBlPjsgLy8gbWFwcGluZyBwYWdlIG51bWJlciB3aXRoIHRoZWlyIGludGVyc2VjdGlvbiByYXRpb1xuICByZXNldFNjcm9sbE9ic2VydmVyczogKCkgPT4gdm9pZDtcbiAgc2Nyb2xsUm9vdDogTnVsbGFibGU8SFRNTEVsZW1lbnQ+O1xuICBzZXRTY3JvbGxSb290OiAocm9vdDogTnVsbGFibGU8SFRNTEVsZW1lbnQ+KSA9PiB2b2lkO1xuICBzY3JvbGxUb091dGxpbmVUYXJnZXQ6IChkZXN0OiBOb2RlRGVzdGluYXRpb24pID0+IHZvaWQ7XG4gIHNldFNjcm9sbFRocmVzaG9sZDogKHNjcm9sbFRocmVzaG9sZDogTnVsbGFibGU8bnVtYmVyPikgPT4gdm9pZDtcbiAgc2Nyb2xsVG9QYWdlOiAocGFnZU51bWJlcjogUGFnZU51bWJlcikgPT4gdm9pZDtcbiAgdXBkYXRlU2Nyb2xsUG9zaXRpb246ICh6b29tTXVsdGlwbGllcjogbnVtYmVyKSA9PiB2b2lkO1xuICBzZXRJc091dGxpbmVDbGlja2VkOiAoaXNPdXRsaW5lR2V0Q2xpY2tlZDogYm9vbGVhbikgPT4gdm9pZDtcbiAgc2Nyb2xsVGhyZXNob2xkUmVhY2hlZEluRGlyZWN0aW9uOiBOdWxsYWJsZTxTY3JvbGxEaXJlY3Rpb24+O1xuICBpc0F0VG9wOiBOdWxsYWJsZTxib29sZWFuPjtcbiAgaXNPdXRsaW5lQ2xpY2tlZDogTnVsbGFibGU8Ym9vbGVhbj47XG4gIHBhZ2VzU2Nyb2xsZWRJbnRvVmlldzogTWFwPG51bWJlciwgVmlzaWJsZUVudHJ5RGV0YWlsVHlwZT47IC8vIG1hcHBpbmcgcGFnZSBudW1iZXIgd2l0aCB0aGVpciBpbnRlcnNlY3Rpb24gcmF0aW9cbiAgc2V0UGFnZVNjcm9sbGVkSW50b1ZpZXdUaHJlc2hvbGQ6ICh0aHJlc2hvbGQ6IG51bWJlcikgPT4gdm9pZDtcbn1cblxuY29uc3QgREVGQVVMVF9DT05URVhUOiBJU2Nyb2xsQ29udGV4dCA9IHtcbiAgc2Nyb2xsRGlyZWN0aW9uOiBudWxsLFxuICB2aXNpYmxlT3V0bGluZVRhcmdldHM6IG5ldyBNYXAoKSxcbiAgdmlzaWJsZVBhZ2VSYXRpb3M6IG5ldyBNYXAoKSxcbiAgaXNPdXRsaW5lVGFyZ2V0VmlzaWJsZTogb3B0cyA9PiB7XG4gICAgbG9nUHJvdmlkZXJXYXJuaW5nKGBpc091dGxpbmVUYXJnZXRWaXNpYmxlKCR7SlNPTi5zdHJpbmdpZnkob3B0cyl9KWAsICdTY3JvbGxDb250ZXh0Jyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBpc1BhZ2VWaXNpYmxlOiBvcHRzID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYGlzUGFnZVZpc2libGUoJHtKU09OLnN0cmluZ2lmeShvcHRzKX0pYCwgJ1Njcm9sbENvbnRleHQnKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIHJlc2V0U2Nyb2xsT2JzZXJ2ZXJzOiAoKSA9PiB7XG4gICAgbG9nUHJvdmlkZXJXYXJuaW5nKGByZXNldFNjcm9sbE9ic2VydmVycygpYCwgJ1Njcm9sbENvbnRleHQnKTtcbiAgfSxcbiAgc2Nyb2xsUm9vdDogPEhUTUxFbGVtZW50Pnt9LFxuICBzZXRTY3JvbGxSb290OiAoX2VsOiBOdWxsYWJsZTxIVE1MRWxlbWVudD4pID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYHNldFNjcm9sbFJvb3QoLi4uKWAsICdTY3JvbGxDb250ZXh0Jyk7XG4gIH0sXG4gIHNjcm9sbFRvT3V0bGluZVRhcmdldDogZGVzdCA9PiB7XG4gICAgbG9nUHJvdmlkZXJXYXJuaW5nKGBzY3JvbGxUb091dGxpbmVUYXJnZXQoJHtkZXN0fSlgLCAnU2Nyb2xsQ29udGV4dCcpO1xuICB9LFxuICBzZXRTY3JvbGxUaHJlc2hvbGQ6IChzY3JvbGxUaHJlc2hvbGQ6IE51bGxhYmxlPG51bWJlcj4pID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYHNldFNjcm9sbFRocmVzaG9sZCgke3Njcm9sbFRocmVzaG9sZH0pYCwgJ1Njcm9sbENvbnRleHQnKTtcbiAgfSxcbiAgc2Nyb2xsVG9QYWdlOiBvcHRzID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYHNjcm9sbFRvUGFnZSgke0pTT04uc3RyaW5naWZ5KG9wdHMpfSlgLCAnU2Nyb2xsQ29udGV4dCcpO1xuICB9LFxuICB1cGRhdGVTY3JvbGxQb3NpdGlvbjogem9vbU11bHRpcGxpZXIgPT4ge1xuICAgIGxvZ1Byb3ZpZGVyV2FybmluZyhgdXBkYXRlU2Nyb2xsUG9zaXRpb24oJHtKU09OLnN0cmluZ2lmeSh6b29tTXVsdGlwbGllcil9KWAsICdTY3JvbGxDb250ZXh0Jyk7XG4gIH0sXG4gIHNldElzT3V0bGluZUNsaWNrZWQ6IG9wdHMgPT4ge1xuICAgIGxvZ1Byb3ZpZGVyV2FybmluZyhgc2V0SXNPdXRsaW5lR2V0Q2xpY2tlZCgke0pTT04uc3RyaW5naWZ5KG9wdHMpfSlgLCAnU2Nyb2xsQ29udGV4dCcpO1xuICB9LFxuICBzY3JvbGxUaHJlc2hvbGRSZWFjaGVkSW5EaXJlY3Rpb246IG51bGwsXG4gIGlzQXRUb3A6IG51bGwsXG4gIGlzT3V0bGluZUNsaWNrZWQ6IG51bGwsXG4gIHBhZ2VzU2Nyb2xsZWRJbnRvVmlldzogbmV3IE1hcCgpLFxuICBzZXRQYWdlU2Nyb2xsZWRJbnRvVmlld1RocmVzaG9sZDogKHRocmVzaG9sZDogbnVtYmVyKSA9PiB7XG4gICAgbG9nUHJvdmlkZXJXYXJuaW5nKGBwYWdlc1Njcm9sbGVkSW50b1ZpZXcoJHt0aHJlc2hvbGR9KWAsICdTY3JvbGxDb250ZXh0Jyk7XG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgU2Nyb2xsQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8SVNjcm9sbENvbnRleHQ+KERFRkFVTFRfQ09OVEVYVCk7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTY3JvbGxDb250ZXh0UHJvcHMoKTogSVNjcm9sbENvbnRleHQge1xuICAvLyBOb2RlIHVzZWQgZm9yIG9ic2VydmluZyB0aGUgc2Nyb2xsIHBvc2l0aW9uXG4gIGNvbnN0IFtzY3JvbGxSb290LCBzZXRTY3JvbGxSb290XSA9IFJlYWN0LnVzZVN0YXRlPE51bGxhYmxlPEhUTUxFbGVtZW50Pj4obnVsbCk7XG5cbiAgLy8gRGV0ZXJtaW5lIHNjcm9sbCBkaXJlY3Rpb25cbiAgY29uc3QgW3Njcm9sbERpcmVjdGlvbiwgc2V0U2Nyb2xsRGlyZWN0aW9uXSA9IFJlYWN0LnVzZVN0YXRlPE51bGxhYmxlPFNjcm9sbERpcmVjdGlvbj4+KG51bGwpO1xuICBjb25zdCBbc2Nyb2xsVGhyZXNob2xkLCBzZXRTY3JvbGxUaHJlc2hvbGRdID0gUmVhY3QudXNlU3RhdGU8TnVsbGFibGU8bnVtYmVyPj4obnVsbCk7XG4gIGNvbnN0IFtzY3JvbGxUaHJlc2hvbGRSZWFjaGVkSW5EaXJlY3Rpb24sIHNldFNjcm9sbFRocmVzaG9sZFJlYWNoZWRJbkRpcmVjdGlvbl0gPVxuICAgIFJlYWN0LnVzZVN0YXRlPE51bGxhYmxlPFNjcm9sbERpcmVjdGlvbj4+KG51bGwpO1xuICBjb25zdCBbaXNBdFRvcCwgc2V0SXNBdFRvcF0gPSBSZWFjdC51c2VTdGF0ZTxOdWxsYWJsZTxib29sZWFuPj4obnVsbCk7XG4gIGNvbnN0IFtpc091dGxpbmVDbGlja2VkLCBzZXRJc091dGxpbmVDbGlja2VkXSA9IFJlYWN0LnVzZVN0YXRlPE51bGxhYmxlPGJvb2xlYW4+PihudWxsKTtcblxuICBjb25zdCBbcGFnZVNjcm9sbGVkSW50b1ZpZXdUaHJlc2hvbGQsIHNldFBhZ2VTY3JvbGxlZEludG9WaWV3VGhyZXNob2xkXSA9IFJlYWN0LnVzZVN0YXRlKFxuICAgIERFRkFVTFRfUEFHRV9TQ1JPTExFRF9JTlRPX1ZJRVdfVEhSRVNIT0xEXG4gICk7XG5cbiAgY29uc3QgW3BhZ2VzU2Nyb2xsZWRJbnRvVmlldywgc2V0UGFnZXNTY3JvbGxlZEludG9WaWV3XSA9IFJlYWN0LnVzZVN0YXRlPFxuICAgIE1hcDxudW1iZXIsIFZpc2libGVFbnRyeURldGFpbFR5cGU+XG4gID4oKCkgPT4gRU1QVFlfTlVNQkVSX1RPX1ZJU0lCTEVfRU5UUllfREVUQUlMX01BUCk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBzY3JvbGxFbGVtID0gc2Nyb2xsUm9vdCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgaWYgKCFzY3JvbGxFbGVtKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHNjcm9sbERpcmVjdGlvbkRldGVjdG9yOiBTY3JvbGxEZXRlY3RvcjtcbiAgICBpZiAoIXNjcm9sbFRocmVzaG9sZCkge1xuICAgICAgLy8gc2Nyb2xsIHRocmVzaG9sZCBpcyBvcHRpb25hbFxuICAgICAgc2Nyb2xsRGlyZWN0aW9uRGV0ZWN0b3IgPSBuZXcgU2Nyb2xsRGV0ZWN0b3Ioc2Nyb2xsRWxlbSwgc2V0U2Nyb2xsRGlyZWN0aW9uLCBzZXRJc0F0VG9wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2Nyb2xsRGlyZWN0aW9uRGV0ZWN0b3IgPSBuZXcgU2Nyb2xsRGV0ZWN0b3IoXG4gICAgICAgIHNjcm9sbEVsZW0sXG4gICAgICAgIHNldFNjcm9sbERpcmVjdGlvbixcbiAgICAgICAgc2V0SXNBdFRvcCxcbiAgICAgICAgc2V0U2Nyb2xsVGhyZXNob2xkUmVhY2hlZEluRGlyZWN0aW9uLFxuICAgICAgICBzY3JvbGxUaHJlc2hvbGRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgc2Nyb2xsRGlyZWN0aW9uRGV0ZWN0b3IuYXR0YWNoU2Nyb2xsTGlzdGVuZXIoKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc2Nyb2xsRGlyZWN0aW9uRGV0ZWN0b3IuZGV0YWNoU2Nyb2xsTGlzdGVuZXIoKTtcbiAgICB9O1xuICB9LCBbc2Nyb2xsUm9vdCwgc2Nyb2xsVGhyZXNob2xkXSk7XG5cbiAgLy8gQ2F1c2VzIHRoZSBJbnRlcnNlY3Rpb25PYnNlcnZlcnMgdG8gZGlzY29ubmVjdCBhbmQgYmUgcmVjcmVhdGVkICh1c2VmdWwgd2hlbiBET00gY2hhbmdlcylcbiAgY29uc3QgW29ic2VydmVySW5kZXgsIHNldE9ic2VydmVySW5kZXhdID0gUmVhY3QudXNlU3RhdGUoMCk7XG4gIGNvbnN0IHJlc2V0U2Nyb2xsT2JzZXJ2ZXJzID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldE9ic2VydmVySW5kZXgob2JzZXJ2ZXJJbmRleCArIDEpO1xuICB9LCBbb2JzZXJ2ZXJJbmRleF0pO1xuXG4gIGNvbnN0IFt2aXNpYmxlT3V0bGluZVRhcmdldHMsIHNldFZpc2libGVPdXRsaW5lTm9kZXNdID0gUmVhY3QudXNlU3RhdGU8XG4gICAgTWFwPE5vZGVEZXN0aW5hdGlvbiwgVmlzaWJsZUVudHJ5RGV0YWlsVHlwZT5cbiAgPigoKSA9PiB7XG4gICAgY29uc3QgbWFwID0gbmV3IE1hcDxOb2RlRGVzdGluYXRpb24sIFZpc2libGVFbnRyeURldGFpbFR5cGU+KCk7XG4gICAgT2JqZWN0LmZyZWV6ZShtYXApO1xuICAgIHJldHVybiBtYXA7XG4gIH0pO1xuXG4gIGNvbnN0IFt2aXNpYmxlUGFnZVJhdGlvcywgc2V0VmlzaWJsZVBhZ2VSYXRpb3NdID0gUmVhY3QudXNlU3RhdGU8XG4gICAgTWFwPG51bWJlciwgVmlzaWJsZUVudHJ5RGV0YWlsVHlwZT5cbiAgPigoKSA9PiBFTVBUWV9OVU1CRVJfVE9fVklTSUJMRV9FTlRSWV9ERVRBSUxfTUFQKTtcblxuICBjb25zdCBpc091dGxpbmVUYXJnZXRWaXNpYmxlID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKGRlc3Q6IE5vZGVEZXN0aW5hdGlvbik6IGJvb2xlYW4gPT4ge1xuICAgICAgcmV0dXJuIHZpc2libGVPdXRsaW5lVGFyZ2V0cy5oYXMoZGVzdCk7XG4gICAgfSxcbiAgICBbdmlzaWJsZU91dGxpbmVUYXJnZXRzXVxuICApO1xuXG4gIGNvbnN0IHNjcm9sbFRvT3V0bGluZVRhcmdldCA9IFJlYWN0LnVzZUNhbGxiYWNrKChkZXN0OiBOb2RlRGVzdGluYXRpb24pOiB2b2lkID0+IHtcbiAgICBzZXRJc091dGxpbmVDbGlja2VkKHRydWUpO1xuICAgIGRvY3VtZW50XG4gICAgICAucXVlcnlTZWxlY3RvcihgW2RhdGEtb3V0bGluZS10YXJnZXQtZGVzdD1cIiR7ZGVzdH1cIl1gKVxuICAgICAgPy5zY3JvbGxJbnRvVmlldyh7IGJlaGF2aW9yOiAnc21vb3RoJyB9KTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IGlzUGFnZVZpc2libGUgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoeyBwYWdlTnVtYmVyLCBwYWdlSW5kZXggfTogUGFnZU51bWJlcik6IGJvb2xlYW4gPT4ge1xuICAgICAgaWYgKHR5cGVvZiBwYWdlSW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICAgIHBhZ2VOdW1iZXIgPSBwYWdlSW5kZXggKyAxO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBwYWdlTnVtYmVyICE9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmlzaWJsZVBhZ2VSYXRpb3MuaGFzKHBhZ2VOdW1iZXIpO1xuICAgIH0sXG4gICAgW3Zpc2libGVQYWdlUmF0aW9zXVxuICApO1xuXG4gIGNvbnN0IHNjcm9sbFRvUGFnZSA9IFJlYWN0LnVzZUNhbGxiYWNrKCh7IHBhZ2VOdW1iZXIsIHBhZ2VJbmRleCB9OiBQYWdlTnVtYmVyKTogdm9pZCA9PiB7XG4gICAgaWYgKHR5cGVvZiBwYWdlTnVtYmVyID09PSAnbnVtYmVyJykge1xuICAgICAgcGFnZUluZGV4ID0gcGFnZU51bWJlciAtIDE7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGFnZUluZGV4ICE9PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkb2N1bWVudFxuICAgICAgLmdldEVsZW1lbnRCeUlkKGdlbmVyYXRlUGFnZUlkRnJvbUluZGV4KHBhZ2VJbmRleCkpXG4gICAgICA/LnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xuICB9LCBbXSk7XG5cbiAgLy8gV2F0Y2ggb3V0bGluZSBub2Rlc1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHJvb3QgPSBzY3JvbGxSb290IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICBjb25zdCBkZXRlY3RvciA9IG5ldyBWaXNpYmxlRW50cmllc0RldGVjdG9yPE5vZGVEZXN0aW5hdGlvbj4oe1xuICAgICAgcm9vdDogcm9vdCxcbiAgICAgIHNldFZpc2libGVFbnRyaWVzOiBzZXRWaXNpYmxlT3V0bGluZU5vZGVzLFxuICAgICAgb25WaXNpYmxlRW50cmllc0NoYW5nZTogKHsgdmlzaWJsZUVudHJpZXMsIGhpZGRlbkVudHJpZXMsIGxhc3RFbnRyaWVzIH0pID0+IHtcbiAgICAgICAgaGlkZGVuRW50cmllcy5tYXAoZW50cnkgPT5cbiAgICAgICAgICBsYXN0RW50cmllcy5kZWxldGUoZW50cnkudGFyZ2V0LmdldEF0dHJpYnV0ZShPVVRMSU5FX0FUVFJJQlVURSkpXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IG5ld0VudHJpZXMgPSBuZXcgTWFwKGxhc3RFbnRyaWVzKTtcbiAgICAgICAgdmlzaWJsZUVudHJpZXMubWFwKGVudHJ5ID0+XG4gICAgICAgICAgbmV3RW50cmllcy5zZXQoZW50cnkudGFyZ2V0LmdldEF0dHJpYnV0ZShPVVRMSU5FX0FUVFJJQlVURSksIHtcbiAgICAgICAgICAgIHJhdGlvOiBlbnRyeS5pbnRlcnNlY3Rpb25SYXRpbyxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogZW50cnkudGltZSxcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gbmV3RW50cmllcztcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgZGV0ZWN0b3Iub2JzZXJ2ZU5vZGVzKE9VVExJTkVfU0VMRUNUT1IpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkZXRlY3Rvci5kZXN0cm95KCk7XG4gICAgfTtcbiAgfSwgW3Njcm9sbFJvb3QsIG9ic2VydmVySW5kZXhdKTtcblxuICAvLyBXYXRjaCBwYWdlc1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHJvb3QgPSBzY3JvbGxSb290IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICBjb25zdCBkZXRlY3RvciA9IG5ldyBWaXNpYmxlRW50cmllc0RldGVjdG9yPG51bWJlcj4oe1xuICAgICAgcm9vdDogcm9vdCxcbiAgICAgIHNldFZpc2libGVFbnRyaWVzOiBzZXRWaXNpYmxlUGFnZVJhdGlvcyxcbiAgICAgIG9uVmlzaWJsZUVudHJpZXNDaGFuZ2U6ICh7IHZpc2libGVFbnRyaWVzLCBoaWRkZW5FbnRyaWVzLCBsYXN0RW50cmllcyB9KSA9PiB7XG4gICAgICAgIGlmIChoaWRkZW5FbnRyaWVzLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnN0IG1heFRpbWUgPSBNYXRoLm1heCguLi5oaWRkZW5FbnRyaWVzLm1hcChlID0+IGUudGltZSkpO1xuICAgICAgICAgIGNvbnN0IGhpZGRlblBhZ2VOdW1zID0gaGlkZGVuRW50cmllcy5tYXAoXG4gICAgICAgICAgICBlID0+IGUudGFyZ2V0Py5nZXRBdHRyaWJ1dGUoUEFHRV9OVU1CRVJfQVRUUklCVVRFKSB8fCAnJ1xuICAgICAgICAgICk7XG5cbiAgICAgICAgICAvLyBkdWUgdG8gdXBwZXIgbGltaXQgb24gaG93IGZhc3QgdGhlIEludGVyc2VjdGlvbiBPYnNlcnZlciBBUEkgY2FuIHNhbXBsZSBhbmQgaG93IGZhc3QgYnJvd3NlcnMgY2FuIHJlbmRlciAoaGFwcGVucyB3aGVuIHVzZXJzIHNjcm9sbCBmYXN0KVxuICAgICAgICAgIC8vIHNvbWV0aW1lcyBlbnRyaWVzIHdpbGwgbm90IGJlIHNpZ25hbGVkIGFzIGhpZGRlbiwgbWVhbmluZyB0aGV5IHNob3VsZCBiZSByZW1vdmVkIGZyb20gbGFzdEVudHJpZXMgYnV0IHdlcmVuJ3RcbiAgICAgICAgICAvLyBzbyBpZiBhbiBlbnRyeSBoYXMgYSB0aW1lc3RhbXAgdGhhdHMgb2xkZXIgdGhlbiBhbiBlbnRyeSB3ZSBhcmUgY3VycmVudGx5IHJlbW92aW5nLCB3ZSBjYW4gYXNzdW1lIGl0cyBcInN0YWxlXCIgYW5kIGRlbGV0ZVxuICAgICAgICAgIC8vIG1vcmUgZGV0YWlscyBhYm91dCB0aGlzIGlzc3VlIGhlcmU6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzYxOTUxMzgwL2ludGVyc2VjdGlvbi1vYnNlcnZlci1mYWlscy1zb21ldGltZXMtd2hlbi1pLXNjcm9sbC1mYXN0XG5cbiAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBsYXN0RW50cmllcy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS50aW1lc3RhbXAgPD0gbWF4VGltZSB8fCBoaWRkZW5QYWdlTnVtcy5pbmNsdWRlcyhTdHJpbmcoa2V5KSkpIHtcbiAgICAgICAgICAgICAgbGFzdEVudHJpZXMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ld0VudHJpZXMgPSBuZXcgTWFwKGxhc3RFbnRyaWVzKTtcbiAgICAgICAgdmlzaWJsZUVudHJpZXMubWFwKGVudHJ5ID0+IHtcbiAgICAgICAgICBuZXdFbnRyaWVzLnNldChwYXJzZUludChlbnRyeS50YXJnZXQ/LmdldEF0dHJpYnV0ZShQQUdFX05VTUJFUl9BVFRSSUJVVEUpIHx8ICcnLCAxMCksIHtcbiAgICAgICAgICAgIHJhdGlvOiBlbnRyeS5pbnRlcnNlY3Rpb25SYXRpbyxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogZW50cnkudGltZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXdFbnRyaWVzO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICBkZXRlY3Rvci5vYnNlcnZlTm9kZXMoUEFHRV9OVU1CRVJfU0VMRUNUT1IpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkZXRlY3Rvci5kZXN0cm95KCk7XG4gICAgfTtcbiAgfSwgW3Njcm9sbFJvb3QsIG9ic2VydmVySW5kZXhdKTtcblxuICAvLyBtYXAgb2YgcGFnZXMgYXQgdGhlIG1vbWVudCB0aGV5IGFyZSBzY3JvbGxlZCBpbnRvIHZpZXcsIHVzZWZ1bCBmb3IgdHJhY2tpbmcgYW5hbHl0aWNzIHN1Y2ggYXMgcGFnZSBpbXByZXNzaW9uc1xuICAvLyBkaWZmZXJlbnQgdGhhbiB0aGUgdmlzaWJsZVBhZ2VSYXRpb3MgaW4gdGhhdCBpdCBvbmx5IHNhdmVzIHRoZSB+aW5pdGlhbH4gcG9pbnQgb2Ygd2hlbiBhIHBhZ2UgY29tZXMgaW50byB2aWV3XG4gIC8vIGl0IGRvZXNuJ3QgdHJhY2sgdGhlIGxpdmUgY2hhbmdlIGluIHJhdGlvcyBhcyB0aGUgcGFnZSByZW1haW5zIGluIHZpZXcgd2hlbiBzY3JvbGxlZFxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHJvb3QgPSBzY3JvbGxSb290IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICBjb25zdCBkZXRlY3RvciA9IG5ldyBWaXNpYmxlRW50cmllc0RldGVjdG9yPG51bWJlcj4oe1xuICAgICAgcm9vdDogcm9vdCxcbiAgICAgIHRocmVzSG9sZDogcGFnZVNjcm9sbGVkSW50b1ZpZXdUaHJlc2hvbGQsXG4gICAgICBzZXRWaXNpYmxlRW50cmllczogc2V0UGFnZXNTY3JvbGxlZEludG9WaWV3LFxuICAgICAgb25WaXNpYmxlRW50cmllc0NoYW5nZTogKHsgdmlzaWJsZUVudHJpZXMgfSkgPT4ge1xuICAgICAgICBjb25zdCBuZXdFbnRyaWVzID0gbmV3IE1hcCgpO1xuICAgICAgICB2aXNpYmxlRW50cmllcy5tYXAoZW50cnkgPT4ge1xuICAgICAgICAgIG5ld0VudHJpZXMuc2V0KFxuICAgICAgICAgICAgcGFyc2VJbnQoZW50cnkudGFyZ2V0Py5nZXRBdHRyaWJ1dGUoUEFHRV9OVU1CRVJfQVRUUklCVVRFKSB8fCAnJywgMTApLFxuICAgICAgICAgICAgZW50cnkuaW50ZXJzZWN0aW9uUmF0aW9cbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ld0VudHJpZXM7XG4gICAgICB9LFxuICAgIH0pO1xuICAgIGRldGVjdG9yLm9ic2VydmVOb2RlcyhQQUdFX05VTUJFUl9TRUxFQ1RPUik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRldGVjdG9yLmRlc3Ryb3koKTtcbiAgICB9O1xuICB9LCBbc2Nyb2xsUm9vdCwgb2JzZXJ2ZXJJbmRleF0pO1xuXG4gIC8vIGNhbGN1bGF0ZXMgYSBuZXcgc2Nyb2xsIHBvc2l0aW9uIGFmdGVyIHpvb21pbmcgaW4vb3V0IHNvIHVzZXIgZG9lc250IGxvc2UgdGhlaXIgcG9zaXRpb25cbiAgY29uc3QgdXBkYXRlU2Nyb2xsUG9zaXRpb24gPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoem9vbU11bHRpcGxpZXI6IG51bWJlcik6IHZvaWQgPT4ge1xuICAgICAgY29uc3Qgcm9vdCA9IHNjcm9sbFJvb3QgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgaWYgKCFyb290KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5ld1Njcm9sbFRvcCA9IE1hdGguZmxvb3Iocm9vdC5zY3JvbGxUb3AgKiB6b29tTXVsdGlwbGllcik7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcm9vdC5zY3JvbGxUb3AgPSBuZXdTY3JvbGxUb3A7XG4gICAgICB9LCAwKTtcbiAgICB9LFxuICAgIFtzY3JvbGxSb290XVxuICApO1xuXG4gIHJldHVybiB7XG4gICAgaXNPdXRsaW5lVGFyZ2V0VmlzaWJsZSxcbiAgICBpc1BhZ2VWaXNpYmxlLFxuICAgIHNjcm9sbERpcmVjdGlvbixcbiAgICB2aXNpYmxlT3V0bGluZVRhcmdldHMsXG4gICAgdmlzaWJsZVBhZ2VSYXRpb3MsXG4gICAgcmVzZXRTY3JvbGxPYnNlcnZlcnMsXG4gICAgc2Nyb2xsUm9vdCxcbiAgICBzZXRTY3JvbGxSb290LFxuICAgIHNjcm9sbFRvT3V0bGluZVRhcmdldCxcbiAgICBzZXRTY3JvbGxUaHJlc2hvbGQsXG4gICAgc2Nyb2xsVG9QYWdlLFxuICAgIHVwZGF0ZVNjcm9sbFBvc2l0aW9uLFxuICAgIHNldElzT3V0bGluZUNsaWNrZWQsXG4gICAgc2Nyb2xsVGhyZXNob2xkUmVhY2hlZEluRGlyZWN0aW9uLFxuICAgIGlzQXRUb3AsXG4gICAgaXNPdXRsaW5lQ2xpY2tlZCxcbiAgICBwYWdlc1Njcm9sbGVkSW50b1ZpZXcsXG4gICAgc2V0UGFnZVNjcm9sbGVkSW50b1ZpZXdUaHJlc2hvbGQsXG4gIH07XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAnLi4vY29tcG9uZW50cy90eXBlcy91dGlscyc7XG5pbXBvcnQgeyBsb2dQcm92aWRlcldhcm5pbmcgfSBmcm9tICcuLi91dGlscy9wcm92aWRlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVVpQ29udGV4dCB7XG4gIGVycm9yTWVzc2FnZTogTnVsbGFibGU8c3RyaW5nPjtcbiAgaXNMb2FkaW5nOiBib29sZWFuO1xuICBpc1Nob3dpbmdIaWdobGlnaHRPdmVybGF5OiBib29sZWFuO1xuICBpc1Nob3dpbmdPdXRsaW5lOiBib29sZWFuO1xuICBpc1Nob3dpbmdUZXh0SGlnaGxpZ2h0OiBib29sZWFuO1xuICBpc1Nob3dpbmdUaHVtYm5haWw6IGJvb2xlYW47XG4gIGlzU2hvd2luZ0ludGVyYWN0OiBib29sZWFuO1xuICBzZXRFcnJvck1lc3NhZ2U6IChlcnJvck1lc3NhZ2U6IE51bGxhYmxlPHN0cmluZz4pID0+IHZvaWQ7XG4gIHNldElzTG9hZGluZzogKGlzTG9hZGluZzogYm9vbGVhbikgPT4gdm9pZDtcbiAgc2V0SXNTaG93aW5nSGlnaGxpZ2h0T3ZlcmxheTogKGlzU2hvd2luZ0hpZ2hsaWdodE92ZXJsYXk6IGJvb2xlYW4pID0+IHZvaWQ7XG4gIHNldElzU2hvd2luZ091dGxpbmU6IChpc1Nob3dpbmdPdXRsaW5lOiBib29sZWFuKSA9PiB2b2lkO1xuICBzZXRJc1Nob3dpbmdUZXh0SGlnaGxpZ2h0OiAoaXNTaG93aW5nVGV4dEhpZ2hsaWdodDogYm9vbGVhbikgPT4gdm9pZDtcbiAgc2V0SXNTaG93aW5nVGh1bWJuYWlsOiAoaXNTaG93aW5nVGh1bWJuYWlsOiBib29sZWFuKSA9PiB2b2lkO1xuICBzZXRJc1Nob3dpbmdJbnRlcmFjdDogKGlzU2hvd2luZ0ludGVyYWN0OiBib29sZWFuKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY29uc3QgVWlDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxJVWlDb250ZXh0Pih7XG4gIGVycm9yTWVzc2FnZTogbnVsbCxcbiAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgaXNTaG93aW5nSGlnaGxpZ2h0T3ZlcmxheTogZmFsc2UsXG4gIGlzU2hvd2luZ091dGxpbmU6IGZhbHNlLFxuICBpc1Nob3dpbmdUZXh0SGlnaGxpZ2h0OiBmYWxzZSxcbiAgaXNTaG93aW5nVGh1bWJuYWlsOiBmYWxzZSxcbiAgaXNTaG93aW5nSW50ZXJhY3Q6IGZhbHNlLFxuICBzZXRFcnJvck1lc3NhZ2U6IGVycm9yTWVzc2FnZSA9PiB7XG4gICAgbG9nUHJvdmlkZXJXYXJuaW5nKGBzZXRFcnJvck1lc3NhZ2UoJHtlcnJvck1lc3NhZ2V9KWAsICdVaUNvbnRleHQnKTtcbiAgfSxcbiAgc2V0SXNTaG93aW5nT3V0bGluZTogaXNTaG93aW5nT3V0bGluZSA9PiB7XG4gICAgbG9nUHJvdmlkZXJXYXJuaW5nKGBzZXRJc1Nob3dpbmdPdXRsaW5lKCR7aXNTaG93aW5nT3V0bGluZX0pYCwgJ1VpQ29udGV4dCcpO1xuICB9LFxuICBzZXRJc1Nob3dpbmdJbnRlcmFjdDogaXNTaG93aW5nSW50ZXJhY3QgPT4ge1xuICAgIGxvZ1Byb3ZpZGVyV2FybmluZyhgc2V0SXNTaG93aW5nSW50ZXJhY3QoJHtpc1Nob3dpbmdJbnRlcmFjdH0pYCwgJ1VpQ29udGV4dCcpO1xuICB9LFxuICBzZXRJc0xvYWRpbmc6IGlzTG9hZGluZyA9PiB7XG4gICAgbG9nUHJvdmlkZXJXYXJuaW5nKGBzZXRJc0xvYWRpbmcoJHtpc0xvYWRpbmd9KWAsICdVaUNvbnRleHQnKTtcbiAgfSxcbiAgc2V0SXNTaG93aW5nSGlnaGxpZ2h0T3ZlcmxheTogaXNTaG93aW5nSGlnaGxpZ2h0T3ZlcmxheSA9PiB7XG4gICAgbG9nUHJvdmlkZXJXYXJuaW5nKGBzZXRJc1Nob3dpbmdIaWdobGlnaHRPdmVybGF5KCR7aXNTaG93aW5nSGlnaGxpZ2h0T3ZlcmxheX0pYCwgJ1VpQ29udGV4dCcpO1xuICB9LFxuICBzZXRJc1Nob3dpbmdUZXh0SGlnaGxpZ2h0OiBpc1Nob3dpbmdUZXh0SGlnaGxpZ2h0ID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYHNldElzU2hvd2luZ1RleHRIaWdobGlnaHQoJHtpc1Nob3dpbmdUZXh0SGlnaGxpZ2h0fSlgLCAnVWlDb250ZXh0Jyk7XG4gIH0sXG4gIHNldElzU2hvd2luZ1RodW1ibmFpbDogaXNTaG93aW5nVGh1bWJuYWlsID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYHNldElzU2hvd2luZ1RodW1ibmFpbCgke2lzU2hvd2luZ1RodW1ibmFpbH0pYCwgJ1VpQ29udGV4dCcpO1xuICB9LFxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VVaUNvbnRleHRQcm9wcygpOiBJVWlDb250ZXh0IHtcbiAgY29uc3QgW2Vycm9yTWVzc2FnZSwgc2V0RXJyb3JNZXNzYWdlXSA9IFJlYWN0LnVzZVN0YXRlPE51bGxhYmxlPHN0cmluZz4+KG51bGwpO1xuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4odHJ1ZSk7XG4gIGNvbnN0IFtpc1Nob3dpbmdIaWdobGlnaHRPdmVybGF5LCBzZXRJc1Nob3dpbmdIaWdobGlnaHRPdmVybGF5XSA9IFJlYWN0LnVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcbiAgY29uc3QgW2lzU2hvd2luZ091dGxpbmUsIHNldElzU2hvd2luZ091dGxpbmVdID0gUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuICBjb25zdCBbaXNTaG93aW5nVGV4dEhpZ2hsaWdodCwgc2V0SXNTaG93aW5nVGV4dEhpZ2hsaWdodF0gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG4gIGNvbnN0IFtpc1Nob3dpbmdUaHVtYm5haWwsIHNldElzU2hvd2luZ1RodW1ibmFpbF0gPSBSZWFjdC51c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG4gIGNvbnN0IFtpc1Nob3dpbmdJbnRlcmFjdCwgc2V0SXNTaG93aW5nSW50ZXJhY3RdID0gUmVhY3QudXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuXG4gIHJldHVybiB7XG4gICAgZXJyb3JNZXNzYWdlLFxuICAgIGlzTG9hZGluZyxcbiAgICBpc1Nob3dpbmdIaWdobGlnaHRPdmVybGF5LFxuICAgIGlzU2hvd2luZ091dGxpbmUsXG4gICAgaXNTaG93aW5nVGV4dEhpZ2hsaWdodCxcbiAgICBpc1Nob3dpbmdUaHVtYm5haWwsXG4gICAgaXNTaG93aW5nSW50ZXJhY3QsXG4gICAgc2V0RXJyb3JNZXNzYWdlLFxuICAgIHNldElzTG9hZGluZyxcbiAgICBzZXRJc1Nob3dpbmdIaWdobGlnaHRPdmVybGF5LFxuICAgIHNldElzU2hvd2luZ091dGxpbmUsXG4gICAgc2V0SXNTaG93aW5nVGV4dEhpZ2hsaWdodCxcbiAgICBzZXRJc1Nob3dpbmdUaHVtYm5haWwsXG4gICAgc2V0SXNTaG93aW5nSW50ZXJhY3QsXG4gIH07XG59XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGZ1bmN0aW9uIGdldEVycm9yTWVzc2FnZShlcnJvcjogYW55KTogc3RyaW5nIHtcbiAgaWYgKCFlcnJvcikge1xuICAgIHJldHVybiAnVW5rbm93biBlcnJvcic7XG4gIH1cbiAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cbiAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4gZXJyb3IubWVzc2FnZTtcbiAgfVxuICBpZiAodHlwZW9mIGVycm9yLmVycm9yID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBlcnJvci5lcnJvcjtcbiAgfVxuICByZXR1cm4gZXJyb3IudG9TdHJpbmcoKTtcbn1cbiIsImltcG9ydCB7IHBkZmpzIH0gZnJvbSAncmVhY3QtcGRmJztcblxuLy8gU2V0IFBERmpzIHdvcmtlciBzb3VyY2Ugb3IgZWxzZSBQREYgd2lsbCBub3QgbG9hZCB3aGVuIHRoaXMgbGlicmFyeSBpcyBpbXBvcnRlZCBhcyBhIHBhY2thZ2UuXG5leHBvcnQgZnVuY3Rpb24gaW5pdFBkZldvcmtlcigpOiB2b2lkIHtcbiAgcGRmanMuR2xvYmFsV29ya2VyT3B0aW9ucy53b3JrZXJTcmMgPSBgLy9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvcGRmLmpzLyR7cGRmanMudmVyc2lvbn0vcGRmLndvcmtlci5taW4uanNgO1xufVxuIiwiZXhwb3J0IGNvbnN0IFJFTkRFUl9UWVBFID0ge1xuICBNVUxUSV9DQU5WQVM6ICdtdWx0aS1jYW52YXMnLFxuICBTSU5HTEVfQ0FOVkFTOiAnc2luZ2xlLWNhbnZhcycsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgdHlwZSBSZW5kZXJUeXBlID0gdHlwZW9mIFJFTkRFUl9UWVBFW2tleW9mIHR5cGVvZiBSRU5ERVJfVFlQRV07XG5cbmV4cG9ydCB0eXBlIFJlbmRlck1vZGUgPSAnY2FudmFzJyB8ICdub25lJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlbmRlck1vZGUocmVuZGVyVHlwZTogUmVuZGVyVHlwZSk6IFJlbmRlck1vZGUge1xuICBzd2l0Y2ggKHJlbmRlclR5cGUpIHtcbiAgICBjYXNlIFJFTkRFUl9UWVBFLlNJTkdMRV9DQU5WQVM6XG4gICAgICByZXR1cm4gJ25vbmUnO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJ2NhbnZhcyc7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENsYXNzTmFtZVN1ZmZpeEZyb21SZW5kZXJUeXBlKHJlbmRlclR5cGU6IFJlbmRlclR5cGUpOiBzdHJpbmcge1xuICBzd2l0Y2ggKHJlbmRlclR5cGUpIHtcbiAgICBjYXNlIFJFTkRFUl9UWVBFLlNJTkdMRV9DQU5WQVM6XG4gICAgICByZXR1cm4gJ3NpbmdsZS1jYW52YXMnO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJ211bHRpLWNhbnZhcyc7XG4gIH1cbn1cbiIsImltcG9ydCB7IERpbWVuc2lvbnMgfSBmcm9tICcuLi9jb21wb25lbnRzL3R5cGVzL2JvdW5kaW5nQm94JztcblxuLy8gRGF0YSBmcm9tIHJlYWN0LXBkZi9wZGZqcyB0aGF0IHdlIG5lZWQgdG8gY29tcHV0ZSB0aGUgcGl4ZWwgc2l6ZSBvZiB0aGUgUERGJ3MgcGFnZShzKS5cbmV4cG9ydCBpbnRlcmZhY2UgSVBERlBhZ2VQcm94eSB7XG4gIHVzZXJVbml0OiBudW1iZXI7IC8vIHRoZSBkZWZhdWx0IHNpemUgb2YgdW5pdHMgaW4gMS83Mm5kcyBvZiBhbiBpbmNoXG4gIHZpZXc6IEFycmF5PG51bWJlcj47IC8vIGZvcm1hdDogWyB0b3AgbGVmdCB4IGNvb3JkaW5hdGUsIHRvcCBsZWZ0IHkgY29vcmRpbmF0ZSwgYm90dG9tIHJpZ2h0IHgsIGJvdHRvbSByaWdodCB5XVxufVxuXG4vLyBXZSBhc3N1bWUgOTYgRFBJIGZvciBkaXNwbGF5XG4vLyBUT0RPOiBUaGVyZSBhcmUgbW9yZSBhY2N1cmF0ZSB3YXlzIHRvIGRvIHRoaXMsIGJ1dCB0aGlzIGlzIHdoYXQgU2Nob2xhclBoaSBkb2VzIG5vd1xuY29uc3QgRFBJID0gOTY7XG5cbi8vIFBERiB1bml0cyBhcmUgaW4gMS83Mm5kcyBvZiBhbiBpbmNoXG5jb25zdCBVU0VSX1VOSVRfREVOT01JTkFUT1IgPSA3MjtcblxuLyoqXG4gKiBHaXZlbiBhIFBERlBhZ2VQcm94eSwgY2FsY3VsYXRlcyB0aGUgc2NyZWVuIHBpeGVsIHNpemUgb2YgdGhlIFBERiBwYWdlIGF0IDEwMCUgc2NhbGVcbiAqIEBwYXJhbSBwYWdlIFRoZSBQREZQYWdlUHJveHkgdG8gY2FsY3VsYXRlIHNpemUgZm9yXG4gKiBAcmV0dXJucyBQaXhlbCBzaXplIG9mIGEgcGFnZSBhdCAxMDAlIHNjYWxlIGFzc3VtaW5nIDk2RFBJIGRpc3BsYXlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVQYWdlRGltZW5zaW9ucyhwYWdlOiBJUERGUGFnZVByb3h5KTogRGltZW5zaW9ucyB7XG4gIGNvbnN0IFtsZWZ0UHgsIHRvcFB4LCByaWdodFB4LCBib3R0b21QeF0gPSBwYWdlLnZpZXc7XG4gIGNvbnN0IFBQSSA9IChwYWdlLnVzZXJVbml0IC8gVVNFUl9VTklUX0RFTk9NSU5BVE9SKSAqIERQSTtcblxuICByZXR1cm4ge1xuICAgIGhlaWdodDogKGJvdHRvbVB4IC0gdG9wUHgpICogUFBJLFxuICAgIHdpZHRoOiAocmlnaHRQeCAtIGxlZnRQeCkgKiBQUEksXG4gIH07XG59XG4iLCJpbXBvcnQgeyBQYWdlUmVmZXJlbmNlIH0gZnJvbSAnLi9wYWdlJztcblxuZXhwb3J0IHR5cGUgRGVzdGluYXRpb24gPSB7XG4gIGRlc3Q6IHN0cmluZztcbiAgcGFnZUluZGV4OiBudW1iZXI7XG4gIHBhZ2VOdW1iZXI6IG51bWJlcjtcbn07XG5cbi8qKlxuICogVGhpcyBjbGFzcyBpcyB0aGUgZGVmaW5pdGlvbiBvZiB0aGUgZmlyc3QgaXRlbSB3aGVuIERlc3RpbmF0aW9uIGlzIHJldHVybmVkIGFzIGFuIGFycmF5LlxuICogSXQgaXMgY3JlYXRlZCBiYXNlZCBvbiB0aGUgc2FtZSBjbGFzcyBpbiAncmVhY3QtcGRmJyBsaWJyYXJ5OlxuICogaHR0cHM6Ly9naXRodWIuY29tL3dvanRla21hai9yZWFjdC1wZGYvYmxvYi9jYTQ0NTNmMTIzYWY1MWUyZmFlZDM5YThhNjI4MDA5MDEwMzA0NTlhL3NyYy9SZWYuanNcbiAqL1xuZXhwb3J0IGNsYXNzIFJlZiBpbXBsZW1lbnRzIFBhZ2VSZWZlcmVuY2Uge1xuICBudW06IG51bWJlcjtcbiAgZ2VuOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoeyBudW0sIGdlbiB9OiBQYWdlUmVmZXJlbmNlKSB7XG4gICAgdGhpcy5udW0gPSBudW07XG4gICAgdGhpcy5nZW4gPSBnZW47XG4gIH1cblxuICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmdlbiAhPT0gMCA/IGAke3RoaXMubnVtfVIke3RoaXMuZ2VufWAgOiBgJHt0aGlzLm51bX1SYDtcbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRG9jdW1lbnQsIERvY3VtZW50UHJvcHMsIHBkZmpzIH0gZnJvbSAncmVhY3QtcGRmJztcblxuaW1wb3J0IHsgRG9jdW1lbnRDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9Eb2N1bWVudENvbnRleHQnO1xuaW1wb3J0IHsgU2Nyb2xsQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvU2Nyb2xsQ29udGV4dCc7XG5pbXBvcnQgeyBUcmFuc2Zvcm1Db250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9UcmFuc2Zvcm1Db250ZXh0JztcbmltcG9ydCB7IFVpQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvVWlDb250ZXh0JztcbmltcG9ydCB7IGdldEVycm9yTWVzc2FnZSB9IGZyb20gJy4uL3V0aWxzL2Vycm9yTWVzc2FnZSc7XG5pbXBvcnQgeyBpbml0UGRmV29ya2VyIH0gZnJvbSAnLi4vdXRpbHMvcGRmV29ya2VyJztcbmltcG9ydCB7IGdldFJlbmRlck1vZGUsIFJlbmRlclR5cGUgfSBmcm9tICcuLi91dGlscy9yZWFkZXItdXRpbHMnO1xuaW1wb3J0IHsgY29tcHV0ZVBhZ2VEaW1lbnNpb25zLCBJUERGUGFnZVByb3h5IH0gZnJvbSAnLi4vdXRpbHMvc2NhbGUnO1xuaW1wb3J0IHsgc2Nyb2xsVG9Qb3NpdGlvbiB9IGZyb20gJy4uL3V0aWxzL3Njcm9sbCc7XG5pbXBvcnQgeyBEZXN0aW5hdGlvbiwgUmVmIH0gZnJvbSAnLi90eXBlcy9kZXN0aW5hdGlvbic7XG5cbmV4cG9ydCB0eXBlIFByb3BzID0ge1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgcmVuZGVyVHlwZTogUmVuZGVyVHlwZTtcbn0gJiBEb2N1bWVudFByb3BzO1xuXG5leHBvcnQgY29uc3QgRG9jdW1lbnRXcmFwcGVyOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoe1xuICBjaGlsZHJlbixcbiAgcmVuZGVyVHlwZSxcbiAgLi4uZXh0cmFQcm9wc1xufTogUHJvcHMpID0+IHtcbiAgaW5pdFBkZldvcmtlcigpO1xuXG4gIGNvbnN0IHsgcGRmRG9jUHJveHksIHNldE51bVBhZ2VzLCBzZXROdW1QYWdlc0xvYWRlZCwgc2V0UGFnZURpbWVuc2lvbnMsIHNldFBkZkRvY1Byb3h5IH0gPVxuICAgIFJlYWN0LnVzZUNvbnRleHQoRG9jdW1lbnRDb250ZXh0KTtcbiAgY29uc3QgeyByZXNldFNjcm9sbE9ic2VydmVycywgdXBkYXRlU2Nyb2xsUG9zaXRpb24gfSA9IFJlYWN0LnVzZUNvbnRleHQoU2Nyb2xsQ29udGV4dCk7XG4gIGNvbnN0IHsgcm90YXRpb24sIHNjYWxlIH0gPSBSZWFjdC51c2VDb250ZXh0KFRyYW5zZm9ybUNvbnRleHQpO1xuICBjb25zdCB7IHNldEVycm9yTWVzc2FnZSwgc2V0SXNMb2FkaW5nIH0gPSBSZWFjdC51c2VDb250ZXh0KFVpQ29udGV4dCk7XG4gIGNvbnN0IFtsYXN0U2NhbGUsIHNldExhc3RTY2FsZV0gPSBSZWFjdC51c2VTdGF0ZSgxKTsgLy8gYXNzdW1pbmcgdGhlIHNjYWxlIGRlZmF1bHRzIHRvIDEwMCVcblxuICBmdW5jdGlvbiBnZXRGaXJzdFBhZ2UocGRmRG9jOiBwZGZqcy5QREZEb2N1bWVudFByb3h5KTogUHJvbWlzZTxJUERGUGFnZVByb3h5PiB7XG4gICAgLy8gZ2V0UGFnZSB1c2VzIDEtaW5kZXhlZCBwYWdlTnVtYmVyLCBub3QgMC1pbmRleGVkIHBhZ2VJbmRleFxuICAgIHJldHVybiBwZGZEb2MuZ2V0UGFnZSgxKTtcbiAgfVxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmVzZXRTY3JvbGxPYnNlcnZlcnMoKTtcbiAgfSwgW10pO1xuXG4gIC8vIGFmdGVyIHNjYWxlIGNoYW5nZXMsIHVwZGF0ZSBzY3JvbGwgcG9zaXRpb24gc28gdGhlIHVzZXIgc3RheXMgbG9va2luZyBhdCB0aGUgc2FtZSBwb3NpdGlvbiBvZiB0aGUgcGFwZXJcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoc2NhbGUgPT09IGxhc3RTY2FsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB6b29tTXVsdGlwbGllciA9IHNjYWxlIC8gbGFzdFNjYWxlO1xuICAgIHVwZGF0ZVNjcm9sbFBvc2l0aW9uKHpvb21NdWx0aXBsaWVyKTtcbiAgICBzZXRMYXN0U2NhbGUoc2NhbGUpO1xuICB9LCBbc2NhbGUsIHVwZGF0ZVNjcm9sbFBvc2l0aW9uXSk7XG5cbiAgY29uc3Qgb25QZGZMb2FkU3VjY2VzcyA9IFJlYWN0LnVzZUNhbGxiYWNrKChwZGZEb2M6IHBkZmpzLlBERkRvY3VtZW50UHJveHkpOiB2b2lkID0+IHtcbiAgICBzZXROdW1QYWdlc0xvYWRlZCgwKTtcbiAgICBzZXROdW1QYWdlcyhwZGZEb2MubnVtUGFnZXMpO1xuICAgIGdldEZpcnN0UGFnZShwZGZEb2MpXG4gICAgICAudGhlbihwYWdlID0+IHtcbiAgICAgICAgc2V0UGFnZURpbWVuc2lvbnMoY29tcHV0ZVBhZ2VEaW1lbnNpb25zKHBhZ2UpKTtcbiAgICAgICAgc2V0RXJyb3JNZXNzYWdlKG51bGwpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIHNldEVycm9yTWVzc2FnZShnZXRFcnJvck1lc3NhZ2UoZXJyb3IpKTtcbiAgICAgIH0pXG4gICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgICB9KTtcblxuICAgIGlmICghcGRmRG9jUHJveHkpIHtcbiAgICAgIHNldFBkZkRvY1Byb3h5KHBkZkRvYyk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgY29uc3Qgb25Tb3VyY2VFcnJvciA9IFJlYWN0LnVzZUNhbGxiYWNrKChlcnJvcjogdW5rbm93bik6IHZvaWQgPT4ge1xuICAgIHNldEVycm9yTWVzc2FnZShnZXRFcnJvck1lc3NhZ2UoZXJyb3IpKTtcbiAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICB9LCBbXSk7XG5cbiAgY29uc3Qgb25QZGZMb2FkRXJyb3IgPSBSZWFjdC51c2VDYWxsYmFjaygoZXJyb3I6IHVua25vd24pOiB2b2lkID0+IHtcbiAgICBzZXRFcnJvck1lc3NhZ2UoZ2V0RXJyb3JNZXNzYWdlKGVycm9yKSk7XG4gICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IG9uSXRlbUNsaWNrZWQgPSAocGFyYW06IERlc3RpbmF0aW9uKTogdm9pZCA9PiB7XG4gICAgaWYgKCFwZGZEb2NQcm94eSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNjcm9sbCB0byB0aGUgZGVzdGluYXRpb24gb2YgdGhlIGl0ZW1cbiAgICBwZGZEb2NQcm94eS5nZXREZXN0aW5hdGlvbihwYXJhbS5kZXN0KS50aGVuKGRlc3RBcnJheSA9PiB7XG4gICAgICBpZiAoIWRlc3RBcnJheSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFtyZWYsICwgLCBib3R0b21Qb2ludHNdID0gZGVzdEFycmF5O1xuICAgICAgcGRmRG9jUHJveHkuZ2V0UGFnZUluZGV4KG5ldyBSZWYocmVmKSkudGhlbihyZWZJbmZvID0+IHtcbiAgICAgICAgc2Nyb2xsVG9Qb3NpdGlvbihwYXJzZUludChyZWZJbmZvLnRvU3RyaW5nKCkpLCAwLCBib3R0b21Qb2ludHMsIHJvdGF0aW9uKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPERvY3VtZW50XG4gICAgICBvcHRpb25zPXt7IGNNYXBVcmw6ICdjbWFwcy8nLCBjTWFwUGFja2VkOiB0cnVlIH19XG4gICAgICBvblNvdXJjZUVycm9yPXtvblNvdXJjZUVycm9yfVxuICAgICAgb25Mb2FkRXJyb3I9e29uUGRmTG9hZEVycm9yfVxuICAgICAgb25Mb2FkU3VjY2Vzcz17b25QZGZMb2FkU3VjY2Vzc31cbiAgICAgIGV4dGVybmFsTGlua1RhcmdldD1cIl9ibGFua1wiXG4gICAgICByZW5kZXJNb2RlPXtnZXRSZW5kZXJNb2RlKHJlbmRlclR5cGUpfVxuICAgICAgLy8gQHRzLWlnbm9yZTogdGhlIGFyZ3VtZW50cyBzaG91bGQgYmUgeyBkZXN0LCBwYWdlSW5kZXgsIHBhZ2VOdW1iZXIgfVxuICAgICAgLy8gQHR5cGVzL3JlYWN0LXBkZiBoYXNuJ3QgdXBkYXRlZCB0aGUgZnVuY3Rpb24gc2lnbmF0dXJlXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vRGVmaW5pdGVseVR5cGVkL0RlZmluaXRlbHlUeXBlZC9ibG9iL2Q3M2ViNjUyZTBiYThmODkzOTVhMGVmMmJhNjljZjFlNjQwY2U1YmUvdHlwZXMvcmVhY3QtcGRmL2Rpc3QvRG9jdW1lbnQuZC50cyNMNzJcbiAgICAgIG9uSXRlbUNsaWNrPXtvbkl0ZW1DbGlja2VkfVxuICAgICAgey4uLmV4dHJhUHJvcHN9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvRG9jdW1lbnQ+XG4gICk7XG59O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9IHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgcGRmVXJsOiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIEhUTUwgYW5jaG9yIHRhZyBhbGxvd3MgeW91IHRvIGRvd25sb2FkIGEgZmlsZSBmcm9tIHRoZSBzYW1lIG9yaWdpbi5cbiAqIFRoaXMgaXMgYSB3b3JrYXJvdW5kIHRvIGRvd25sb2FkIGEgZmlsZSBzZXJ2ZWQgZnJvbSBhIGRpZmZlcmVudCBvcmlnaW5cbiAqL1xuZXhwb3J0IGNvbnN0IERvd25sb2FkQnV0dG9uOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoe1xuICBwZGZVcmwsXG4gIGNoaWxkcmVuLFxuICBjbGFzc05hbWUsXG4gIC4uLmV4dHJhUHJvcHNcbn06IFByb3BzKSA9PiB7XG4gIGNvbnN0IFtmZXRjaGluZywgc2V0RmV0Y2hpbmddID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IGRvd25sb2FkID0gKCkgPT4ge1xuICAgIHNldEZldGNoaW5nKHRydWUpO1xuXG4gICAgZmV0Y2gocGRmVXJsKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYmxvYigpKVxuICAgICAgLnRoZW4oYmxvYiA9PiB7XG4gICAgICAgIHNldEZldGNoaW5nKGZhbHNlKTtcbiAgICAgICAgY29uc3QgYmxvYlVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgIGEuaHJlZiA9IGJsb2JVUkw7XG4gICAgICAgIGEuZG93bmxvYWQgPSBwZGZVcmwuc3BsaXQoJy8nKS5wb3AoKSB8fCBwZGZVcmw7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XG4gICAgICAgIGEuY2xpY2soKTtcbiAgICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGJ1dHRvblxuICAgICAgZGlzYWJsZWQ9e2ZldGNoaW5nfVxuICAgICAgb25DbGljaz17KCkgPT4gZG93bmxvYWQoKX1cbiAgICAgIGFyaWEtbGFiZWw9XCJEb3dubG9hZCBQREZcIlxuICAgICAgY2xhc3NOYW1lPXtgcGRmLXJlYWRlcl9fZG93bmxvYWQtYnRuICR7Y2xhc3NOYW1lfWB9XG4gICAgICB7Li4uZXh0cmFQcm9wc30+XG4gICAgICB7Y2hpbGRyZW4gPyBjaGlsZHJlbiA6ICdEb3dubG9hZCd9XG4gICAgPC9idXR0b24+XG4gICk7XG59O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBEb2N1bWVudENvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L0RvY3VtZW50Q29udGV4dCc7XG5pbXBvcnQgeyBUcmFuc2Zvcm1Db250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9UcmFuc2Zvcm1Db250ZXh0JztcbmltcG9ydCB7IGNvbXB1dGVCb3VuZGluZ0JveFN0eWxlLCBjb21wdXRlUGFnZVN0eWxlIH0gZnJvbSAnLi4vdXRpbHMvc3R5bGUnO1xuaW1wb3J0IHsgUHJvcHMgYXMgQm91bmRpbmdCb3hQcm9wcyB9IGZyb20gJy4vQm91bmRpbmdCb3gnO1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9IHtcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdEVsZW1lbnQ8Qm91bmRpbmdCb3hQcm9wcz4gfCBBcnJheTxSZWFjdC5SZWFjdEVsZW1lbnQ8Qm91bmRpbmdCb3hQcm9wcz4+O1xuICBwYWdlSW5kZXg6IG51bWJlcjtcbn07XG5cbmV4cG9ydCBjb25zdCBIaWdobGlnaHRPdmVybGF5OiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoe1xuICBjaGlsZHJlbixcbiAgcGFnZUluZGV4LFxuICAuLi5leHRyYVByb3BzXG59OiBQcm9wcykgPT4ge1xuICBjb25zdCB7IHBhZ2VEaW1lbnNpb25zIH0gPSBSZWFjdC51c2VDb250ZXh0KERvY3VtZW50Q29udGV4dCk7XG4gIGNvbnN0IHsgcm90YXRpb24sIHNjYWxlIH0gPSBSZWFjdC51c2VDb250ZXh0KFRyYW5zZm9ybUNvbnRleHQpO1xuICBjb25zdCBtYXNrSWQgPSBgaGlnaGxpZ2h0LW92ZXJsYXktbWFzay0ke3BhZ2VJbmRleH1gO1xuXG4gIGNvbnN0IGdldFBhZ2VTdHlsZSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICByZXR1cm4gY29tcHV0ZVBhZ2VTdHlsZShwYWdlRGltZW5zaW9ucywgcm90YXRpb24sIHNjYWxlKTtcbiAgfSwgW3BhZ2VEaW1lbnNpb25zLCByb3RhdGlvbiwgc2NhbGVdKTtcblxuICBjb25zdCBnZXRVbm1hc2tlZEFyZWEgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoXG4gICAgICBib3VuZGluZ0JveGVzOlxuICAgICAgICB8IFJlYWN0LlJlYWN0RWxlbWVudDxCb3VuZGluZ0JveFByb3BzPlxuICAgICAgICB8IEFycmF5PFJlYWN0LlJlYWN0RWxlbWVudDxCb3VuZGluZ0JveFByb3BzPj5cbiAgICApID0+IHtcbiAgICAgIGNvbnN0IGJveGVzID0gQXJyYXkuaXNBcnJheShib3VuZGluZ0JveGVzKSA/IGJvdW5kaW5nQm94ZXMgOiBbYm91bmRpbmdCb3hlc107XG4gICAgICByZXR1cm4gYm94ZXMubWFwKChib3gsIGkpID0+IHtcbiAgICAgICAgY29uc3QgYm94U3R5bGUgPSBjb21wdXRlQm91bmRpbmdCb3hTdHlsZShib3gucHJvcHMsIHBhZ2VEaW1lbnNpb25zLCByb3RhdGlvbiwgc2NhbGUpO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxyZWN0IHN0eWxlPXtib3hTdHlsZX0geD17Ym94U3R5bGUubGVmdH0geT17Ym94U3R5bGUudG9wfSBrZXk9e2l9IGZpbGw9XCJibGFja1wiPjwvcmVjdD5cbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgW3BhZ2VEaW1lbnNpb25zLCByb3RhdGlvbiwgc2NhbGVdXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInBkZi1yZWFkZXJfX3BhZ2UtaGlnaGxpZ2h0LW92ZXJsYXlcIiBzdHlsZT17Z2V0UGFnZVN0eWxlKCl9IHsuLi5leHRyYVByb3BzfT5cbiAgICAgIDxzdmcgY2xhc3NOYW1lPVwicGFnZS1tYXNrXCIgc3R5bGU9e2dldFBhZ2VTdHlsZSgpfT5cbiAgICAgICAgPG1hc2sgaWQ9e21hc2tJZH0+XG4gICAgICAgICAgPHJlY3Qgc3R5bGU9e2dldFBhZ2VTdHlsZSgpfSBmaWxsPVwid2hpdGVcIj48L3JlY3Q+XG4gICAgICAgICAge2NoaWxkcmVuICYmIGdldFVubWFza2VkQXJlYShjaGlsZHJlbil9XG4gICAgICAgIDwvbWFzaz5cbiAgICAgICAgPHJlY3Qgc3R5bGU9e2dldFBhZ2VTdHlsZSgpfSBmaWxsPVwid2hpdGVcIiBvcGFjaXR5PVwiMC42XCIgbWFzaz17YHVybCgjJHttYXNrSWR9KWB9PjwvcmVjdD5cbiAgICAgIDwvc3ZnPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiIsImltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBEb2N1bWVudENvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L0RvY3VtZW50Q29udGV4dCc7XG5pbXBvcnQgeyBUcmFuc2Zvcm1Db250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9UcmFuc2Zvcm1Db250ZXh0JztcbmltcG9ydCB7IGNvbXB1dGVCb3VuZGluZ0JveFN0eWxlIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3R5bGUnO1xuaW1wb3J0IHsgSWNvbkZsYWcgfSBmcm9tICcuLi9pY29uL0ljb25GbGFnJztcbmltcG9ydCB7IFNpemUgfSBmcm9tICcuLi90eXBlcy9ib3VuZGluZ0JveCc7XG5cbmV4cG9ydCBjb25zdCBQT1NJVElPTiA9IHtcbiAgTEVGVDogJ0xFRlQnLFxuICBSSUdIVDogJ1JJR0hUJyxcbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCB0eXBlIFBvc2l0aW9uVHlwZSA9IHR5cGVvZiBQT1NJVElPTltrZXlvZiB0eXBlb2YgUE9TSVRJT05dO1xuXG50eXBlIFByb3BzID0ge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGZsYWdXaWR0aD86IG51bWJlcjsgLy8gaW4gcHhcbiAgbGFiZWw/OiBzdHJpbmc7XG4gIG9yaWdpblRvcD86IG51bWJlcjsgLy8gaW4gcHhcbiAgcG9zaXRpb24/OiBQb3NpdGlvblR5cGU7XG4gIHRhaWxMZW5ndGg/OiBudW1iZXI7IC8vIGluIHB4XG4gIHRhaWxXaWRndGg/OiBudW1iZXI7IC8vIGluIHB4XG59O1xuXG5jb25zdCBERUZBVUxUX09SSUdJTl9UT1BfUFggPSAwO1xuY29uc3QgREVGQVVMVF9GTEFHX1dJRFRIX1BYID0gNjI7XG5jb25zdCBERUZBVUxUX0ZMQUdfSEVJR0hUX1BYID0gMjA7XG5jb25zdCBERUZBVUxUX1RBSUxfTEVOR1RIX1BYID0gNDA7XG5jb25zdCBERUZBVUxUX1RBSUxfV0lEVEhfUFggPSA3O1xuXG5leHBvcnQgY29uc3QgQXJyb3dGbGFnQmFzZTogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+ID0gKHtcbiAgY2xhc3NOYW1lLFxuICBsYWJlbCxcbiAgZmxhZ1dpZHRoLFxuICBvcmlnaW5Ub3AsXG4gIHBvc2l0aW9uID0gUE9TSVRJT04uTEVGVCxcbiAgdGFpbExlbmd0aCxcbiAgdGFpbFdpZGd0aCxcbiAgLi4uZXh0cmFQcm9wc1xufTogUHJvcHMpID0+IHtcbiAgY29uc3QgeyBwYWdlRGltZW5zaW9ucyB9ID0gUmVhY3QudXNlQ29udGV4dChEb2N1bWVudENvbnRleHQpO1xuICBjb25zdCB7IHJvdGF0aW9uLCBzY2FsZSB9ID0gUmVhY3QudXNlQ29udGV4dChUcmFuc2Zvcm1Db250ZXh0KTtcbiAgLy8gZnVuY3Rpb24gZm9yIHNjYWxpbmcgYm91bmRpbmcgYm94ZXMgYmFzZWQgb24gY3VycmVudCBkb2N1bWVudCBzdGF0ZXNcbiAgY29uc3QgY29tcHV0ZVNpemUgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoYm94OiBTaXplKTogU2l6ZSA9PiBjb21wdXRlQm91bmRpbmdCb3hTdHlsZShib3gsIHBhZ2VEaW1lbnNpb25zLCByb3RhdGlvbiwgc2NhbGUpLFxuICAgIFtwYWdlRGltZW5zaW9ucywgcm90YXRpb24sIHNjYWxlLCBvcmlnaW5Ub3BdXG4gICk7XG5cbiAgLy8gYm91bmRpbmcgYm94IG9mIHRoZSBmbGFnXG4gIGNvbnN0IGZsYWdTaXplID0ge1xuICAgIHRvcDogb3JpZ2luVG9wIHx8IERFRkFVTFRfT1JJR0lOX1RPUF9QWCxcbiAgICBsZWZ0OiAwLFxuICAgIGhlaWdodDogREVGQVVMVF9GTEFHX0hFSUdIVF9QWCxcbiAgICB3aWR0aDogZmxhZ1dpZHRoIHx8IERFRkFVTFRfRkxBR19XSURUSF9QWCxcbiAgfTtcbiAgLy8gYm91bmRpbmcgYm94IG9mIHRoZSB0YWlsXG4gIGNvbnN0IHRhaWxTaXplID0ge1xuICAgIHRvcDogb3JpZ2luVG9wIHx8IERFRkFVTFRfT1JJR0lOX1RPUF9QWCxcbiAgICBsZWZ0OiAwLFxuICAgIGhlaWdodDogdGFpbExlbmd0aCB8fCBERUZBVUxUX1RBSUxfTEVOR1RIX1BYLFxuICAgIHdpZHRoOiB0YWlsV2lkZ3RoIHx8IERFRkFVTFRfVEFJTF9XSURUSF9QWCxcbiAgfTtcblxuICBjb25zdCBjb21wdXRlZEZsYWdTaXplID0gY29tcHV0ZVNpemUoZmxhZ1NpemUpO1xuICBjb25zdCBjb21wdXRlZFRhaWxTaXplID0gY29tcHV0ZVNpemUodGFpbFNpemUpO1xuXG4gIGNvbnN0IHRhaWxQb3NpdGlvbiA9IHtcbiAgICB0b3A6IGNvbXB1dGVkVGFpbFNpemUudG9wLFxuICAgIGxlZnQ6IHBvc2l0aW9uID09PSBQT1NJVElPTi5MRUZUID8gLWNvbXB1dGVkVGFpbFNpemUud2lkdGggOiBwYWdlRGltZW5zaW9ucy53aWR0aCAqIHNjYWxlLFxuICAgIGhlaWdodDogY29tcHV0ZWRUYWlsU2l6ZS5oZWlnaHQsXG4gICAgd2lkdGg6IGNvbXB1dGVkVGFpbFNpemUud2lkdGgsXG4gIH07XG5cbiAgY29uc3QgcmVuZGVyRmxhZyA9ICgpID0+IHtcbiAgICBjb25zdCB7IHRvcCwgd2lkdGgsIGhlaWdodCB9ID0gY29tcHV0ZWRGbGFnU2l6ZTtcbiAgICBjb25zdCBmbGFnUG9zaXRpb24gPSB7XG4gICAgICB0b3AsXG4gICAgICBoZWlnaHQsXG4gICAgICB3aWR0aCxcbiAgICAgIGxlZnQ6XG4gICAgICAgIHBvc2l0aW9uID09PSBQT1NJVElPTi5MRUZUXG4gICAgICAgICAgPyAtY29tcHV0ZWRUYWlsU2l6ZS53aWR0aFxuICAgICAgICAgIDogdGFpbFBvc2l0aW9uLmxlZnQgKyB0YWlsUG9zaXRpb24ud2lkdGggLSB3aWR0aCArIDEsXG4gICAgfTtcbiAgICBjb25zdCBsYWJlbFBvc2l0aW9uID0gcG9zaXRpb24gPT09IFBPU0lUSU9OLkxFRlQgPyAnNDclJyA6ICc1MyUnO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGRmLXJlYWRlcl9fYXJyb3ctZmxhZy1iYXNlX19mbGFnXCIgc3R5bGU9e2ZsYWdQb3NpdGlvbn0+XG4gICAgICAgIDxJY29uRmxhZyBjbGFzc05hbWU9XCJwZGYtcmVhZGVyX19hcnJvdy1mbGFnLWJhc2VfX2ZsYWctaWNvblwiIGhlYWRlclBvc2l0aW9uPXtwb3NpdGlvbn0+XG4gICAgICAgICAgPHRleHRcbiAgICAgICAgICAgIHg9e2xhYmVsUG9zaXRpb259XG4gICAgICAgICAgICB5PVwiNTQlXCJcbiAgICAgICAgICAgIGRvbWluYW50QmFzZWxpbmU9XCJtaWRkbGVcIlxuICAgICAgICAgICAgdGV4dEFuY2hvcj1cIm1pZGRsZVwiXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJwZGYtcmVhZGVyX19hcnJvdy1mbGFnLWJhc2VfX2ZsYWctbGFiZWxcIj5cbiAgICAgICAgICAgIHtsYWJlbH1cbiAgICAgICAgICA8L3RleHQ+XG4gICAgICAgIDwvSWNvbkZsYWc+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ3BkZi1yZWFkZXJfX2Fycm93LWZsYWctYmFzZScsIGNsYXNzTmFtZSl9IHsuLi5leHRyYVByb3BzfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGRmLXJlYWRlcl9fYXJyb3ctZmxhZy1iYXNlX190YWlsXCIgc3R5bGU9e3RhaWxQb3NpdGlvbn0gLz5cbiAgICAgIHtsYWJlbCAmJiByZW5kZXJGbGFnKCl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBQT1NJVElPTiwgUG9zaXRpb25UeXBlIH0gZnJvbSAnLi4vbWFya2VyL0Fycm93RmxhZ0Jhc2UnO1xuXG50eXBlIFByb3BzID0ge1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBoZWFkZXJQb3NpdGlvbj86IFBvc2l0aW9uVHlwZTtcbn07XG5cbmV4cG9ydCBjb25zdCBJY29uRmxhZzogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+ID0gKHtcbiAgY2hpbGRyZW4sXG4gIGNsYXNzTmFtZSxcbiAgaGVhZGVyUG9zaXRpb24gPSBQT1NJVElPTi5MRUZULFxufTogUHJvcHMpID0+IHtcbiAgaWYgKGhlYWRlclBvc2l0aW9uID09IFBPU0lUSU9OLkxFRlQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPHN2ZyB2aWV3Qm94PVwiMCAwIDYyIDIyXCIgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuICAgICAgICA8cGF0aCBkPVwiTTUyLjAxMDggMjAuODMxNUw1Mi4wMTA1IDIwLjgzMThDNTEuNTUyNSAyMS4yNTI1IDUwLjk1MjcgMjEuNDkxIDUwLjMyNjUgMjEuNUgzLjAyODI4QzIuMzU2MjMgMjEuNSAxLjcxMjY0IDIxLjIzNTUgMS4yMzg4NSAyMC43NjYxQzAuNzY1MjIgMjAuMjk2OSAwLjUgMTkuNjYxNSAwLjUgMTlWM0MwLjUgMi4zMzg0OCAwLjc2NTIyMSAxLjcwMzA5IDEuMjM4ODUgMS4yMzM4OUMxLjcxMjY0IDAuNzY0NTE5IDIuMzU2MjMgMC41IDMuMDI4MjggMC41SDUwLjI0NTdDNTAuODcxOSAwLjUwOTAyIDUxLjQ3MTggMC43NDc0NjYgNTEuOTI5OCAxLjE2ODIxTDUxLjkzIDEuMTY4NDZMNjAuNjUxNSA5LjE2ODQ2TDYwLjY1MTQgOS4xNjg1Mkw2MC42NTggOS4xNzQzOUM2MC45MTc1IDkuNDA0MDggNjEuMTI2IDkuNjg0MTIgNjEuMjcwNyA5Ljk5Njc5QzYxLjQxNTQgMTAuMzA5NSA2MS40OTMzIDEwLjY0ODIgNjEuNDk5NiAxMC45OTE3QzYxLjUwNTkgMTEuMzM1MyA2MS40NDA1IDExLjY3NjUgNjEuMzA3NCAxMS45OTQxQzYxLjE3NDkgMTIuMzEwNCA2MC45Nzc5IDEyLjU5NjYgNjAuNzI4NiAxMi44MzQ4TDUyLjAxMDggMjAuODMxNVpcIiAvPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L3N2Zz5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8c3ZnIHZpZXdCb3g9XCIwIDAgNjIgMjJcIiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgICA8cGF0aCBkPVwiTTkuOTg5MjIgMS4xNjg0Nkw5Ljk4OTUgMS4xNjgyMUMxMC40NDc1IDAuNzQ3NDcyIDExLjA0NzMgMC41MDkwMjkgMTEuNjczNSAwLjQ5OTk5OUw1OC45NzE3IDAuNTAwMDA0QzU5LjY0MzggMC41MDAwMDQgNjAuMjg3NCAwLjc2NDUyMiA2MC43NjExIDEuMjMzODlDNjEuMjM0OCAxLjcwMzEgNjEuNSAyLjMzODQ4IDYxLjUgM0w2MS41IDE5QzYxLjUgMTkuNjYxNSA2MS4yMzQ4IDIwLjI5NjkgNjAuNzYxMSAyMC43NjYxQzYwLjI4NzQgMjEuMjM1NSA1OS42NDM4IDIxLjUgNTguOTcxNyAyMS41TDExLjc1NDMgMjEuNUMxMS4xMjgxIDIxLjQ5MSAxMC41MjgyIDIxLjI1MjUgMTAuMDcwMiAyMC44MzE4TDEwLjA3IDIwLjgzMTVMMS4zNDg1NCAxMi44MzE1TDEuMzQ4NiAxMi44MzE1TDEuMzQxOTYgMTIuODI1NkMxLjA4MjQ4IDEyLjU5NTkgMC44NzM5OSAxMi4zMTU5IDAuNzI5MjgzIDEyLjAwMzJDMC41ODQ1ODQgMTEuNjkwNSAwLjUwNjcxOSAxMS4zNTE4IDAuNTAwNDE3IDExLjAwODNDMC40OTQxMTEgMTAuNjY0NyAwLjU1OTQ5NSAxMC4zMjM1IDAuNjkyNjA1IDEwLjAwNTlDMC44MjUxNDMgOS42ODk2MSAxLjAyMjA2IDkuNDAzNDEgMS4yNzEzNiA5LjE2NTE5TDkuOTg5MjIgMS4xNjg0NlpcIiAvPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvc3ZnPlxuICApO1xufTtcbiIsIi8vIEhlaWdodCBhbmQgd2lkdGggYXJlIGluIHNjcmVlbiBwaXhlbCB1bml0cyBhdCAxMDAlIHNjYWxpbmcgb2YgdGhlIHBhZ2VcbmV4cG9ydCB0eXBlIERpbWVuc2lvbnMgPSB7XG4gIGhlaWdodDogbnVtYmVyO1xuICB3aWR0aDogbnVtYmVyO1xufTtcblxuLy8gVG9wIGFuZCBsZWZ0IGFyZSBpbiBzY3JlZW4gcGl4ZWwgdW5pdHMgYXQgMTAwJSBzY2FsaW5nIG9mIHRoZSBwYWdlXG5leHBvcnQgdHlwZSBPcmlnaW4gPSB7XG4gIHRvcDogbnVtYmVyO1xuICBsZWZ0OiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBTaXplID0gRGltZW5zaW9ucyAmIE9yaWdpbjtcblxuZXhwb3J0IHR5cGUgQm91bmRpbmdCb3ggPSB7XG4gIHBhZ2U6IG51bWJlcjtcbn0gJiBTaXplO1xuXG4vLyBSYXcgQm91bmRpbmdCb3hlcyB0b3AsIGxlZnQsIGhlaWdodCwgYW5kIHdpZHRoIGF0dHJpYnV0ZXMgYXJlIGV4cHJlc3NlZCBhcyBhIHJhdGlvIG9mIHRoZVxuLy8gcGFnZSBoZWlnaHQvd2lkdGggYW5kIG5lZWQgdG8gYmUgc2NhbGVkIGFjY29yZGluZyB0byBwYWdlIHNpemUgYmVmb3JlIHRoZXkgY2FuIGJlIHJlbmRlcmVkXG5leHBvcnQgdHlwZSBSYXdCb3VuZGluZ0JveCA9IEJvdW5kaW5nQm94O1xuXG4vLyBDYWxjdWxhdGUgYSBib3VuZGluZyBib3gncyBwaXhlbCBjb29yZGluYXRlcyBmcm9tIHRoZSByYXcgYm91bmRpbmcgYm94J3MgY29vcmRpdGF0ZSByYXRpb3Mgc2NhbGVkIHRvIHRoZSBwYWdlIHNpemVcbmV4cG9ydCBmdW5jdGlvbiBzY2FsZVJhd0JvdW5kaW5nQm94KFxuICBib3VuZGluZ0JveFJhdzogUmF3Qm91bmRpbmdCb3gsXG4gIHBhZ2VIZWlnaHQ6IG51bWJlcixcbiAgcGFnZVdpZHRoOiBudW1iZXJcbik6IEJvdW5kaW5nQm94IHtcbiAgY29uc3QgYm94U2NhbGVkOiBCb3VuZGluZ0JveCA9IHtcbiAgICBwYWdlOiBib3VuZGluZ0JveFJhdy5wYWdlLFxuICAgIHRvcDogYm91bmRpbmdCb3hSYXcudG9wICogcGFnZUhlaWdodCxcbiAgICBsZWZ0OiBib3VuZGluZ0JveFJhdy5sZWZ0ICogcGFnZVdpZHRoLFxuICAgIGhlaWdodDogYm91bmRpbmdCb3hSYXcuaGVpZ2h0ICogcGFnZUhlaWdodCxcbiAgICB3aWR0aDogYm91bmRpbmdCb3hSYXcud2lkdGggKiBwYWdlV2lkdGgsXG4gIH07XG5cbiAgcmV0dXJuIGJveFNjYWxlZDtcbn1cbiIsImltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBEb2N1bWVudENvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L0RvY3VtZW50Q29udGV4dCc7XG5pbXBvcnQgeyBCb3VuZGluZ0JveCBhcyBCb3VuZGluZ0JveFR5cGUsIHNjYWxlUmF3Qm91bmRpbmdCb3ggfSBmcm9tICcuLi90eXBlcy9ib3VuZGluZ0JveCc7XG5pbXBvcnQgeyBBcnJvd0ZsYWdCYXNlLCBQT1NJVElPTiwgUG9zaXRpb25UeXBlIH0gZnJvbSAnLi9BcnJvd0ZsYWdCYXNlJztcblxudHlwZSBQcm9wcyA9IHtcbiAgYm91bmRpbmdCb3hlczogQXJyYXk8Qm91bmRpbmdCb3hUeXBlPjsgLy8gYWxsIGJvdW5kaW5nIGJveGVzIGFyZSBleHBlY3RlZCB0byBiZSBvbiB0aGUgc2FtZSBwYWdlXG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgbGFiZWw/OiBzdHJpbmc7XG59O1xuXG5jb25zdCBDRU5URVJfTElORSA9IDAuNTtcbmNvbnN0IExJTkVfSEVJR0hUX01VTFRJUExJRVIgPSAxLjU7XG5cbmV4cG9ydCBjb25zdCBBcnJvd0ZsYWc6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PFByb3BzPiA9ICh7XG4gIGJvdW5kaW5nQm94ZXMsXG4gIGNsYXNzTmFtZSxcbiAgbGFiZWwsXG4gIC4uLmV4dHJhUHJvcHNcbn06IFByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcGFnZURpbWVuc2lvbnMgfSA9IFJlYWN0LnVzZUNvbnRleHQoRG9jdW1lbnRDb250ZXh0KTtcbiAgY29uc3QgY29udmVydFJhdGlvVG9QeCA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChyYXdCb3VuZGluZ0JveDogQm91bmRpbmdCb3hUeXBlKTogQm91bmRpbmdCb3hUeXBlID0+XG4gICAgICBzY2FsZVJhd0JvdW5kaW5nQm94KHJhd0JvdW5kaW5nQm94LCBwYWdlRGltZW5zaW9ucy5oZWlnaHQsIHBhZ2VEaW1lbnNpb25zLndpZHRoKSxcbiAgICBbcGFnZURpbWVuc2lvbnNdXG4gICk7XG5cbiAgaWYgKGJvdW5kaW5nQm94ZXMubGVuZ3RoID09IDApIHJldHVybiBudWxsO1xuXG4gIC8vIElmIGFueSBib3VuZGluZyBib3hlcyBzcGFuIG92ZXIgdGhlIGNlbnRlciBsaW5lLCB3ZSBrbm93IHRoYXQgZWl0aGVyIHRoZSBwYXBlciBpc1xuICAvLyBzaW5nbGUtY29sdW1uIG9yIGEgbWl4IG9mIHNpbmdsZS1jb2x1bW4gYW5kIHR3by1jb2x1bW4uIEluIHN1Y2ggY2FzZSwgYm91bmRpbmdcbiAgLy8gYm94ZXMgd2lsbCBub3QgYmUgZGl2aWRlZCBzbyBhcyB0byBndWFyYW50ZWUgb25seSAxIGZsYWcgaXMgcmVuZGVyZWQgb24gdGhlIGxlZnQgc2lkZS5cbiAgY29uc3QgaGFzV2lkZUJveCA9IGJvdW5kaW5nQm94ZXMuc29tZShcbiAgICAoeyBsZWZ0LCB3aWR0aCB9KSA9PiBsZWZ0IDwgQ0VOVEVSX0xJTkUgJiYgbGVmdCArIHdpZHRoID49IENFTlRFUl9MSU5FXG4gICk7XG5cbiAgbGV0IGxlZnRCb3VuZGluZ0JveGVzID0gYm91bmRpbmdCb3hlcyxcbiAgICByaWdodEJvdW5kaW5nQm94ZXM6IEJvdW5kaW5nQm94VHlwZVtdID0gW107XG4gIGlmICghaGFzV2lkZUJveCkge1xuICAgIGxlZnRCb3VuZGluZ0JveGVzID0gYm91bmRpbmdCb3hlcy5maWx0ZXIoKHsgbGVmdCB9KSA9PiBsZWZ0IDwgQ0VOVEVSX0xJTkUpO1xuICAgIHJpZ2h0Qm91bmRpbmdCb3hlcyA9IGJvdW5kaW5nQm94ZXMuZmlsdGVyKCh7IGxlZnQgfSkgPT4gbGVmdCA+PSBDRU5URVJfTElORSk7XG4gIH1cblxuICAvLyBUbyBoYW5kbGUgYSBzcGVjaWFsIGNhc2Ugd2hlcmUgdGhlIHByZXZpb3VzIGJvdW5kaW5nIGJveCBpcyBvbiB0aGUgcmlnaHQgd2hpbGVcbiAgLy8gdGhlIGxhdGVyIGlzIG9uIHRoZSBsZWZ0LiBJbiBzdWNoIGNhc2UsIHRoZXJlIGFyZSBvbmx5IDIgYm91bmRpbmcgYm94ZXMuXG4gIC8vIFRoZSB2ZXJ0aWNhbCBkaXN0YW5jZSBiZXR3ZWVuIHRoZSB0d28gYm94ZXMgaXMgdXNlZCB0byBkaWZmZXJlbnRpYXRlIHdoZXRoZXIgdGhpcyBjYXNlXG4gIC8vIGhhcHBlbnMgb24gYSBzaW5nbGUtY29sdW1uIHBhcGVyIG9yIGEgdHdvLWNvbHVtbiBwYXBlci4gSWYgaXQncyB0aGUgcHJldmlvdXMsIHRoZW5cbiAgLy8gdGhlIHdob2xlIGZsYWcgc2hvdWxkIGFwcGVhciBvbiB0aGUgbGVmdC4gQm90aCBib3VuZGluZyBib3hlcyB3aWxsIGJlIGNhdGVnb3JpemVkXG4gIC8vIGFzIGxlZnRCb3VuZGluZ0JveGVzLiBPdGhlcndpc2UsIHRoZSB0YWlsIHdyYXBwaW5nIHN0aWxsIGFwcGxpZXMuXG4gIGlmIChsZWZ0Qm91bmRpbmdCb3hlcy5sZW5ndGggPT09IDEgJiYgcmlnaHRCb3VuZGluZ0JveGVzLmxlbmd0aCA9PT0gMSkge1xuICAgIC8vIElmIHRoZSB2ZXJ0aWNhbCBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHR3byBib3hlcyBpcyBzbWFsbGVyIHRoZW4gMS41IHRpbWVzIGxpbmUgaGVpZ2h0LFxuICAgIC8vIHRoZSBwYXBlciBpcyBjYXRlZ29yaXplZCBhcyBzaW5nbGUtY29sdW1uLiBCb3RoIGJvdW5kaW5nIGJveGVzIGFyZSBzZXQgdG8gbGVmdEJvdW5kaW5nQm94ZXMuXG4gICAgLy8gQXJyb3dGbGFnIHdpbGwgYXBwZWFyIG9uIHRoZSBsZWZ0XG4gICAgaWYgKFxuICAgICAgTWF0aC5hYnMocmlnaHRCb3VuZGluZ0JveGVzWzBdLnRvcCAtIGxlZnRCb3VuZGluZ0JveGVzWzBdLnRvcCkgPFxuICAgICAgTElORV9IRUlHSFRfTVVMVElQTElFUiAqIHJpZ2h0Qm91bmRpbmdCb3hlc1swXS5oZWlnaHRcbiAgICApIHtcbiAgICAgIGxlZnRCb3VuZGluZ0JveGVzID0gYm91bmRpbmdCb3hlcztcbiAgICAgIHJpZ2h0Qm91bmRpbmdCb3hlcyA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIC8vIFNvcnQgYm91bmRpbmcgYm94ZXMgYnkgdGhlaXIgdG9wIHBvc2l0aW9uc1xuICBsZWZ0Qm91bmRpbmdCb3hlcy5zb3J0KChmaXJzdCwgc2Vjb25kKSA9PiBmaXJzdC50b3AgLSBzZWNvbmQudG9wKTtcbiAgcmlnaHRCb3VuZGluZ0JveGVzLnNvcnQoKGZpcnN0LCBzZWNvbmQpID0+IGZpcnN0LnRvcCAtIHNlY29uZC50b3ApO1xuXG4gIGNvbnN0IHJlbmRlckFycm93RmxhZ0Jhc2UgPSAoXG4gICAgYm94ZXM6IEJvdW5kaW5nQm94VHlwZVtdLFxuICAgIHBvc2l0aW9uOiBQb3NpdGlvblR5cGUsXG4gICAgc2hvd0xhYmVsOiBib29sZWFuXG4gICkgPT4ge1xuICAgIGlmIChib3hlcy5sZW5ndGggPT0gMCkgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCBmaXJzdEJveCA9IGNvbnZlcnRSYXRpb1RvUHgoYm94ZXNbMF0pLFxuICAgICAgbGFzdEJveCA9IGNvbnZlcnRSYXRpb1RvUHgoYm94ZXNbYm94ZXMubGVuZ3RoIC0gMV0pO1xuICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgbGFiZWw6IHNob3dMYWJlbCA/IGxhYmVsIDogdW5kZWZpbmVkLFxuICAgICAgdGFpbExlbmd0aDogbGFzdEJveC50b3AgKyBsYXN0Qm94LmhlaWdodCAtIGZpcnN0Qm94LnRvcCxcbiAgICAgIG9yaWdpblRvcDogZmlyc3RCb3gudG9wLFxuICAgICAgcG9zaXRpb24sXG4gICAgfTtcblxuICAgIHJldHVybiA8QXJyb3dGbGFnQmFzZSB7Li4ucHJvcHN9IC8+O1xuICB9O1xuXG4gIGNvbnN0IGhhc0xlZnRGbGFnID0gbGVmdEJvdW5kaW5nQm94ZXMubGVuZ3RoID4gMDtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc25hbWVzKCdwZGYtcmVhZGVyX19hcnJvdy1mbGFnJywgY2xhc3NOYW1lKX0gey4uLmV4dHJhUHJvcHN9PlxuICAgICAge3JlbmRlckFycm93RmxhZ0Jhc2UobGVmdEJvdW5kaW5nQm94ZXMsIFBPU0lUSU9OLkxFRlQsIGhhc0xlZnRGbGFnKX1cbiAgICAgIHtyZW5kZXJBcnJvd0ZsYWdCYXNlKHJpZ2h0Qm91bmRpbmdCb3hlcywgUE9TSVRJT04uUklHSFQsICFoYXNMZWZ0RmxhZyl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIiwiaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IFNjcm9sbENvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L1Njcm9sbENvbnRleHQnO1xuaW1wb3J0IHsgTm9kZURlc3RpbmF0aW9uLCBPdXRsaW5lTm9kZSB9IGZyb20gJy4uL3R5cGVzL291dGxpbmUnO1xuXG50eXBlIFByb3BzID0ge1xuICBpdGVtcz86IEFycmF5PE91dGxpbmVOb2RlPjtcbiAgb25DbGljaz86IChkZXN0OiBOb2RlRGVzdGluYXRpb24pID0+IHZvaWQ7XG59O1xuXG5leHBvcnQgY29uc3QgT3V0bGluZUl0ZW06IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PFByb3BzPiA9ICh7IGl0ZW1zLCBvbkNsaWNrIH06IFByb3BzKSA9PiB7XG4gIGNvbnN0IHsgaXNPdXRsaW5lVGFyZ2V0VmlzaWJsZSB9ID0gUmVhY3QudXNlQ29udGV4dChTY3JvbGxDb250ZXh0KTtcblxuICBpZiAoIWl0ZW1zIHx8ICFpdGVtcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbmRlckl0ZW0oaXRlbTogT3V0bGluZU5vZGUpIHtcbiAgICBjb25zdCBjbGlja0hhbmRsZXIgPSAoZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICAgIG9uQ2xpY2soaXRlbS5kZXN0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gSWYgYW4gaXRlbSBoYXMgc3ViIHRpdGxlcywgcmVuZGVyIDxPdXRsaW5lSXRlbSAvPlxuICAgIHJldHVybiAoXG4gICAgICA8bGlcbiAgICAgICAga2V5PXtpdGVtLmRlc3Q/LnRvU3RyaW5nKCkgfHwgaXRlbS50aXRsZX1cbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKCdyZWFkZXJfX291dGxpbmUtaXRlbScsIHtcbiAgICAgICAgICAncmVhZGVyX19vdXRsaW5lLWl0ZW0tLXRhcmdldC12aXNpYmxlJzogaXNPdXRsaW5lVGFyZ2V0VmlzaWJsZShpdGVtLmRlc3QpLFxuICAgICAgICB9KX0+XG4gICAgICAgIDxhIGhyZWY9XCIjXCIgb25DbGljaz17Y2xpY2tIYW5kbGVyfSBkYXRhLXRlc3QtaWQ9XCJyZWFkZXItb3V0bGluZS1pdGVtXCI+XG4gICAgICAgICAge2l0ZW0udGl0bGV9XG4gICAgICAgIDwvYT5cbiAgICAgICAgPE91dGxpbmVJdGVtIGl0ZW1zPXtpdGVtLml0ZW1zfSBvbkNsaWNrPXtvbkNsaWNrfSAvPlxuICAgICAgPC9saT5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIDx1bCBjbGFzc05hbWU9XCJyZWFkZXJfX291dGxpbmUtaXRlbXNcIj57aXRlbXMubWFwKGl0ZW0gPT4gcmVuZGVySXRlbShpdGVtKSl9PC91bD47XG59O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBidWlsZE91dGxpbmVQb3NpdGlvbnMsIERvY3VtZW50Q29udGV4dCB9IGZyb20gJy4uLy4uL2NvbnRleHQvRG9jdW1lbnRDb250ZXh0JztcbmltcG9ydCB7IFNjcm9sbENvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L1Njcm9sbENvbnRleHQnO1xuaW1wb3J0IHsgTm9kZURlc3RpbmF0aW9uLCBPdXRsaW5lTm9kZSB9IGZyb20gJy4uL3R5cGVzL291dGxpbmUnO1xuaW1wb3J0IHsgT3V0bGluZUl0ZW0gfSBmcm9tICcuL091dGxpbmVJdGVtJztcblxuZXhwb3J0IGNvbnN0IE91dGxpbmU6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50ID0gKHsgLi4uZXh0cmFQcm9wcyB9KSA9PiB7XG4gIGNvbnN0IHsgb3V0bGluZSwgcGRmRG9jUHJveHksIHNldE91dGxpbmUsIHNldE91dGxpbmVQb3NpdGlvbnMgfSA9XG4gICAgUmVhY3QudXNlQ29udGV4dChEb2N1bWVudENvbnRleHQpO1xuICBjb25zdCB7IHNjcm9sbFRvT3V0bGluZVRhcmdldCwgcmVzZXRTY3JvbGxPYnNlcnZlcnMgfSA9IFJlYWN0LnVzZUNvbnRleHQoU2Nyb2xsQ29udGV4dCk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAob3V0bGluZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghcGRmRG9jUHJveHkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwZGZEb2NQcm94eVxuICAgICAgLmdldE91dGxpbmUoKVxuICAgICAgLnRoZW4oKG91dGxpbmVBcnJheTogQXJyYXk8T3V0bGluZU5vZGU+KSA9PiB7XG4gICAgICAgIHNldE91dGxpbmUob3V0bGluZUFycmF5KTtcbiAgICAgICAgcmV0dXJuIGJ1aWxkT3V0bGluZVBvc2l0aW9ucyhwZGZEb2NQcm94eSwgb3V0bGluZUFycmF5KTtcbiAgICAgIH0pXG4gICAgICAudGhlbihvdXRsaW5lUG9zaXRpb25zID0+IHtcbiAgICAgICAgc2V0T3V0bGluZVBvc2l0aW9ucyhvdXRsaW5lUG9zaXRpb25zKTtcbiAgICAgIH0pXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHJlc2V0U2Nyb2xsT2JzZXJ2ZXJzKCk7XG4gICAgICB9KTtcbiAgfSwgW291dGxpbmVdKTtcblxuICBjb25zdCBjbGlja0hhbmRsZXIgPSBSZWFjdC51c2VDYWxsYmFjaygoZGVzdDogTm9kZURlc3RpbmF0aW9uKTogdm9pZCA9PiB7XG4gICAgaWYgKCFkZXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNjcm9sbFRvT3V0bGluZVRhcmdldChkZXN0KTtcbiAgICByZXR1cm47XG4gIH0sIFtdKTtcblxuICBpZiAoIXBkZkRvY1Byb3h5KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwicmVhZGVyX19vdXRsaW5lXCIgey4uLmV4dHJhUHJvcHN9PlxuICAgICAgeyEhb3V0bGluZSAmJiA8T3V0bGluZUl0ZW0gaXRlbXM9e291dGxpbmV9IG9uQ2xpY2s9e2NsaWNrSGFuZGxlcn0gLz59XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBEb2N1bWVudENvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L0RvY3VtZW50Q29udGV4dCc7XG5pbXBvcnQgeyBUcmFuc2Zvcm1Db250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9UcmFuc2Zvcm1Db250ZXh0JztcbmltcG9ydCB7IGNvbXB1dGVQYWdlU3R5bGUgfSBmcm9tICcuLi91dGlscy9zdHlsZSc7XG5pbXBvcnQgeyBCb3VuZGluZ0JveCB9IGZyb20gJy4vQm91bmRpbmdCb3gnO1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9IHtcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdEVsZW1lbnQ8dHlwZW9mIEJvdW5kaW5nQm94PiB8IEFycmF5PFJlYWN0LlJlYWN0RWxlbWVudDx0eXBlb2YgQm91bmRpbmdCb3g+Pjtcbn07XG5cbmV4cG9ydCBjb25zdCBPdmVybGF5OiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoeyBjaGlsZHJlbiwgLi4uZXh0cmFQcm9wcyB9OiBQcm9wcykgPT4ge1xuICBjb25zdCB7IHBhZ2VEaW1lbnNpb25zIH0gPSBSZWFjdC51c2VDb250ZXh0KERvY3VtZW50Q29udGV4dCk7XG4gIGNvbnN0IHsgcm90YXRpb24sIHNjYWxlIH0gPSBSZWFjdC51c2VDb250ZXh0KFRyYW5zZm9ybUNvbnRleHQpO1xuXG4gIGNvbnN0IGdldE92ZXJsYXlTdHlsZSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICByZXR1cm4gY29tcHV0ZVBhZ2VTdHlsZShwYWdlRGltZW5zaW9ucywgcm90YXRpb24sIHNjYWxlKTtcbiAgfSwgW3BhZ2VEaW1lbnNpb25zLCByb3RhdGlvbiwgc2NhbGVdKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwicGRmLXJlYWRlcl9fb3ZlcmxheVwiIHN0eWxlPXtnZXRPdmVybGF5U3R5bGUoKX0gey4uLmV4dHJhUHJvcHN9PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvZGl2PlxuICApO1xufTtcbiIsImltcG9ydCB7IE51bGxhYmxlIH0gZnJvbSAnLi4vY29tcG9uZW50cy90eXBlcy91dGlscyc7XG5pbXBvcnQgeyBWaXNpYmxlRW50cnlEZXRhaWxUeXBlIH0gZnJvbSAnLi9WaXNpYmxlRW50cmllc0RldGVjdG9yJztcblxudHlwZSBWaXNpYmxlRWxlbWVudCA9IE51bGxhYmxlPG51bWJlciB8IHN0cmluZz47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNYXhWaXNpYmxlRWxlbWVudChcbiAgdmlzaWJsZUVsZW1lbnRzOiBNYXA8VmlzaWJsZUVsZW1lbnQsIFZpc2libGVFbnRyeURldGFpbFR5cGU+XG4pOiBWaXNpYmxlRWxlbWVudCB7XG4gIGxldCBtYXhWaXNpYmxlS2V5ID0gbnVsbDtcbiAgbGV0IG1heFJhdGlvID0gMDtcbiAgZm9yIChjb25zdCBbdmlzaWJsZUtleSwgeyByYXRpbyB9XSBvZiB2aXNpYmxlRWxlbWVudHMpIHtcbiAgICBpZiAobWF4UmF0aW8gPCByYXRpbykge1xuICAgICAgbWF4VmlzaWJsZUtleSA9IHZpc2libGVLZXk7XG4gICAgICBtYXhSYXRpbyA9IHJhdGlvO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWF4VmlzaWJsZUtleTtcbn1cbiIsImltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBEb2N1bWVudENvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L0RvY3VtZW50Q29udGV4dCc7XG5pbXBvcnQgeyBTY3JvbGxDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9TY3JvbGxDb250ZXh0JztcbmltcG9ydCB7IGdldE1heFZpc2libGVFbGVtZW50IH0gZnJvbSAnLi4vdXRpbHMvTWF4VmlzaWJsZUVsZW1lbnQnO1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9IHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xufTtcblxudHlwZSBUT0RPX19USU1FUiA9IGFueTtcblxuY29uc3QgREVMQVlfU0NST0xMX1RJTUVfT1VUX01TID0gMTAwMDtcblxuZXhwb3J0IGNvbnN0IFBhZ2VOdW1iZXJDb250cm9sOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoeyBjbGFzc05hbWUgfTogUHJvcHMpID0+IHtcbiAgY29uc3QgZGVsYXlUaW1lclJlZiA9IFJlYWN0LnVzZVJlZjxUT0RPX19USU1FUj4oKTtcbiAgY29uc3QgeyBudW1QYWdlcyB9ID0gUmVhY3QudXNlQ29udGV4dChEb2N1bWVudENvbnRleHQpO1xuICBjb25zdCB7IHNjcm9sbFRvUGFnZSwgdmlzaWJsZVBhZ2VSYXRpb3MgfSA9IFJlYWN0LnVzZUNvbnRleHQoU2Nyb2xsQ29udGV4dCk7XG4gIGNvbnN0IFttaW5QYWdlLCBzZXRNaW5QYWdlXSA9IFJlYWN0LnVzZVN0YXRlPG51bWJlcj4oMCk7XG4gIGNvbnN0IFt1c2VySW5wdXQsIHNldFVzZXJJbnB1dF0gPSBSZWFjdC51c2VTdGF0ZTxzdHJpbmc+KCcwJyk7XG5cbiAgLy8gSW5pdGlhbGl6ZSBwYWdlIGNvbnRyb2wgZWxlbWVudFxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChudW1QYWdlcyAhPSAwKSB7XG4gICAgICBzZXRNaW5QYWdlKDEpO1xuICAgIH1cbiAgfSwgW251bVBhZ2VzXSk7XG5cbiAgLy8gRXZlcnl0aW1lIHdlIHNjcm9sbCB0aHJvdWdoIHRoZSBwYWdlIHRoaXMgdXNlRWZmZWN0XG4gIC8vIHdpbGwgdHJpZ2dlciBhbmQgc2V0IGN1cnJlbnQgcGFnZSBiYXNlZCBvbiBvdXIgY3VycmVudFxuICAvLyBzY3JvbGwgcG9zaXRpb25cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodmlzaWJsZVBhZ2VSYXRpb3Muc2l6ZSAhPT0gMCkge1xuICAgICAgY29uc3QgbWF4VmlzaWJsZVBhZ2VOdW1iZXIgPSBnZXRNYXhWaXNpYmxlRWxlbWVudCh2aXNpYmxlUGFnZVJhdGlvcyk7XG4gICAgICBpZiAobWF4VmlzaWJsZVBhZ2VOdW1iZXIpIHtcbiAgICAgICAgc2V0VXNlcklucHV0KG1heFZpc2libGVQYWdlTnVtYmVyLnRvU3RyaW5nKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW3Zpc2libGVQYWdlUmF0aW9zXSk7XG5cbiAgY29uc3Qgb25QYWdlTnVtYmVyQ2hhbmdlID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICAgIC8vIERlY2ltYWwgY2FzZVxuICAgICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSkge1xuICAgICAgICBzZXRVc2VySW5wdXQocGFyc2VJbnQodmFsdWUsIDEwKS50b1N0cmluZygpKTtcbiAgICAgIH1cblxuICAgICAgc2V0VXNlcklucHV0KHZhbHVlKTtcbiAgICAgIGlmIChkZWxheVRpbWVyUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KGRlbGF5VGltZXJSZWYuY3VycmVudCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFmdGVyIHVzZXIgaW5wdXQgdGhlIHBhZ2UgdGhhdCB0aGV5IHdhbnQgdG8gc2Nyb2xsIHRvXG4gICAgICAvLyBvdXIgcmVmIHdpbGwgc3RhcnQgc2V0dGluZyBhIGRlbGF5IGFyb3VuZCAxcyBiZWZvcmUgc2Nyb2xsXG4gICAgICAvLyB0byB0aGUgcG9zaXRpb24gdGhhdCB1c2VyIGRlc2lyZVxuICAgICAgY29uc3QgbmV3UGFnZU51bWJlciA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgICBpZiAobmV3UGFnZU51bWJlciA+PSBtaW5QYWdlICYmIG5ld1BhZ2VOdW1iZXIgPD0gbnVtUGFnZXMpIHtcbiAgICAgICAgZGVsYXlUaW1lclJlZi5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgc2Nyb2xsVG9QYWdlKHsgcGFnZU51bWJlcjogbmV3UGFnZU51bWJlciB9KTtcbiAgICAgICAgfSwgREVMQVlfU0NST0xMX1RJTUVfT1VUX01TKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFttaW5QYWdlLCBudW1QYWdlcywgc2Nyb2xsVG9QYWdlXVxuICApO1xuXG4gIGNvbnN0IGhhbmRsZUJsdXIgPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKGRlbGF5VGltZXJSZWYuY3VycmVudCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGRlbGF5VGltZXJSZWYuY3VycmVudCk7XG4gICAgfVxuICAgIGNvbnN0IHBhZ2VOdW1iZXIgPSBwYXJzZUludCh1c2VySW5wdXQsIDEwKTtcbiAgICBpZiAoTnVtYmVyLmlzTmFOKHBhZ2VOdW1iZXIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGVsYXlUaW1lclJlZi5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBzY3JvbGxUb1BhZ2UoeyBwYWdlTnVtYmVyOiBwYWdlTnVtYmVyIH0pO1xuICAgIH0sIERFTEFZX1NDUk9MTF9USU1FX09VVF9NUyk7XG4gIH0sIFt1c2VySW5wdXQsIHNjcm9sbFRvUGFnZV0pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ3BkZi1yZWFkZXJfX3BhZ2UtbnVtYmVyLWNvbnRyb2wnLCBjbGFzc05hbWUpfT5cbiAgICAgIDxpbnB1dFxuICAgICAgICBhcmlhLWxhYmVsPVwiQ3VycmVudCBQYWdlXCJcbiAgICAgICAgY2xhc3NOYW1lPVwicGRmLXJlYWRlcl9fcGFnZS1udW1iZXItY29udHJvbF9fY3VycmVudC1wYWdlXCJcbiAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgIG5hbWU9XCJjdXJyZW50UGFnZVwiXG4gICAgICAgIHZhbHVlPXt1c2VySW5wdXR9XG4gICAgICAgIG9uQ2hhbmdlPXtvblBhZ2VOdW1iZXJDaGFuZ2V9XG4gICAgICAgIG9uQmx1cj17aGFuZGxlQmx1cn1cbiAgICAgIC8+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJwZGYtcmVhZGVyX19wYWdlLW51bWJlci1jb250cm9sX19zZXBhcmF0b3IgXCI+Lzwvc3Bhbj5cbiAgICAgIDxzcGFuIGFyaWEtbGFiZWw9XCJUb3RhbCBQYWdlc1wiIGNsYXNzTmFtZT1cInBkZi1yZWFkZXJfX3BhZ2UtbnVtYmVyLWNvbnRyb2xfX3RvdGFsLXBhZ2VzXCI+XG4gICAgICAgIHtudW1QYWdlc31cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBwZGZqcyB9IGZyb20gJ3JlYWN0LXBkZic7XG5cbmltcG9ydCB7IFBhZ2VOdW1iZXIgfSBmcm9tICcuLi9jb21wb25lbnRzL3R5cGVzL3BhZ2UnO1xuaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tICcuLi9jb21wb25lbnRzL3R5cGVzL3V0aWxzJztcbmltcG9ydCB7IGxvZ1Byb3ZpZGVyV2FybmluZyB9IGZyb20gJy4uL3V0aWxzL3Byb3ZpZGVyJztcbmltcG9ydCB7IFZpc2libGVFbnRyeURldGFpbFR5cGUgfSBmcm9tICcuLi91dGlscy9WaXNpYmxlRW50cmllc0RldGVjdG9yJztcblxuZXhwb3J0IHR5cGUgUmVuZGVyU3RhdGUgPSB7XG4gIHByb21pc2U6IFByb21pc2U8c3RyaW5nPjtcbiAgb2JqZWN0VVJMOiBOdWxsYWJsZTxzdHJpbmc+O1xufTtcblxuZXhwb3J0IHR5cGUgUGFnZU51bWJlclRvUmVuZGVyU3RhdGVNYXAgPSBNYXA8bnVtYmVyLCBSZW5kZXJTdGF0ZT47XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBhZ2VSZW5kZXJDb250ZXh0IHtcbiAgcGFnZVJlbmRlclN0YXRlczogUGFnZU51bWJlclRvUmVuZGVyU3RhdGVNYXA7XG4gIGdldE9iamVjdFVSTEZvclBhZ2U6IChwYWdlTnVtYmVyOiBQYWdlTnVtYmVyKSA9PiBOdWxsYWJsZTxzdHJpbmc+O1xuICBpc0J1aWxkaW5nT2JqZWN0VVJMRm9yUGFnZTogKHBhZ2VOdW1iZXI6IFBhZ2VOdW1iZXIpID0+IGJvb2xlYW47XG4gIGlzRmluaXNoZWRCdWlsZGluZ0FsbFBhZ2VzT2JqZWN0VVJMczogKCkgPT4gYm9vbGVhbjtcbiAgYnVpbGRPYmplY3RVUkxGb3JQYWdlOiAocGFnZU51bWJlcjogUGFnZU51bWJlcikgPT4gUHJvbWlzZTxzdHJpbmc+O1xufVxuXG5leHBvcnQgY29uc3QgUGFnZVJlbmRlckNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PElQYWdlUmVuZGVyQ29udGV4dD4oe1xuICBwYWdlUmVuZGVyU3RhdGVzOiBuZXcgTWFwKCksXG4gIGdldE9iamVjdFVSTEZvclBhZ2U6IGFyZ3MgPT4ge1xuICAgIGxvZ1Byb3ZpZGVyV2FybmluZyhgZ2V0T2JqZWN0VVJMRm9yUGFnZSgke0pTT04uc3RyaW5naWZ5KGFyZ3MpfSlgLCAnUGFnZVJlbmRlckNvbnRleHQnKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgaXNCdWlsZGluZ09iamVjdFVSTEZvclBhZ2U6IGFyZ3MgPT4ge1xuICAgIGxvZ1Byb3ZpZGVyV2FybmluZyhgaXNCdWlsZGluZ09iamVjdFVSTEZvclBhZ2UoJHtKU09OLnN0cmluZ2lmeShhcmdzKX0pYCwgJ1BhZ2VSZW5kZXJDb250ZXh0Jyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBpc0ZpbmlzaGVkQnVpbGRpbmdBbGxQYWdlc09iamVjdFVSTHM6ICgpID0+IHtcbiAgICBsb2dQcm92aWRlcldhcm5pbmcoYGlzRmluaXNoZWRCdWlsZGluZ0FsbFBhZ2VzT2JqZWN0VVJMcygpYCwgJ1BhZ2VSZW5kZXJDb250ZXh0Jyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBidWlsZE9iamVjdFVSTEZvclBhZ2U6IGFyZ3MgPT4ge1xuICAgIGxvZ1Byb3ZpZGVyV2FybmluZyhgYnVpbGRPYmplY3RVUkxGb3JQYWdlKCR7SlNPTi5zdHJpbmdpZnkoYXJncyl9KWAsICdQYWdlUmVuZGVyQ29udGV4dCcpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoJycpO1xuICB9LFxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VQYWdlUmVuZGVyQ29udGV4dFByb3BzKHtcbiAgcGRmRG9jUHJveHksXG4gIHBpeGVsUmF0aW8sXG4gIHNjYWxlLFxuICB2aXNpYmxlUGFnZVJhdGlvcyxcbn06IHtcbiAgcGRmRG9jUHJveHk/OiBwZGZqcy5QREZEb2N1bWVudFByb3h5O1xuICBwaXhlbFJhdGlvOiBudW1iZXI7XG4gIHNjYWxlOiBudW1iZXI7XG4gIHZpc2libGVQYWdlUmF0aW9zOiBNYXA8bnVtYmVyLCBWaXNpYmxlRW50cnlEZXRhaWxUeXBlPjtcbn0pOiBJUGFnZVJlbmRlckNvbnRleHQge1xuICBjb25zdCBbcGFnZVJlbmRlclN0YXRlcywgX3NldFBhZ2VSZW5kZXJTdGF0ZXNdID0gUmVhY3QudXNlU3RhdGU8UGFnZU51bWJlclRvUmVuZGVyU3RhdGVNYXA+KFxuICAgICgpID0+IHtcbiAgICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcbiAgICAgIE9iamVjdC5mcmVlemUobWFwKTtcbiAgICAgIHJldHVybiBtYXA7XG4gICAgfVxuICApO1xuXG4gIC8vIEJlY2F1c2UgcmVuZGVyaW5nIGEgcGFnZSBpcyBhc3luYywgd2Ugd2lsbCBsb3NlIHRoZSBjdXJyZW50IHBhZ2VSZW5kZXJTdGF0ZXNcbiAgLy8gVGhpcyByZWYgdHJpY2sgYWxsb3dzIHRoZSBsYXRlc3QgdG8gYmUgYWNjZXNzaWJsZSB3aGVuIHRoZSBvYmplY3RVUkwgaXMgcmVhZHlcbiAgY29uc3QgcGFnZVJlbmRlclN0YXRlc1JlZiA9IFJlYWN0LnVzZVJlZihwYWdlUmVuZGVyU3RhdGVzKTtcbiAgY29uc3Qgc2V0UGFnZVJlbmRlclN0YXRlcyA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChwYWdlUmVuZGVyU3RhdGVzOiBQYWdlTnVtYmVyVG9SZW5kZXJTdGF0ZU1hcCkgPT4ge1xuICAgICAgcGFnZVJlbmRlclN0YXRlc1JlZi5jdXJyZW50ID0gcGFnZVJlbmRlclN0YXRlcztcbiAgICAgIF9zZXRQYWdlUmVuZGVyU3RhdGVzKHBhZ2VSZW5kZXJTdGF0ZXMpO1xuICAgIH0sXG4gICAgW3BhZ2VSZW5kZXJTdGF0ZXNSZWZdXG4gICk7XG5cbiAgY29uc3QgaXNCdWlsZGluZ09iamVjdFVSTEZvclBhZ2UgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoeyBwYWdlTnVtYmVyLCBwYWdlSW5kZXggfTogUGFnZU51bWJlcik6IGJvb2xlYW4gPT4ge1xuICAgICAgaWYgKHR5cGVvZiBwYWdlSW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICAgIHBhZ2VOdW1iZXIgPSBwYWdlSW5kZXggKyAxO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBwYWdlTnVtYmVyICE9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBjb25zdCBzdGF0ZSA9IHBhZ2VSZW5kZXJTdGF0ZXMuZ2V0KHBhZ2VOdW1iZXIpO1xuICAgICAgaWYgKCFzdGF0ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gIXN0YXRlLm9iamVjdFVSTDtcbiAgICB9LFxuICAgIFtwYWdlUmVuZGVyU3RhdGVzXVxuICApO1xuXG4gIGNvbnN0IGlzRmluaXNoZWRCdWlsZGluZ0FsbFBhZ2VzT2JqZWN0VVJMcyA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpOiBib29sZWFuID0+IHtcbiAgICBpZiAoIXBkZkRvY1Byb3h5KSByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChsZXQgcGFnZU51bWJlciA9IDE7IHBhZ2VOdW1iZXIgPD0gcGRmRG9jUHJveHkubnVtUGFnZXM7IHBhZ2VOdW1iZXIrKykge1xuICAgICAgaWYgKCFwYWdlUmVuZGVyU3RhdGVzLmdldChwYWdlTnVtYmVyKT8ub2JqZWN0VVJMKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sIFtwZGZEb2NQcm94eSwgcGFnZVJlbmRlclN0YXRlc10pO1xuXG4gIGNvbnN0IGdldE9iamVjdFVSTEZvclBhZ2UgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoeyBwYWdlTnVtYmVyLCBwYWdlSW5kZXggfTogUGFnZU51bWJlcik6IE51bGxhYmxlPHN0cmluZz4gPT4ge1xuICAgICAgaWYgKHR5cGVvZiBwYWdlSW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICAgIHBhZ2VOdW1iZXIgPSBwYWdlSW5kZXggKyAxO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBwYWdlTnVtYmVyICE9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYWdlUmVuZGVyU3RhdGVzLmdldChwYWdlTnVtYmVyKT8ub2JqZWN0VVJMIHx8IG51bGw7XG4gICAgfSxcbiAgICBbcGFnZVJlbmRlclN0YXRlc11cbiAgKTtcblxuICBjb25zdCBidWlsZE9iamVjdFVSTEZvclBhZ2UgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoeyBwYWdlTnVtYmVyLCBwYWdlSW5kZXggfTogUGFnZU51bWJlcik6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgICBpZiAodHlwZW9mIHBhZ2VJbmRleCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcGFnZU51bWJlciA9IHBhZ2VJbmRleCArIDE7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHBhZ2VOdW1iZXIgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncHJvcCBcInBhZ2VOdW1iZXJcIiBpcyBub3QgYSBudW1iZXInKTtcbiAgICAgIH1cbiAgICAgIGlmICghcGRmRG9jUHJveHkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3QgYnVpbGQgYSBwYWdlIHVudGlsIGEgXCJwZGZEb2NQcm94eVwiIGlzIHNldCBvbiBEb2N1bWVudENvbnRleHQnKTtcbiAgICAgIH1cblxuICAgICAgLy8gRG9uJ3QgbmVlZCB0byBzdGFydCBhbm90aGVyIHRhc2sgaWYgYWxyZWFkeSByZW5kZXJlZFxuICAgICAgY29uc3QgZXhpc3RpbmdQcm9taXNlID0gcGFnZVJlbmRlclN0YXRlcy5nZXQocGFnZU51bWJlcik/LnByb21pc2U7XG4gICAgICBpZiAoZXhpc3RpbmdQcm9taXNlKSB7XG4gICAgICAgIHJldHVybiBleGlzdGluZ1Byb21pc2U7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHByb21pc2UgPSBidWlsZFBhZ2VPYmplY3RVUkwoe1xuICAgICAgICBwYWdlTnVtYmVyLFxuICAgICAgICBwZGZEb2NQcm94eSxcbiAgICAgICAgcGl4ZWxSYXRpbyxcbiAgICAgICAgc2NhbGUsXG4gICAgICAgIHByb21pc2VUaW1lc3RhbXA6IGZsdXNoVGltZXN0YW1wLFxuICAgICAgfSk7XG4gICAgICBjb25zdCByZW5kZXJTdGF0ZTogUmVuZGVyU3RhdGUgPSB7XG4gICAgICAgIHByb21pc2UsXG4gICAgICAgIG9iamVjdFVSTDogbnVsbCxcbiAgICAgIH07XG4gICAgICBwcm9taXNlLnRoZW4ob2JqZWN0VVJMID0+IHtcbiAgICAgICAgaWYgKCFvYmplY3RVUkwpIHJldHVybjtcbiAgICAgICAgcmVuZGVyU3RhdGUub2JqZWN0VVJMID0gb2JqZWN0VVJMO1xuICAgICAgICBjb25zdCBuZXdQYWdlUmVuZGVyU3RhdGVzID0gbmV3IE1hcChwYWdlUmVuZGVyU3RhdGVzUmVmLmN1cnJlbnQpO1xuICAgICAgICBPYmplY3QuZnJlZXplKG5ld1BhZ2VSZW5kZXJTdGF0ZXMpO1xuICAgICAgICBzZXRQYWdlUmVuZGVyU3RhdGVzKG5ld1BhZ2VSZW5kZXJTdGF0ZXMpO1xuICAgICAgfSk7XG4gICAgICBjb25zdCBuZXdQYWdlUmVuZGVyU3RhdGVzID0gbmV3IE1hcChwYWdlUmVuZGVyU3RhdGVzUmVmLmN1cnJlbnQpO1xuICAgICAgbmV3UGFnZVJlbmRlclN0YXRlcy5zZXQocGFnZU51bWJlciwgcmVuZGVyU3RhdGUpO1xuICAgICAgT2JqZWN0LmZyZWV6ZShuZXdQYWdlUmVuZGVyU3RhdGVzKTtcbiAgICAgIHNldFBhZ2VSZW5kZXJTdGF0ZXMobmV3UGFnZVJlbmRlclN0YXRlcyk7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9LFxuICAgIFtwYWdlUmVuZGVyU3RhdGVzLCBwZGZEb2NQcm94eSwgc2NhbGVdXG4gICk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCB2aXNpYmxlUGFnZXMgPSBbLi4udmlzaWJsZVBhZ2VSYXRpb3Mua2V5cygpXTtcbiAgICBpZiAoIXBkZkRvY1Byb3h5IHx8IFsuLi5wYWdlUmVuZGVyU3RhdGVzLmtleXMoKV0ubGVuZ3RoID09PSBwZGZEb2NQcm94eS5udW1QYWdlcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHByaW9yaXR5UXVldWUgPSBnZXRQcmlvcml0eVF1ZXVlKHZpc2libGVQYWdlcywgcGRmRG9jUHJveHkubnVtUGFnZXMpO1xuICAgIGZvciAoY29uc3QgcGFnZU51bWJlciBvZiBwcmlvcml0eVF1ZXVlKSB7XG4gICAgICBidWlsZE9iamVjdFVSTEZvclBhZ2UoeyBwYWdlTnVtYmVyIH0pO1xuICAgIH1cbiAgfSwgW3BhZ2VSZW5kZXJTdGF0ZXMsIHBkZkRvY1Byb3h5LCB2aXNpYmxlUGFnZVJhdGlvc10pO1xuXG4gIC8vIEZsdXNoIHBhZ2UgcmVuZGVyIHN0YXRlcyB3aGVuIHNjYWxlIGNoYW5nZXNcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBDbGVhbiBtZW1vcnkgb2Ygb2xkIGdlbmVyYXRlZCBpbWFnZXNcbiAgICBmb3IgKGNvbnN0IFssIHJlbmRlclN0YXRlXSBvZiBwYWdlUmVuZGVyU3RhdGVzUmVmLmN1cnJlbnQpIHtcbiAgICAgIGlmIChyZW5kZXJTdGF0ZS5vYmplY3RVUkwpIHtcbiAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTChyZW5kZXJTdGF0ZS5vYmplY3RVUkwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlmIGN1cnJlbnQgYXN5bmMgcHJvbWlzZXMgZG9udCBoYXZlIHRoaXMgdGltZXN0YW1wLCB0aGVuIHdlIGZsdXNoIHRoZW1cbiAgICBmbHVzaFRpbWVzdGFtcCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gICAgLy8gQ2xlYXIgYWxsIHBhZ2UgcmVuZGVyIHN0YXRlcywgc28gcGFnZXMgY2FuIHJlYnVpbGQgaW1hZ2VzXG4gICAgY29uc3QgbmV3UGFnZVJlbmRlclN0YXRlcyA9IG5ldyBNYXAoKTtcbiAgICBPYmplY3QuZnJlZXplKG5ld1BhZ2VSZW5kZXJTdGF0ZXMpO1xuICAgIHNldFBhZ2VSZW5kZXJTdGF0ZXMobmV3UGFnZVJlbmRlclN0YXRlcyk7XG4gIH0sIFtzY2FsZSwgcGl4ZWxSYXRpb10pO1xuXG4gIHJldHVybiB7XG4gICAgcGFnZVJlbmRlclN0YXRlcyxcbiAgICBnZXRPYmplY3RVUkxGb3JQYWdlLFxuICAgIGlzQnVpbGRpbmdPYmplY3RVUkxGb3JQYWdlLFxuICAgIGlzRmluaXNoZWRCdWlsZGluZ0FsbFBhZ2VzT2JqZWN0VVJMcyxcbiAgICBidWlsZE9iamVjdFVSTEZvclBhZ2UsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROZWlnaGJvcmluZ1BhZ2VzKHBhZ2VzOiBudW1iZXJbXSwgbnVtVG90YWxQYWdlczogbnVtYmVyKTogbnVtYmVyW10ge1xuICByZXR1cm4gcGFnZXMubGVuZ3RoID09PSAwXG4gICAgPyBbXVxuICAgIDogW01hdGgubWF4KDEsIHBhZ2VzWzBdIC0gMSksIE1hdGgubWluKG51bVRvdGFsUGFnZXMsIHBhZ2VzW3BhZ2VzLmxlbmd0aCAtIDFdICsgMSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJpb3JpdHlRdWV1ZSh2aXNpYmxlUGFnZXM6IG51bWJlcltdLCBudW1QYWdlczogbnVtYmVyKTogbnVtYmVyW10ge1xuICBjb25zdCB2aXNpYmxlUGFnZXNOZWlnaGJvcnMgPSBnZXROZWlnaGJvcmluZ1BhZ2VzKHZpc2libGVQYWdlcywgbnVtUGFnZXMpO1xuICBjb25zdCBhbGxQYWdlcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IG51bVBhZ2VzIH0sIChfLCBpKSA9PiBpICsgMSk7XG4gIGNvbnN0IHByaW9yaXR5UXVldWUgPSBuZXcgU2V0KFsuLi52aXNpYmxlUGFnZXMsIC4uLnZpc2libGVQYWdlc05laWdoYm9ycywgLi4uYWxsUGFnZXNdKTsgLy8gcHV0IGludG8gc2V0IHRvIHJlbW92ZSBkdXBsaWNhdHNcbiAgcmV0dXJuIEFycmF5LmZyb20ocHJpb3JpdHlRdWV1ZSk7IC8vIGNvbnZlcnQgc2V0IHRvIGFycmF5XG59XG5cbi8vIFRoaXMgYm9vc3QgY2F1c2VzIHRoZSByZW5kZXJlZCBpbWFnZSB0byBiZSBzY2FsZWQgdXAgYnkgdGhpcyBhbW91bnRcbmNvbnN0IFNDQUxFX0JPT1NUID0gMjtcblxuLy8gR2VuZXJhdGUgYW4gb2JqZWN0IHVybCBmb3IgYSBnaXZlbiBwYWdlLCByZW5kZXJlZCBpbiBhIHNoYXJlZCBjYW52YXNcbmFzeW5jIGZ1bmN0aW9uIGJ1aWxkUGFnZU9iamVjdFVSTCh7XG4gIHBhZ2VOdW1iZXIsXG4gIHBkZkRvY1Byb3h5LFxuICBwaXhlbFJhdGlvID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93LmRldmljZVBpeGVsUmF0aW8gOiBudWxsKSB8fCAwLFxuICBzY2FsZSA9IDEsXG4gIGltYWdlVHlwZSA9ICdpbWFnZS9wbmcnLFxuICBpbWFnZVF1YWxpdHkgPSAxLjAsXG4gIHByb21pc2VUaW1lc3RhbXAsXG59OiB7XG4gIHBhZ2VOdW1iZXI6IG51bWJlcjtcbiAgcGRmRG9jUHJveHk6IHBkZmpzLlBERkRvY3VtZW50UHJveHk7XG4gIHBpeGVsUmF0aW8/OiBudW1iZXI7XG4gIHNjYWxlPzogbnVtYmVyO1xuICBpbWFnZVR5cGU/OiBzdHJpbmc7XG4gIGltYWdlUXVhbGl0eT86IG51bWJlcjtcbiAgcHJvbWlzZVRpbWVzdGFtcDogbnVtYmVyO1xufSk6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IHBhZ2VQcm94eSA9IGF3YWl0IHBkZkRvY1Byb3h5LmdldFBhZ2UocGFnZU51bWJlcik7XG5cbiAgY29uc3QgYmxvYjogTnVsbGFibGU8QmxvYj4gfCBudW1iZXIgPSBhd2FpdCB1c2VSZW5kZXJDYW52YXMoYXN5bmMgY2FudmFzID0+IHtcbiAgICBpZiAocHJvbWlzZVRpbWVzdGFtcCAhPT0gZmx1c2hUaW1lc3RhbXApIHtcbiAgICAgIHJldHVybiBwcm9taXNlVGltZXN0YW1wOyAvLyBmbHVzaCBzdGFsZSBwcm9taXNlXG4gICAgfVxuICAgIC8vIFJlbmRlciBwYWdlIGluIGEgY2FudmFzXG4gICAgY29uc3Qgdmlld3BvcnQgPSBwYWdlUHJveHkuZ2V0Vmlld3BvcnQoeyBzY2FsZTogc2NhbGUgKiBwaXhlbFJhdGlvICogU0NBTEVfQk9PU1QgfSk7XG4gICAgY2FudmFzLmhlaWdodCA9IHZpZXdwb3J0LmhlaWdodDtcbiAgICBjYW52YXMud2lkdGggPSB2aWV3cG9ydC53aWR0aDtcbiAgICBjb25zdCBjYW52YXNDb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgaWYgKCFjYW52YXNDb250ZXh0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhbnZhcyB3YXMgdW5hYmxlIHRvIGdldCBhIGNvbnRleHQnKTtcbiAgICB9XG5cbiAgICBjb25zdCByZW5kZXJUYXNrID0gcGFnZVByb3h5LnJlbmRlcih7XG4gICAgICBjYW52YXNDb250ZXh0LFxuICAgICAgdmlld3BvcnQsXG4gICAgICBpbnRlbnQ6ICdwcmludCcsIC8vIGltbWVkaWF0ZWx5IHJlbmRlciBwYWdlcyBvbiBpbmFjdGl2ZSBwYWdlc1xuICAgIH0pO1xuICAgIGF3YWl0IHJlbmRlclRhc2sucHJvbWlzZTtcblxuICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxNikpO1xuXG4gICAgLy8gRmV0Y2ggYSBibG9iIGZvciBhbiBpbWFnZSBvZiB0aGUgY2FudmFzXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNhbnZhcy50b0Jsb2IoYmxvYiA9PiByZXNvbHZlKGJsb2IpLCBpbWFnZVR5cGUsIGltYWdlUXVhbGl0eSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIGJsb2IgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIC8vIENvbnZlcnQgYmxvYiBpbWFnZSB0byBvYmplY3QgdXJsXG4gIGlmICghYmxvYikge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5hYmxlIHRvIGNyZWF0ZSBpbWFnZSBmcm9tIHBhZ2UnKTtcbiAgfVxuICByZXR1cm4gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbn1cblxubGV0IHJlbmRlckNhbnZhczogTnVsbGFibGU8SFRNTENhbnZhc0VsZW1lbnQ+ID0gbnVsbDtcblxuLy8gR2V0IG9yIGNyZWF0ZSBhIHNoYXJlZCBjYW52YXMgZm9yIHJlbmRlcmluZyBwYWdlcyBpblxuZnVuY3Rpb24gZ2V0UmVuZGVyQ2FudmFzKCk6IEhUTUxDYW52YXNFbGVtZW50IHtcbiAgaWYgKCFyZW5kZXJDYW52YXMpIHtcbiAgICByZW5kZXJDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgfVxuICByZXR1cm4gcmVuZGVyQ2FudmFzO1xufVxuXG5sZXQgZmx1c2hUaW1lc3RhbXAgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbmxldCBuZXh0Q2FudmFzVXNlOiBQcm9taXNlPGFueT4gPSBQcm9taXNlLnJlc29sdmUoKTtcblxuLy8gVXNlIHRoZSBzaGFyZWQgY2FudmFzIHRvIHJlbmRlciBhIHBhZ2UsIHVzaW5nIHByb21pc2VzIHRvIGNyZWF0ZSBhIHF1ZXVlXG5hc3luYyBmdW5jdGlvbiB1c2VSZW5kZXJDYW52YXM8VD4oY2FsbGJhY2s6IChjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50KSA9PiBQcm9taXNlPFQ+KTogUHJvbWlzZTxUPiB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbiAgbGV0IHJlc29sdmUgPSAoX3ZhbHVlOiBUIHwgUHJvbWlzZUxpa2U8VD4pID0+IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG4gIGxldCByZWplY3QgPSAoX3JlYXNvbjogYW55KSA9PiB7fTtcbiAgY29uc3QgcHJvbSA9IG5ldyBQcm9taXNlPFQ+KChfcmVzb2x2ZSwgX3JlamVjdCkgPT4ge1xuICAgIHJlc29sdmUgPSBfcmVzb2x2ZTtcbiAgICByZWplY3QgPSBfcmVqZWN0O1xuICB9KTtcbiAgbmV4dENhbnZhc1VzZSA9IG5leHRDYW52YXNVc2UudGhlbigoKSA9PiBjYWxsYmFjayhnZXRSZW5kZXJDYW52YXMoKSkudGhlbihyZXNvbHZlLCByZWplY3QpKTtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvbTtcbiAgYXdhaXQgbmV3IFByb21pc2UocmVzID0+IHNldFRpbWVvdXQocmVzLCAxNikpOyAvLyBHaXZlIHNvbWUgdGltZSBiZXR3ZWVuIHJlbmRlcnNcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gJ3JlYWN0LXBkZic7XG5pbXBvcnQgeyBSZW5kZXJGdW5jdGlvbiB9IGZyb20gJ3JlYWN0LXBkZi9kaXN0L1BhZ2UnO1xuXG5pbXBvcnQgeyBEb2N1bWVudENvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L0RvY3VtZW50Q29udGV4dCc7XG5pbXBvcnQgeyBQYWdlUmVuZGVyQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvUGFnZVJlbmRlckNvbnRleHQnO1xuaW1wb3J0IHsgVHJhbnNmb3JtQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvVHJhbnNmb3JtQ29udGV4dCc7XG5pbXBvcnQgeyBVaUNvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L1VpQ29udGV4dCc7XG5pbXBvcnQgeyBnZXRDbGFzc05hbWVTdWZmaXhGcm9tUmVuZGVyVHlwZSwgUmVuZGVyVHlwZSB9IGZyb20gJy4uL3V0aWxzL3JlYWRlci11dGlscyc7XG5pbXBvcnQgeyBnZW5lcmF0ZVBhZ2VJZEZyb21JbmRleCB9IGZyb20gJy4uL3V0aWxzL3Njcm9sbCc7XG5pbXBvcnQgeyBjb21wdXRlUGFnZVN0eWxlLCBnZXRQYWdlV2lkdGggfSBmcm9tICcuLi91dGlscy9zdHlsZSc7XG5pbXBvcnQgeyBIaWdobGlnaHRPdmVybGF5IH0gZnJvbSAnLi9IaWdobGlnaHRPdmVybGF5JztcbmltcG9ydCB7IE92ZXJsYXkgfSBmcm9tICcuL092ZXJsYXknO1xuXG4vKipcbiAqIEEgc3Vic2V0IG9mIHJlYWN0LXBkZidzIFBhZ2UgY29tcG9uZW50IHByb3BzIGV4cG9zZWQgYnkgdGhpcyB3cmFwcGVyXG4gKi9cbmV4cG9ydCB0eXBlIFBhZ2VQcm9wcyA9IHtcbiAgZXJyb3I/OiBzdHJpbmcgfCBSZWFjdC5SZWFjdEVsZW1lbnQgfCBSZW5kZXJGdW5jdGlvbjtcbiAgbG9hZGluZz86IHN0cmluZyB8IFJlYWN0LlJlYWN0RWxlbWVudCB8IFJlbmRlckZ1bmN0aW9uO1xuICBub0RhdGE/OiBzdHJpbmcgfCBSZWFjdC5SZWFjdEVsZW1lbnQgfCBSZW5kZXJGdW5jdGlvbjtcbiAgcGFnZUluZGV4OiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9IHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBsb2FkaW5nQ29udGVudEZvckJ1aWxkaW5nSW1hZ2U/OiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3RFbGVtZW50PHR5cGVvZiBIaWdobGlnaHRPdmVybGF5IHwgdHlwZW9mIE92ZXJsYXk+O1xuICByZW5kZXJUeXBlOiBSZW5kZXJUeXBlO1xufSAmIFBhZ2VQcm9wcztcblxuZXhwb3J0IGNvbnN0IFBhZ2VXcmFwcGVyOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoe1xuICBjaGlsZHJlbixcbiAgZXJyb3IsXG4gIGxvYWRpbmcsXG4gIGxvYWRpbmdDb250ZW50Rm9yQnVpbGRpbmdJbWFnZSxcbiAgbm9EYXRhLFxuICBwYWdlSW5kZXgsXG4gIHJlbmRlclR5cGUsXG4gIC4uLmV4dHJhUHJvcHNcbn06IFByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcm90YXRpb24sIHNjYWxlIH0gPSBSZWFjdC51c2VDb250ZXh0KFRyYW5zZm9ybUNvbnRleHQpO1xuICBjb25zdCB7IHBhZ2VEaW1lbnNpb25zLCBnZXRPdXRsaW5lVGFyZ2V0cywgc2V0TnVtUGFnZXNMb2FkZWQgfSA9XG4gICAgUmVhY3QudXNlQ29udGV4dChEb2N1bWVudENvbnRleHQpO1xuICBjb25zdCB7IGdldE9iamVjdFVSTEZvclBhZ2UsIGlzQnVpbGRpbmdPYmplY3RVUkxGb3JQYWdlIH0gPSBSZWFjdC51c2VDb250ZXh0KFBhZ2VSZW5kZXJDb250ZXh0KTtcbiAgY29uc3QgeyBpc0xvYWRpbmcgfSA9IFJlYWN0LnVzZUNvbnRleHQoVWlDb250ZXh0KTtcblxuICBjb25zdCBvYmplY3RVUkxGb3JQYWdlID0gZ2V0T2JqZWN0VVJMRm9yUGFnZSh7IHBhZ2VJbmRleCB9KTtcbiAgY29uc3QgaXNCdWlsZGluZ1BhZ2VJbWFnZSA9IGlzQnVpbGRpbmdPYmplY3RVUkxGb3JQYWdlKHsgcGFnZUluZGV4IH0pO1xuXG4gIC8vIERvbid0IGRpc3BsYXkgdW50aWwgd2UgaGF2ZSBwYWdlIHNpemUgZGF0YVxuICAvLyBUT0RPOiBIYW5kbGUgdGhpcyBuaWNlciBzbyB3ZSBkaXNwbGF5IGVpdGhlciB0aGUgbG9hZGluZyBvciBlcnJvciB0cmVhdG1lbnRcbiAgaWYgKCFwYWdlRGltZW5zaW9ucykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgZ2V0UGFnZVN0eWxlID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnN0IHN0eWxlczogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPSBjb21wdXRlUGFnZVN0eWxlKHBhZ2VEaW1lbnNpb25zLCByb3RhdGlvbiwgc2NhbGUpO1xuICAgIGlmIChvYmplY3RVUkxGb3JQYWdlKSB7XG4gICAgICBzdHlsZXMuYmFja2dyb3VuZEltYWdlID0gYHVybCgke29iamVjdFVSTEZvclBhZ2V9KWA7XG4gICAgfVxuICAgIHJldHVybiBzdHlsZXM7XG4gIH0sIFtwYWdlRGltZW5zaW9ucywgcm90YXRpb24sIHNjYWxlLCBvYmplY3RVUkxGb3JQYWdlXSk7XG5cbiAgY29uc3QgZ2V0V2lkdGggPSBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgcmV0dXJuIGdldFBhZ2VXaWR0aChwYWdlRGltZW5zaW9ucywgcm90YXRpb24pO1xuICB9LCBbcGFnZURpbWVuc2lvbnMsIHJvdGF0aW9uXSk7XG5cbiAgY29uc3Qgb3V0bGluZVRhcmdldHMgPSBnZXRPdXRsaW5lVGFyZ2V0cyh7XG4gICAgcGFnZUluZGV4LFxuICAgIHNjYWxlLFxuICAgIHJvdGF0aW9uLFxuICAgIHBhZ2VEaW1lbnNpb25zLFxuICB9KTtcblxuICBjb25zdCBtYXJrUGFnZUFzTG9hZGVkID0gUmVhY3QudXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldE51bVBhZ2VzTG9hZGVkKHByZXZOdW1QYWdlc0xvYWRlZCA9PiBwcmV2TnVtUGFnZXNMb2FkZWQgKyAxKTtcbiAgfSwgW10pO1xuXG4gIC8vIFdpZHRoIG5lZWRzIHRvIGJlIHNldCB0byBwcmV2ZW50IHRoZSBvdXRlcm1vc3QgUGFnZSBkaXYgZnJvbSBleHRlbmRpbmcgdG8gZml0IHRoZSBwYXJlbnQsXG4gIC8vIGFuZCBtaXMtYWxpZ25pbmcgdGhlIHRleHQgbGF5ZXIuXG4gIC8vIFRPRE86IENhbiB3ZSBDU1MgdGhpcyB0byBhdXRvLXNocmluaz9cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBpZD17Z2VuZXJhdGVQYWdlSWRGcm9tSW5kZXgocGFnZUluZGV4KX1cbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lcyhcbiAgICAgICAgJ3BkZi1yZWFkZXJfX3BhZ2UnLFxuICAgICAgICB7ICdwZGYtcmVhZGVyX19wYWdlLS1oYXMtcGFnZS1pbWFnZSc6IG9iamVjdFVSTEZvclBhZ2UgfSxcbiAgICAgICAgeyAncGRmLXJlYWRlcl9fcGFnZS0tbm8tcGFnZS1pbWFnZSc6ICFvYmplY3RVUkxGb3JQYWdlIH0sXG4gICAgICAgIGBwZGYtcmVhZGVyX19wYWdlLS1yZW5kZXItdHlwZS0ke2dldENsYXNzTmFtZVN1ZmZpeEZyb21SZW5kZXJUeXBlKHJlbmRlclR5cGUpfWAsXG4gICAgICAgIHsgJ3BkZi1yZWFkZXJfX2lzLWJ1aWxkaW5nLXBhZ2UtaW1hZ2UnOiBpc0J1aWxkaW5nUGFnZUltYWdlIH1cbiAgICAgICl9XG4gICAgICBkYXRhLXBhZ2UtbnVtYmVyPXtwYWdlSW5kZXggKyAxfVxuICAgICAgc3R5bGU9e2dldFBhZ2VTdHlsZSgpfVxuICAgICAgey4uLmV4dHJhUHJvcHN9PlxuICAgICAge2NoaWxkcmVufVxuICAgICAge2lzQnVpbGRpbmdQYWdlSW1hZ2UgJiYgIWlzTG9hZGluZyAmJiAoXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ3BkZi1yZWFkZXJfX3BhZ2UnLCB7XG4gICAgICAgICAgICAncGRmLXJlYWRlcl9fcGFnZS0taXMtbG9hZGluZy1pbWFnZSc6IGlzQnVpbGRpbmdQYWdlSW1hZ2UsXG4gICAgICAgICAgfSl9PlxuICAgICAgICAgIHtsb2FkaW5nQ29udGVudEZvckJ1aWxkaW5nSW1hZ2V9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICAgIDxQYWdlXG4gICAgICAgIHdpZHRoPXtnZXRXaWR0aCgpfVxuICAgICAgICBlcnJvcj17ZXJyb3J9XG4gICAgICAgIGxvYWRpbmc9e2xvYWRpbmd9XG4gICAgICAgIG5vRGF0YT17bm9EYXRhfVxuICAgICAgICBwYWdlSW5kZXg9e3BhZ2VJbmRleH1cbiAgICAgICAgc2NhbGU9e3NjYWxlfVxuICAgICAgICByb3RhdGU9e3JvdGF0aW9ufVxuICAgICAgICByZW5kZXJBbm5vdGF0aW9uTGF5ZXI9e3RydWV9XG4gICAgICAgIG9uR2V0VGV4dFN1Y2Nlc3M9e21hcmtQYWdlQXNMb2FkZWR9XG4gICAgICAvPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwZGYtcmVhZGVyX19wYWdlX19vdXRsaW5lLXRhcmdldHNcIj5cbiAgICAgICAge291dGxpbmVUYXJnZXRzLm1hcCgoeyBkZXN0LCBsZWZ0UHgsIHRvcFB4IH0pID0+IChcbiAgICAgICAgICA8c3BhblxuICAgICAgICAgICAga2V5PXtkZXN0fVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwicGRmLXJlYWRlcl9fcGFnZV9fb3V0bGluZS10YXJnZXRcIlxuICAgICAgICAgICAgZGF0YS1vdXRsaW5lLXRhcmdldC1kZXN0PXtkZXN0fVxuICAgICAgICAgICAgZGF0YS10ZXN0LWlkPVwicGRmLXJlYWRlcl9fcGFnZV9fb3V0bGluZS10YXJnZXRcIlxuICAgICAgICAgICAgc3R5bGU9e3sgbGVmdDogbGVmdFB4ICsgJ3B4JywgdG9wOiB0b3BQeCArICdweCcgfX1cbiAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IHR5cGUgUHJvcHMgPSB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG59O1xuXG4vKipcbiAqIEhUTUwgYW5jaG9yIHRhZyBhbGxvd3MgeW91IHRvIGRvd25sb2FkIGEgZmlsZSBmcm9tIHRoZSBzYW1lIG9yaWdpbi5cbiAqIFRoaXMgaXMgYSB3b3JrYXJvdW5kIHRvIGRvd25sb2FkIGEgZmlsZSBzZXJ2ZWQgZnJvbSBhIGRpZmZlcmVudCBvcmlnaW5cbiAqL1xuZXhwb3J0IGNvbnN0IFByaW50QnV0dG9uOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoe1xuICBjaGlsZHJlbixcbiAgY2xhc3NOYW1lLFxuICAuLi5leHRyYVByb3BzXG59OiBQcm9wcykgPT4ge1xuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2xpY2tQcmludCgpfVxuICAgICAgYXJpYS1sYWJlbD1cIlByaW50IFBERlwiXG4gICAgICBjbGFzc05hbWU9e2BwZGYtcmVhZGVyX19wcmludC1idG4gJHtjbGFzc05hbWV9YH1cbiAgICAgIHsuLi5leHRyYVByb3BzfT5cbiAgICAgIHtjaGlsZHJlbiA/IGNoaWxkcmVuIDogJ1ByaW50J31cbiAgICA8L2J1dHRvbj5cbiAgKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkNsaWNrUHJpbnQoKTogdm9pZCB7XG4gIHdpbmRvdy5wcmludCgpO1xufVxuIiwiLy8gVGhpcyBmdW5jdGlvbiByZXR1cm5zIG1pbiBvciBtYXggaWYgdmFsdWUgZXhjZWVkcyB0aGUgcmFuZ2UsIG90aGVyd2lzZVxuLy8gdGhlIG9yaWdpbmFsIHZhbHVlIGlzIHJldHVybmVkXG5leHBvcnQgY29uc3QgYmFuZFBhc3NGaWx0ZXIgPSAodmFsdWU6IG51bWJlciwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KHZhbHVlLCBtaW4pLCBtYXgpO1xufTtcbiIsImltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBiYW5kUGFzc0ZpbHRlciB9IGZyb20gJy4uL3V0aWxzL3V0aWwnO1xuXG5jb25zdCBERUZBVUxUX01JTl9XSURUSF9QWCA9IDMwMDtcbmNvbnN0IERFRkFVTFRfTUFYX1dJRFRIX1BYID0gNzAwO1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9IHtcbiAgbWluV2lkdGhQeD86IG51bWJlcjtcbiAgbWF4V2lkdGhQeD86IG51bWJlcjtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgaGVhZGVyPzogc3RyaW5nIHwgUmVhY3QuUmVhY3RFbGVtZW50O1xuICBjb250ZW50Pzogc3RyaW5nIHwgUmVhY3QuUmVhY3RFbGVtZW50O1xuICBmb290ZXI/OiBzdHJpbmcgfCBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIGlzVmlzaWJsZT86IGJvb2xlYW47XG4gIGRyYWdIYW5kbGVQb3NpdGlvbj86IHN0cmluZztcbiAgY2xvc2VCdXR0b24/OiBib29sZWFuIHwgUmVhY3QuUmVhY3RFbGVtZW50O1xuICBvbkNsb3NlPzogKCkgPT4gdm9pZDtcbn07XG5cbmV4cG9ydCBjb25zdCBTaWRlUGFuZWw6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PFByb3BzPiA9ICh7XG4gIG1pbldpZHRoUHggPSBERUZBVUxUX01JTl9XSURUSF9QWCxcbiAgbWF4V2lkdGhQeCA9IERFRkFVTFRfTUFYX1dJRFRIX1BYLFxuICBjbGFzc05hbWUsXG4gIGNoaWxkcmVuLFxuICBoZWFkZXIsXG4gIGNvbnRlbnQsXG4gIGZvb3RlcixcbiAgZHJhZ0hhbmRsZVBvc2l0aW9uLFxuICBjbG9zZUJ1dHRvbixcbiAgaXNWaXNpYmxlID0gdHJ1ZSxcbiAgb25DbG9zZSxcbiAgLi4uZXh0cmFQcm9wc1xufTogUHJvcHMpID0+IHtcbiAgLy8gVGhlIG92ZXJsYXkgaXMgdXNlZCB0byBjYXRjaCBtb3VzZSB1cCBldmVudHMgb3ZlciBpZnJhbWUgY29udGVudHNcbiAgLy8gc28gdGhlIG1vdXNldXAgZXZlbnRzIHdpbGwgbm90IGJlIG1pc3NlZCBpZiB0aGUgY2xpY2sgaXMgcmVsZWFzZWQgb3ZlclxuICAvLyB0aGUgaWZyYW1lIGFuZCB0aGUgZXZlbnQgbGlzdGVuZXJzIHdpbGwgZmFpbCB0byBiZSByZW1vdmVkXG4gIGNvbnN0IFtpc092ZXJsYXlWaXNpYmxlLCBzZXRJc092ZXJsYXlWaXNpYmxlXSA9IFJlYWN0LnVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcbiAgY29uc3QgW3BhbmVsV2lkdGgsIHNldFBhbmVsV2lkdGhdID0gUmVhY3QudXNlU3RhdGU8bnVtYmVyPihtaW5XaWR0aFB4KTtcbiAgY29uc3Qgc2lkZVBhbmVsUmVmID0gUmVhY3QudXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKTtcbiAgY29uc3QgZHJhZ0hhbmRsZVJlZiA9IFJlYWN0LnVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgcmVuZGVyQ2xvc2VCdXR0b24gPSAoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBjbG9zZUJ1dHRvbiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cInBkZi1yZWFkZXJfX3NpZGUtcGFuZWwtY2xvc2UtYnV0dG9uXCIgb25DbGljaz17b25DbG9zZX0+XG4gICAgICAgICAgeFxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBjbG9zZUJ1dHRvbjtcbiAgfTtcblxuICBjb25zdCByZW5kZXJEcmFnSGFuZGxlID0gKCkgPT4ge1xuICAgIGNvbnN0IGlzRHJhZ0hhbmRsZU9uTGVmdCA9IGRyYWdIYW5kbGVQb3NpdGlvbiA9PT0gJ2xlZnQnO1xuICAgIGNvbnN0IGlzRHJhZ0hhbmRsZU9uUmlnaHQgPSBkcmFnSGFuZGxlUG9zaXRpb24gPT09ICdyaWdodCc7XG4gICAgaWYgKCFpc0RyYWdIYW5kbGVPbkxlZnQgJiYgIWlzRHJhZ0hhbmRsZU9uUmlnaHQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IG9uTW91c2VNb3ZlID0gKG1vdXNlTW92ZUV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCA9PiB7XG4gICAgICBpZiAoIXNpZGVQYW5lbFJlZiB8fCAhc2lkZVBhbmVsUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBuZXdXaWR0aCA9XG4gICAgICAgIGRyYWdIYW5kbGVQb3NpdGlvbiA9PT0gJ2xlZnQnXG4gICAgICAgICAgPyBzaWRlUGFuZWxSZWYuY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5yaWdodCAtIG1vdXNlTW92ZUV2ZW50LnBhZ2VYXG4gICAgICAgICAgOiBtb3VzZU1vdmVFdmVudC5wYWdlWCAtIHNpZGVQYW5lbFJlZi5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cbiAgICAgIHNldFBhbmVsV2lkdGgoYmFuZFBhc3NGaWx0ZXIobmV3V2lkdGgsIG1pbldpZHRoUHgsIG1heFdpZHRoUHgpKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgb25Nb3VzZVVwID0gKCk6IHZvaWQgPT4ge1xuICAgICAgLy8gZHJvcCBvcGFjaXR5IHN0eWxpbmcgb24gZHJhZyBoYW5kbGVcbiAgICAgIGlmIChkcmFnSGFuZGxlUmVmICYmIGRyYWdIYW5kbGVSZWYuY3VycmVudCkge1xuICAgICAgICBkcmFnSGFuZGxlUmVmLmN1cnJlbnQucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgfVxuICAgICAgc2V0SXNPdmVybGF5VmlzaWJsZShmYWxzZSk7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgb25EcmFnZ2luZ0hhbmRsZSA9ICgpOiB2b2lkID0+IHtcbiAgICAgIC8vIHByZXZlbnQgZmxhc2hpbmcgd2hlbiB0aGUgbW91c2UgaG92ZXJzIG91dHNpZGUgdGhlIHJlc2l6ZSB6b25lXG4gICAgICBpZiAoZHJhZ0hhbmRsZVJlZiAmJiBkcmFnSGFuZGxlUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgZHJhZ0hhbmRsZVJlZi5jdXJyZW50LnN0eWxlLm9wYWNpdHkgPSAnMSc7XG4gICAgICB9XG5cbiAgICAgIHNldElzT3ZlcmxheVZpc2libGUodHJ1ZSk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9uTW91c2VVcCwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBvbkNoYW5nZVBhbmVsV2lkdGggPSAoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KTogdm9pZCA9PiB7XG4gICAgICBjb25zdCBuZXdXaWR0aCA9IHBhcnNlSW50KGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWUpO1xuICAgICAgc2V0UGFuZWxXaWR0aChiYW5kUGFzc0ZpbHRlcihuZXdXaWR0aCwgbWluV2lkdGhQeCwgbWF4V2lkdGhQeCkpO1xuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoJ3BkZi1yZWFkZXJfX3Jlc2l6ZS16b25lJywge1xuICAgICAgICAgICdwZGYtcmVhZGVyX19yZXNpemUtem9uZS0tbGVmdCc6IGlzRHJhZ0hhbmRsZU9uTGVmdCxcbiAgICAgICAgICAncGRmLXJlYWRlcl9fcmVzaXplLXpvbmUtLXJpZ2h0JzogaXNEcmFnSGFuZGxlT25SaWdodCxcbiAgICAgICAgfSl9PlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICBjbGFzc05hbWU9XCJwZGYtcmVhZGVyX19kcmFnLWhhbmRsZV9fYXNzaXN0aXZlLWlucHV0XCJcbiAgICAgICAgICB0eXBlPVwicmFuZ2VcIlxuICAgICAgICAgIG1pbj17bWluV2lkdGhQeH1cbiAgICAgICAgICBtYXg9e21heFdpZHRoUHh9XG4gICAgICAgICAgc3RlcD1cIjVcIlxuICAgICAgICAgIHZhbHVlPXtwYW5lbFdpZHRofVxuICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZVBhbmVsV2lkdGh9XG4gICAgICAgIC8+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICByZWY9e2RyYWdIYW5kbGVSZWZ9XG4gICAgICAgICAgcm9sZT1cInNsaWRlclwiXG4gICAgICAgICAgYXJpYS12YWx1ZW5vdz17cGFuZWxXaWR0aH1cbiAgICAgICAgICB0YWJJbmRleD17LTF9XG4gICAgICAgICAgb25Nb3VzZURvd249e29uRHJhZ2dpbmdIYW5kbGV9XG4gICAgICAgICAgY2xhc3NOYW1lPVwicGRmLXJlYWRlcl9fZHJhZy1oYW5kbGVcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBkZi1yZWFkZXJfX2RyYWctaGFuZGxlX19pbm5lclwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHJlZj17c2lkZVBhbmVsUmVmfVxuICAgICAgc3R5bGU9e3sgd2lkdGg6IHBhbmVsV2lkdGggfX1cbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NuYW1lcyhcbiAgICAgICAgJ3BkZi1yZWFkZXJfX3NpZGUtcGFuZWwnLFxuICAgICAgICB7ICdwZGYtcmVhZGVyX19zaWRlLXBhbmVsLS1oaWRkZW4nOiAhaXNWaXNpYmxlIH0sXG4gICAgICAgIGNsYXNzTmFtZVxuICAgICAgKX1cbiAgICAgIHsuLi5leHRyYVByb3BzfT5cbiAgICAgIHtyZW5kZXJEcmFnSGFuZGxlKCl9XG4gICAgICB7Y2xvc2VCdXR0b24gJiYgcmVuZGVyQ2xvc2VCdXR0b24oKX1cbiAgICAgIHtoZWFkZXIgJiYgPGgyIGNsYXNzTmFtZT1cInBkZi1yZWFkZXJfX3NpZGUtcGFuZWwtdGl0bGVcIj57aGVhZGVyfTwvaDI+fVxuICAgICAge2NvbnRlbnQgJiYgPGRpdiBjbGFzc05hbWU9XCJwZGYtcmVhZGVyX19zaWRlLXBhbmVsLWNvbnRlbnRcIj57Y29udGVudH08L2Rpdj59XG4gICAgICB7Zm9vdGVyICYmIDxkaXYgY2xhc3NOYW1lPVwicGRmLXJlYWRlcl9fc2lkZS1wYW5lbC1mb290ZXJcIj57Zm9vdGVyfTwvZGl2Pn1cbiAgICAgIHtjaGlsZHJlbn1cbiAgICAgIHtpc092ZXJsYXlWaXNpYmxlICYmIDxkaXYgY2xhc3NOYW1lPVwicGRmLXJlYWRlcl9fc2lkZS1wYW5lbC1vdmVybGF5XCIgLz59XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIiwiaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IFBhZ2VSZW5kZXJDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9QYWdlUmVuZGVyQ29udGV4dCc7XG5pbXBvcnQgeyBTY3JvbGxDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29udGV4dC9TY3JvbGxDb250ZXh0JztcbmltcG9ydCB7IGdldE1heFZpc2libGVFbGVtZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvTWF4VmlzaWJsZUVsZW1lbnQnO1xuaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tICcuLi90eXBlcy91dGlscyc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIHBhZ2VOdW1iZXI6IG51bWJlcjtcbn07XG5cbmV4cG9ydCBjb25zdCBUaHVtYm5haWw6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PFByb3BzPiA9ICh7IHBhZ2VOdW1iZXIgfTogUHJvcHMpID0+IHtcbiAgY29uc3QgeyBnZXRPYmplY3RVUkxGb3JQYWdlIH0gPSBSZWFjdC51c2VDb250ZXh0KFBhZ2VSZW5kZXJDb250ZXh0KTtcbiAgY29uc3QgeyBpc1BhZ2VWaXNpYmxlLCBzY3JvbGxUb1BhZ2UsIHZpc2libGVQYWdlUmF0aW9zIH0gPSBSZWFjdC51c2VDb250ZXh0KFNjcm9sbENvbnRleHQpO1xuICBjb25zdCBbbWF4VmlzaWJsZVBhZ2VOdW1iZXIsIHNldE1heFZpc2libGVQYWdlTnVtYmVyXSA9IFJlYWN0LnVzZVN0YXRlPE51bGxhYmxlPHN0cmluZz4+KG51bGwpO1xuICBjb25zdCBvYmplY3RVUkwgPSBnZXRPYmplY3RVUkxGb3JQYWdlKHsgcGFnZU51bWJlciB9KTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh2aXNpYmxlUGFnZVJhdGlvcy5zaXplICE9PSAwKSB7XG4gICAgICBjb25zdCBtYXggPSBnZXRNYXhWaXNpYmxlRWxlbWVudCh2aXNpYmxlUGFnZVJhdGlvcyk7XG4gICAgICBpZiAobWF4KSB7XG4gICAgICAgIHNldE1heFZpc2libGVQYWdlTnVtYmVyKG1heC50b1N0cmluZygpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFt2aXNpYmxlUGFnZVJhdGlvc10pO1xuXG4gIGNvbnN0IGlzVGh1bWJuYWlsVmlzaWJsZSA9XG4gICAgbWF4VmlzaWJsZVBhZ2VOdW1iZXIgJiZcbiAgICBwYXJzZUludChtYXhWaXNpYmxlUGFnZU51bWJlcikgPT09IHBhZ2VOdW1iZXIgJiZcbiAgICBpc1BhZ2VWaXNpYmxlKHsgcGFnZU51bWJlciB9KTtcblxuICBjb25zdCBvbkNsaWNrID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgZXZlbnQgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHNjcm9sbFRvUGFnZSh7IHBhZ2VOdW1iZXIgfSk7XG4gICAgfSxcbiAgICBbcGFnZU51bWJlciwgc2Nyb2xsVG9QYWdlXVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGFcbiAgICAgIGFyaWEtbGFiZWw9e2BzY3JvbGwgdG8gcGFnZSAke3BhZ2VOdW1iZXJ9YH1cbiAgICAgIGhyZWY9e2AjJHtwYWdlTnVtYmVyfWB9XG4gICAgICBvbkNsaWNrPXtvbkNsaWNrfVxuICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKFxuICAgICAgICAncGRmLXJlYWRlcl9fdGh1bWJuYWlsJyxcbiAgICAgICAgeyAncGRmLXJlYWRlcl9fdGh1bWJuYWlsLS1uby1pbWFnZSc6ICFvYmplY3RVUkwgfSxcbiAgICAgICAgeyAncGRmLXJlYWRlcl9fdGh1bWJuYWlsLS1pcy12aXNpYmxlJzogaXNUaHVtYm5haWxWaXNpYmxlIH1cbiAgICAgICl9XG4gICAgICBkYXRhLXBhZ2UtbnVtYmVyPXtwYWdlTnVtYmVyfVxuICAgICAgZGF0YS10ZXN0LWlkPVwidGh1bWJuYWlsLWxpbmtcIj5cbiAgICAgIHshIW9iamVjdFVSTCAmJiA8aW1nIGNsYXNzTmFtZT1cInBkZi1yZWFkZXJfX3RodW1ibmFpbC1pbWFnZVwiIHNyYz17b2JqZWN0VVJMfSAvPn1cbiAgICA8L2E+XG4gICk7XG59O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBEb2N1bWVudENvbnRleHQgfSBmcm9tICcuLi8uLi9jb250ZXh0L0RvY3VtZW50Q29udGV4dCc7XG5pbXBvcnQgeyBUaHVtYm5haWwgfSBmcm9tICcuL1RodW1ibmFpbCc7XG5cbnR5cGUgUHJvcHMgPSBhbnk7XG5cbmV4cG9ydCBjb25zdCBUaHVtYm5haWxMaXN0OiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoKSA9PiB7XG4gIGNvbnN0IHsgbnVtUGFnZXMgfSA9IFJlYWN0LnVzZUNvbnRleHQoRG9jdW1lbnRDb250ZXh0KTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwicGRmLXJlYWRlcl9fdGh1bWJuYWlsLWxpc3Qtd3JhcHBlclwiPlxuICAgICAgPHVsIGNsYXNzTmFtZT1cInBkZi1yZWFkZXJfX3RodW1ibmFpbC1saXN0XCI+XG4gICAgICAgIHtBcnJheS5mcm9tKHsgbGVuZ3RoOiBudW1QYWdlcyB9KS5tYXAoKF8sIHBhZ2VJbmRleCkgPT4gKFxuICAgICAgICAgIDxsaSBrZXk9e3BhZ2VJbmRleCArIDF9IGNsYXNzTmFtZT1cInBkZi1yZWFkZXJfX3RodW1ibmFpbC1saXN0X19pdGVtXCI+XG4gICAgICAgICAgICA8VGh1bWJuYWlsIHBhZ2VOdW1iZXI9e3BhZ2VJbmRleCArIDF9IC8+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgKSl9XG4gICAgICA8L3VsPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiIsImV4cG9ydCBjb25zdCBQZXJjZW50Rm9ybWF0dGVyID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KCdlbi1VUycsIHtcbiAgc3R5bGU6ICdwZXJjZW50JyxcbiAgbWF4aW11bVNpZ25pZmljYW50RGlnaXRzOiAzLFxufSk7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IFRyYW5zZm9ybUNvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L1RyYW5zZm9ybUNvbnRleHQnO1xuaW1wb3J0IHsgUGVyY2VudEZvcm1hdHRlciB9IGZyb20gJy4uL3V0aWxzL2Zvcm1hdCc7XG5cbmV4cG9ydCB0eXBlIFByb3BzID0ge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICBvblpvb20/OiAoc2NhbGU6IG51bWJlcikgPT4gdm9pZDtcbn07XG5cbmNvbnN0IE1BWF9aT09NX0lOX1NDQUxFID0gNTAwO1xuXG5leHBvcnQgY29uc3QgWm9vbUluQnV0dG9uOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoe1xuICBjbGFzc05hbWUsXG4gIGNoaWxkcmVuLFxuICBvblpvb20sXG4gIC4uLmV4dHJhUHJvcHNcbn06IFByb3BzKSA9PiB7XG4gIGNvbnN0IHsgc2NhbGUsIHNldFNjYWxlLCB6b29tSW5jcmVtZW50VmFsdWUgfSA9IFJlYWN0LnVzZUNvbnRleHQoVHJhbnNmb3JtQ29udGV4dCk7XG5cbiAgY29uc3QgaGFuZGxlWm9vbUluID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKGV2ZW50KTogdm9pZCA9PiB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBjb25zdCBuZXdTY2FsZVZhbHVlID0gc2NhbGUgKyB6b29tSW5jcmVtZW50VmFsdWU7XG4gICAgICBjb25zdCB6b29tU2NhbGUgPSBOdW1iZXIoUGVyY2VudEZvcm1hdHRlci5mb3JtYXQobmV3U2NhbGVWYWx1ZSkucmVwbGFjZSgnJScsICcnKSk7XG5cbiAgICAgIGlmICh6b29tU2NhbGUgPD0gTUFYX1pPT01fSU5fU0NBTEUpIHtcbiAgICAgICAgaWYgKG9uWm9vbSkge1xuICAgICAgICAgIG9uWm9vbShuZXdTY2FsZVZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFNjYWxlKG5ld1NjYWxlVmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW3NjYWxlXVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGJ1dHRvblxuICAgICAgY2xhc3NOYW1lPXtgcmVhZGVyX196b29tLWJ0biB6b29tLWluICR7Y2xhc3NOYW1lfWB9XG4gICAgICBvbkNsaWNrPXtoYW5kbGVab29tSW59XG4gICAgICB7Li4uZXh0cmFQcm9wc30+XG4gICAgICB7Y2hpbGRyZW4gPyBjaGlsZHJlbiA6ICcrJ31cbiAgICA8L2J1dHRvbj5cbiAgKTtcbn07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IFRyYW5zZm9ybUNvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L1RyYW5zZm9ybUNvbnRleHQnO1xuaW1wb3J0IHsgUGVyY2VudEZvcm1hdHRlciB9IGZyb20gJy4uL3V0aWxzL2Zvcm1hdCc7XG5cbmV4cG9ydCB0eXBlIFByb3BzID0ge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICBvblpvb20/OiAoc2NhbGU6IG51bWJlcikgPT4gdm9pZDtcbn07XG5cbmNvbnN0IE1JTl9aT09NX09VVF9TQ0FMRSA9IDIwO1xuXG5leHBvcnQgY29uc3QgWm9vbU91dEJ1dHRvbjogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQgPSAoe1xuICBjbGFzc05hbWUsXG4gIGNoaWxkcmVuLFxuICBvblpvb20sXG4gIC4uLmV4dHJhUHJvcHNcbn06IFByb3BzKSA9PiB7XG4gIGNvbnN0IHsgc2NhbGUsIHNldFNjYWxlLCB6b29tSW5jcmVtZW50VmFsdWUgfSA9IFJlYWN0LnVzZUNvbnRleHQoVHJhbnNmb3JtQ29udGV4dCk7XG5cbiAgY29uc3QgaGFuZGxlWm9vbU91dCA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChldmVudCk6IHZvaWQgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgY29uc3QgbmV3U2NhbGVWYWx1ZSA9IHNjYWxlIC0gem9vbUluY3JlbWVudFZhbHVlO1xuICAgICAgY29uc3Qgem9vbVNjYWxlID0gTnVtYmVyKFBlcmNlbnRGb3JtYXR0ZXIuZm9ybWF0KG5ld1NjYWxlVmFsdWUpLnJlcGxhY2UoJyUnLCAnJykpO1xuXG4gICAgICBpZiAoem9vbVNjYWxlID49IE1JTl9aT09NX09VVF9TQ0FMRSkge1xuICAgICAgICBpZiAob25ab29tKSB7XG4gICAgICAgICAgb25ab29tKG5ld1NjYWxlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHNldFNjYWxlKG5ld1NjYWxlVmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW3NjYWxlXVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGJ1dHRvblxuICAgICAgY2xhc3NOYW1lPXtgcmVhZGVyX196b29tLWJ0biB6b29tLW91dCAke2NsYXNzTmFtZX1gfVxuICAgICAgb25DbGljaz17aGFuZGxlWm9vbU91dH1cbiAgICAgIHsuLi5leHRyYVByb3BzfT5cbiAgICAgIHtjaGlsZHJlbiA/IGNoaWxkcmVuIDogJy0nfVxuICAgIDwvYnV0dG9uPlxuICApO1xufTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgRG9jdW1lbnRDb250ZXh0LCB1c2VEb2N1bWVudENvbnRleHRQcm9wcyB9IGZyb20gJy4vRG9jdW1lbnRDb250ZXh0JztcbmltcG9ydCB7IFBhZ2VSZW5kZXJDb250ZXh0LCB1c2VQYWdlUmVuZGVyQ29udGV4dFByb3BzIH0gZnJvbSAnLi9QYWdlUmVuZGVyQ29udGV4dCc7XG5pbXBvcnQgeyBTY3JvbGxDb250ZXh0LCB1c2VTY3JvbGxDb250ZXh0UHJvcHMgfSBmcm9tICcuL1Njcm9sbENvbnRleHQnO1xuaW1wb3J0IHsgVHJhbnNmb3JtQ29udGV4dCwgdXNlVHJhbnNmb3JtQ29udGV4dFByb3BzIH0gZnJvbSAnLi9UcmFuc2Zvcm1Db250ZXh0JztcbmltcG9ydCB7IFVpQ29udGV4dCwgdXNlVWlDb250ZXh0UHJvcHMgfSBmcm9tICcuL1VpQ29udGV4dCc7XG5cbmV4cG9ydCB0eXBlIFByb3BzID0ge1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0RWxlbWVudCB8IEFycmF5PFJlYWN0LlJlYWN0RWxlbWVudD47XG59O1xuXG5leHBvcnQgY29uc3QgQ29udGV4dFByb3ZpZGVyOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAoeyBjaGlsZHJlbiB9OiBQcm9wcykgPT4ge1xuICBjb25zdCBkb2N1bWVudFByb3BzID0gdXNlRG9jdW1lbnRDb250ZXh0UHJvcHMoKTtcbiAgY29uc3QgdHJhbnNmb3JtUHJvcHMgPSB1c2VUcmFuc2Zvcm1Db250ZXh0UHJvcHMoKTtcbiAgY29uc3QgdWlQcm9wcyA9IHVzZVVpQ29udGV4dFByb3BzKCk7XG4gIGNvbnN0IHNjcm9sbFByb3BzID0gdXNlU2Nyb2xsQ29udGV4dFByb3BzKCk7XG4gIGNvbnN0IHBhZ2VSZW5kZXJQcm9wcyA9IHVzZVBhZ2VSZW5kZXJDb250ZXh0UHJvcHMoe1xuICAgIHBkZkRvY1Byb3h5OiBkb2N1bWVudFByb3BzLnBkZkRvY1Byb3h5LFxuICAgIHBpeGVsUmF0aW86IHRyYW5zZm9ybVByb3BzLnBpeGVsUmF0aW8sXG4gICAgc2NhbGU6IHRyYW5zZm9ybVByb3BzLnNjYWxlLFxuICAgIHZpc2libGVQYWdlUmF0aW9zOiBzY3JvbGxQcm9wcy52aXNpYmxlUGFnZVJhdGlvcyxcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RG9jdW1lbnRDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtkb2N1bWVudFByb3BzfT5cbiAgICAgIDxUcmFuc2Zvcm1Db250ZXh0LlByb3ZpZGVyIHZhbHVlPXt0cmFuc2Zvcm1Qcm9wc30+XG4gICAgICAgIDxVaUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3VpUHJvcHN9PlxuICAgICAgICAgIDxTY3JvbGxDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtzY3JvbGxQcm9wc30+XG4gICAgICAgICAgICA8UGFnZVJlbmRlckNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3BhZ2VSZW5kZXJQcm9wc30+XG4gICAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgIDwvUGFnZVJlbmRlckNvbnRleHQuUHJvdmlkZXI+XG4gICAgICAgICAgPC9TY3JvbGxDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgICA8L1VpQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgIDwvVHJhbnNmb3JtQ29udGV4dC5Qcm92aWRlcj5cbiAgICA8L0RvY3VtZW50Q29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG4iLCIvKlxuICogUERGIENvbXBvbmVudCBMaWJyYXJ5IGV4cG9ydHNcbiAqL1xuXG5pbXBvcnQgJy4vbGVzcy9pbmRleC5sZXNzJztcblxuaW1wb3J0IHsgQm91bmRpbmdCb3gsIFByb3BzIGFzIEJvdW5kaW5nQm94UHJvcHMgfSBmcm9tICcuL3NyYy9jb21wb25lbnRzL0JvdW5kaW5nQm94JztcbmltcG9ydCB7IERvY3VtZW50V3JhcHBlciwgUHJvcHMgYXMgRG9jdW1lbnRXcmFwcGVyUHJvcHMgfSBmcm9tICcuL3NyYy9jb21wb25lbnRzL0RvY3VtZW50V3JhcHBlcic7XG5pbXBvcnQgeyBEb3dubG9hZEJ1dHRvbiwgUHJvcHMgYXMgRG93bmxvYWRCdXR0b25Qcm9wcyB9IGZyb20gJy4vc3JjL2NvbXBvbmVudHMvRG93bmxvYWRCdXR0b24nO1xuaW1wb3J0IHtcbiAgSGlnaGxpZ2h0T3ZlcmxheSxcbiAgUHJvcHMgYXMgSGlnaGxpZ2h0T3ZlcmxheVByb3BzLFxufSBmcm9tICcuL3NyYy9jb21wb25lbnRzL0hpZ2hsaWdodE92ZXJsYXknO1xuaW1wb3J0IHsgSWNvbkZsYWcgfSBmcm9tICcuL3NyYy9jb21wb25lbnRzL2ljb24vSWNvbkZsYWcnO1xuaW1wb3J0IHsgQXJyb3dGbGFnIH0gZnJvbSAnLi9zcmMvY29tcG9uZW50cy9tYXJrZXIvQXJyb3dGbGFnJztcbmltcG9ydCB7IEFycm93RmxhZ0Jhc2UsIFBPU0lUSU9OLCBQb3NpdGlvblR5cGUgfSBmcm9tICcuL3NyYy9jb21wb25lbnRzL21hcmtlci9BcnJvd0ZsYWdCYXNlJztcbmltcG9ydCB7IE91dGxpbmUgfSBmcm9tICcuL3NyYy9jb21wb25lbnRzL291dGxpbmUvT3V0bGluZSc7XG5pbXBvcnQgeyBPdXRsaW5lSXRlbSB9IGZyb20gJy4vc3JjL2NvbXBvbmVudHMvb3V0bGluZS9PdXRsaW5lSXRlbSc7XG5pbXBvcnQgeyBPdmVybGF5LCBQcm9wcyBhcyBPdmVybGF5UHJvcHMgfSBmcm9tICcuL3NyYy9jb21wb25lbnRzL092ZXJsYXknO1xuaW1wb3J0IHsgUGFnZU51bWJlckNvbnRyb2wgfSBmcm9tICcuL3NyYy9jb21wb25lbnRzL1BhZ2VOdW1iZXJDb250cm9sJztcbmltcG9ydCB7IFBhZ2VQcm9wcywgUGFnZVdyYXBwZXIsIFByb3BzIGFzIFBhZ2VXcmFwcGVyUHJvcHMgfSBmcm9tICcuL3NyYy9jb21wb25lbnRzL1BhZ2VXcmFwcGVyJztcbmltcG9ydCB7IFByaW50QnV0dG9uLCBQcm9wcyBhcyBQcmludEJ1dHRvblByb3BzIH0gZnJvbSAnLi9zcmMvY29tcG9uZW50cy9QcmludEJ1dHRvbic7XG5pbXBvcnQgeyBQcm9wcyBhcyBTaWRlUGFuZWxQcm9wcywgU2lkZVBhbmVsIH0gZnJvbSAnLi9zcmMvY29tcG9uZW50cy9TaWRlUGFuZWwnO1xuaW1wb3J0IHsgVGh1bWJuYWlsIH0gZnJvbSAnLi9zcmMvY29tcG9uZW50cy90aHVtYm5haWxzL1RodW1ibmFpbCc7XG5pbXBvcnQgeyBUaHVtYm5haWxMaXN0IH0gZnJvbSAnLi9zcmMvY29tcG9uZW50cy90aHVtYm5haWxzL1RodW1ibmFpbExpc3QnO1xuaW1wb3J0IHtcbiAgQm91bmRpbmdCb3ggYXMgQm91bmRpbmdCb3hUeXBlLFxuICBEaW1lbnNpb25zLFxuICBPcmlnaW4sXG4gIFJhd0JvdW5kaW5nQm94LFxuICBzY2FsZVJhd0JvdW5kaW5nQm94LFxuICBTaXplLFxufSBmcm9tICcuL3NyYy9jb21wb25lbnRzL3R5cGVzL2JvdW5kaW5nQm94JztcbmltcG9ydCB7IE5vZGVEZXN0aW5hdGlvbiwgT3V0bGluZU5vZGUgfSBmcm9tICcuL3NyYy9jb21wb25lbnRzL3R5cGVzL291dGxpbmUnO1xuaW1wb3J0IHsgUGFnZVByb3BlcnRpZXMsIFBhZ2VSZWZlcmVuY2UgfSBmcm9tICcuL3NyYy9jb21wb25lbnRzL3R5cGVzL3BhZ2UnO1xuaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tICcuL3NyYy9jb21wb25lbnRzL3R5cGVzL3V0aWxzJztcbmltcG9ydCB7IFpvb21JbkJ1dHRvbiB9IGZyb20gJy4vc3JjL2NvbXBvbmVudHMvWm9vbUluQnV0dG9uJztcbmltcG9ydCB7IFpvb21PdXRCdXR0b24gfSBmcm9tICcuL3NyYy9jb21wb25lbnRzL1pvb21PdXRCdXR0b24nO1xuaW1wb3J0IHsgQ29udGV4dFByb3ZpZGVyLCBQcm9wcyBhcyBDb250ZXh0UHJvdmlkZXJQcm9wcyB9IGZyb20gJy4vc3JjL2NvbnRleHQvQ29udGV4dFByb3ZpZGVyJztcbmltcG9ydCB7IERvY3VtZW50Q29udGV4dCwgSURvY3VtZW50Q29udGV4dCB9IGZyb20gJy4vc3JjL2NvbnRleHQvRG9jdW1lbnRDb250ZXh0JztcbmltcG9ydCB7IElQYWdlUmVuZGVyQ29udGV4dCwgUGFnZVJlbmRlckNvbnRleHQgfSBmcm9tICcuL3NyYy9jb250ZXh0L1BhZ2VSZW5kZXJDb250ZXh0JztcbmltcG9ydCB7IElTY3JvbGxDb250ZXh0LCBTY3JvbGxDb250ZXh0IH0gZnJvbSAnLi9zcmMvY29udGV4dC9TY3JvbGxDb250ZXh0JztcbmltcG9ydCB7XG4gIERFRkFVTFRfWk9PTV9TQ0FMRSxcbiAgSVRyYW5zZm9ybUNvbnRleHQsXG4gIFRyYW5zZm9ybUNvbnRleHQsXG59IGZyb20gJy4vc3JjL2NvbnRleHQvVHJhbnNmb3JtQ29udGV4dCc7XG5pbXBvcnQgeyBJVWlDb250ZXh0LCBVaUNvbnRleHQgfSBmcm9tICcuL3NyYy9jb250ZXh0L1VpQ29udGV4dCc7XG5pbXBvcnQgeyBQZXJjZW50Rm9ybWF0dGVyIH0gZnJvbSAnLi9zcmMvdXRpbHMvZm9ybWF0JztcbmltcG9ydCB7IFJFTkRFUl9UWVBFIH0gZnJvbSAnLi9zcmMvdXRpbHMvcmVhZGVyLXV0aWxzJztcbmltcG9ydCB7XG4gIGlzU2lkZXdheXMsXG4gIFBhZ2VSb3RhdGlvbixcbiAgcm90YXRlQ2xvY2t3aXNlLFxuICByb3RhdGVDb3VudGVyQ2xvY2t3aXNlLFxufSBmcm9tICcuL3NyYy91dGlscy9yb3RhdGUnO1xuaW1wb3J0IHsgZ2VuZXJhdGVQYWdlSWRGcm9tSW5kZXgsIHNjcm9sbFRvSWQsIHNjcm9sbFRvUGRmUGFnZUluZGV4IH0gZnJvbSAnLi9zcmMvdXRpbHMvc2Nyb2xsJztcbmltcG9ydCB7XG4gIGNvbXB1dGVCb3VuZGluZ0JveFN0eWxlLFxuICBjb21wdXRlUGFnZVN0eWxlLFxuICBnZXRQYWdlSGVpZ2h0LFxuICBnZXRQYWdlV2lkdGgsXG59IGZyb20gJy4vc3JjL3V0aWxzL3N0eWxlJztcblxuZXhwb3J0IHR5cGUge1xuICBCb3VuZGluZ0JveFByb3BzLFxuICBCb3VuZGluZ0JveFR5cGUsXG4gIENvbnRleHRQcm92aWRlclByb3BzLFxuICBEaW1lbnNpb25zLFxuICBEb2N1bWVudFdyYXBwZXJQcm9wcyxcbiAgRG93bmxvYWRCdXR0b25Qcm9wcyxcbiAgSGlnaGxpZ2h0T3ZlcmxheVByb3BzLFxuICBJRG9jdW1lbnRDb250ZXh0LFxuICBJUGFnZVJlbmRlckNvbnRleHQsXG4gIElTY3JvbGxDb250ZXh0LFxuICBJVHJhbnNmb3JtQ29udGV4dCxcbiAgSVVpQ29udGV4dCxcbiAgTm9kZURlc3RpbmF0aW9uLFxuICBOdWxsYWJsZSxcbiAgT3JpZ2luLFxuICBPdXRsaW5lTm9kZSxcbiAgT3ZlcmxheVByb3BzLFxuICBQYWdlUHJvcGVydGllcyxcbiAgUGFnZVByb3BzLFxuICBQYWdlUmVmZXJlbmNlLFxuICBQYWdlUm90YXRpb24sXG4gIFBhZ2VXcmFwcGVyUHJvcHMsXG4gIFBvc2l0aW9uVHlwZSxcbiAgUHJpbnRCdXR0b25Qcm9wcyxcbiAgUmF3Qm91bmRpbmdCb3gsXG4gIFNpZGVQYW5lbFByb3BzLFxuICBTaXplLFxufTtcblxuZXhwb3J0IHtcbiAgQXJyb3dGbGFnLFxuICBBcnJvd0ZsYWdCYXNlLFxuICBCb3VuZGluZ0JveCxcbiAgY29tcHV0ZUJvdW5kaW5nQm94U3R5bGUsXG4gIGNvbXB1dGVQYWdlU3R5bGUsXG4gIENvbnRleHRQcm92aWRlcixcbiAgREVGQVVMVF9aT09NX1NDQUxFLFxuICBEb2N1bWVudENvbnRleHQsXG4gIERvY3VtZW50V3JhcHBlcixcbiAgRG93bmxvYWRCdXR0b24sXG4gIGdlbmVyYXRlUGFnZUlkRnJvbUluZGV4LFxuICBnZXRQYWdlSGVpZ2h0LFxuICBnZXRQYWdlV2lkdGgsXG4gIEhpZ2hsaWdodE92ZXJsYXksXG4gIEljb25GbGFnLFxuICBpc1NpZGV3YXlzLFxuICBPdXRsaW5lLFxuICBPdXRsaW5lSXRlbSxcbiAgT3ZlcmxheSxcbiAgUGFnZU51bWJlckNvbnRyb2wsXG4gIFBhZ2VSZW5kZXJDb250ZXh0LFxuICBQYWdlV3JhcHBlcixcbiAgUGVyY2VudEZvcm1hdHRlcixcbiAgUE9TSVRJT04sXG4gIFByaW50QnV0dG9uLFxuICBSRU5ERVJfVFlQRSxcbiAgcm90YXRlQ2xvY2t3aXNlLFxuICByb3RhdGVDb3VudGVyQ2xvY2t3aXNlLFxuICBzY2FsZVJhd0JvdW5kaW5nQm94LFxuICBTY3JvbGxDb250ZXh0LFxuICBzY3JvbGxUb0lkLFxuICBzY3JvbGxUb1BkZlBhZ2VJbmRleCxcbiAgU2lkZVBhbmVsLFxuICBUaHVtYm5haWwsXG4gIFRodW1ibmFpbExpc3QsXG4gIFRyYW5zZm9ybUNvbnRleHQsXG4gIFVpQ29udGV4dCxcbiAgWm9vbUluQnV0dG9uLFxuICBab29tT3V0QnV0dG9uLFxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBCb3VuZGluZ0JveCxcbiAgY29tcHV0ZUJvdW5kaW5nQm94U3R5bGUsXG4gIGNvbXB1dGVQYWdlU3R5bGUsXG4gIENvbnRleHRQcm92aWRlcixcbiAgREVGQVVMVF9aT09NX1NDQUxFLFxuICBEb2N1bWVudENvbnRleHQsXG4gIERvY3VtZW50V3JhcHBlcixcbiAgRG93bmxvYWRCdXR0b24sXG4gIEFycm93RmxhZyxcbiAgQXJyb3dGbGFnQmFzZSxcbiAgUHJpbnRCdXR0b24sXG4gIGdlbmVyYXRlUGFnZUlkRnJvbUluZGV4LFxuICBnZXRQYWdlSGVpZ2h0LFxuICBnZXRQYWdlV2lkdGgsXG4gIEhpZ2hsaWdodE92ZXJsYXksXG4gIEljb25GbGFnLFxuICBpc1NpZGV3YXlzLFxuICBPdXRsaW5lLFxuICBPdXRsaW5lSXRlbSxcbiAgT3ZlcmxheSxcbiAgUGFnZU51bWJlckNvbnRyb2wsXG4gIFBhZ2VSZW5kZXJDb250ZXh0LFxuICBQYWdlUm90YXRpb24sXG4gIFBhZ2VXcmFwcGVyLFxuICBQT1NJVElPTixcbiAgU2lkZVBhbmVsLFxuICBQZXJjZW50Rm9ybWF0dGVyLFxuICBSRU5ERVJfVFlQRSxcbiAgcm90YXRlQ2xvY2t3aXNlLFxuICByb3RhdGVDb3VudGVyQ2xvY2t3aXNlLFxuICBzY2FsZVJhd0JvdW5kaW5nQm94LFxuICBzY3JvbGxUb0lkLFxuICBzY3JvbGxUb1BkZlBhZ2VJbmRleCxcbiAgVGh1bWJuYWlsLFxuICBUaHVtYm5haWxMaXN0LFxuICBTY3JvbGxDb250ZXh0LFxuICBUcmFuc2Zvcm1Db250ZXh0LFxuICBVaUNvbnRleHQsXG4gIFpvb21JbkJ1dHRvbixcbiAgWm9vbU91dEJ1dHRvbixcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///224\n')},323:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__323__},888:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__888__}},__webpack_module_cache__={};function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U);var __webpack_exports__=__webpack_require__(224);return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));