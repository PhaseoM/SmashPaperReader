!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F(require("react-pdf"),require("react")):"function"==typeof define&&define.amd?define(["react-pdf","react"],F):"object"==typeof exports?exports["@allenai/pdf-components"]=F(require("react-pdf"),require("react")):Q["@allenai/pdf-components"]=F(Q["react-pdf"],Q.React)}(this,(function(__WEBPACK_EXTERNAL_MODULE__323__,__WEBPACK_EXTERNAL_MODULE__888__){return(()=>{var __webpack_modules__={184:(module,exports)=>{eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif ( true && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (true) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n\t\t\treturn classNames;\n\t\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWxsZW5haS9wZGYtY29tcG9uZW50cy8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzPzRkMjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsZ0JBQWdCOztBQUVoQjtBQUNBOztBQUVBLGlCQUFpQixzQkFBc0I7QUFDdkM7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxLQUFLLEtBQTZCO0FBQ2xDO0FBQ0E7QUFDQSxFQUFFLFVBQVUsSUFBNEU7QUFDeEY7QUFDQSxFQUFFLGlDQUFxQixFQUFFLG1DQUFFO0FBQzNCO0FBQ0EsR0FBRztBQUFBLGtHQUFDO0FBQ0osRUFBRSxNQUFNLEVBRU47QUFDRixDQUFDIiwiZmlsZSI6IjE4NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTggSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRpZiAoYXJnLmxlbmd0aCkge1xuXHRcdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGlmIChhcmcudG9TdHJpbmcgPT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpIHtcblx0XHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0Y2xhc3NOYW1lcy5kZWZhdWx0ID0gY2xhc3NOYW1lcztcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///184\n")},224:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ index)\n});\n\n// UNUSED EXPORTS: ArrowFlag, ArrowFlagBase, BoundingBox, ContextProvider, DEFAULT_ZOOM_SCALE, DocumentContext, DocumentWrapper, DownloadButton, HighlightOverlay, IconFlag, Outline, OutlineItem, Overlay, POSITION, PageNumberControl, PageRenderContext, PageWrapper, PercentFormatter, PrintButton, RENDER_TYPE, ScrollContext, SidePanel, Thumbnail, ThumbnailList, TransformContext, UiContext, ZoomInButton, ZoomOutButton, computeBoundingBoxStyle, computePageStyle, generatePageIdFromIndex, getPageHeight, getPageWidth, isSideways, rotateClockwise, rotateCounterClockwise, scaleRawBoundingBox, scrollToId, scrollToPdfPageIndex\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__(184);\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n// EXTERNAL MODULE: external {"commonjs":"react","commonjs2":"react","amd":"react","root":"React"}\nvar external_commonjs_react_commonjs2_react_amd_react_root_React_ = __webpack_require__(888);\n;// CONCATENATED MODULE: ./src/utils/provider.ts\nfunction logProviderWarning(functionName, providerName) {\r\n    console.warn(`Unable to call ${functionName}. The ${providerName} Provider may not be set up correctly.`);\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/rotate.ts\nvar PageRotation;\r\n(function (PageRotation) {\r\n    PageRotation[PageRotation["Rotate0"] = 0] = "Rotate0";\r\n    PageRotation[PageRotation["Rotate90"] = 90] = "Rotate90";\r\n    PageRotation[PageRotation["Rotate180"] = 180] = "Rotate180";\r\n    PageRotation[PageRotation["Rotate270"] = 270] = "Rotate270";\r\n})(PageRotation || (PageRotation = {}));\r\nfunction rotateClockwise(rotation) {\r\n    switch (rotation) {\r\n        case PageRotation.Rotate0:\r\n            return PageRotation.Rotate90;\r\n        case PageRotation.Rotate90:\r\n            return PageRotation.Rotate180;\r\n        case PageRotation.Rotate180:\r\n            return PageRotation.Rotate270;\r\n        default:\r\n            return PageRotation.Rotate0;\r\n    }\r\n}\r\nfunction rotateCounterClockwise(rotation) {\r\n    switch (rotation) {\r\n        case PageRotation.Rotate0:\r\n            return PageRotation.Rotate270;\r\n        case PageRotation.Rotate90:\r\n            return PageRotation.Rotate0;\r\n        case PageRotation.Rotate180:\r\n            return PageRotation.Rotate90;\r\n        default:\r\n            return PageRotation.Rotate180;\r\n    }\r\n}\r\n/**\r\n * Tests whether the page is rotated 90 degrees clockwise or counterclockwise from zero,\r\n * e.g. whether the page "is rotated sideways."\r\n */\r\nfunction isSideways(rotation) {\r\n    return rotation === PageRotation.Rotate90 || rotation === PageRotation.Rotate270;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/scroll.ts\n\r\n// Each page div is ID\'d according to page index\r\n// e.g. reader_pg_0, reader_pg_1, etc.\r\nconst PAGE_NAV_TARGET_ID_ROOT = \'reader_pg_\';\r\nconst PDF_HEIGHT_POINTS = 792;\r\nconst PDF_WIDTH_POINTS = 612;\r\nfunction generatePageIdFromIndex(pageIndex) {\r\n    return `${PAGE_NAV_TARGET_ID_ROOT}${pageIndex}`;\r\n}\r\nfunction scrollToId(id) {\r\n    const element = document.getElementById(id);\r\n    if (element) {\r\n        element.scrollIntoView({ behavior: \'smooth\', block: \'start\', inline: \'center\' });\r\n    }\r\n    else {\r\n        console.error(`Could not find scroll target with ID #${id}`);\r\n    }\r\n}\r\nfunction scrollToPdfPageIndex(pageIndex) {\r\n    scrollToId(generatePageIdFromIndex(pageIndex));\r\n}\r\n/**\r\n * Scroll PDF document to a specific position.\r\n * @param pageIndex The index of the page where the position locates at\r\n * @param leftPoints The horizontal distance between the origin and the position (in PDF coordinates)\r\n * @param bottomPoints The vertical distance between the origin and the position (in PDF coordinates)\r\n * @param rotation The rotation degree of the document\r\n */\r\nfunction scrollToPosition(pageIndex, leftPoints, bottomPoints, rotation = PageRotation.Rotate0) {\r\n    /*\r\n      Vertical scroll distance is calculated as\r\n      = total number of previous pages * page height including top/down margins\r\n      + the margin top of current page\r\n      + the distance from the page top to the specified position\r\n  \r\n      Notice that the scroll distance is measured in pixels,\r\n      so leftPoints/bottomPoints has to be transformed from points to pixels first.\r\n    */\r\n    const { width, height, marginTop, marginBottom, marginLeft, marginRight } = getPagePropertiesInPixels();\r\n    const heightWithMargins = height + marginTop + marginBottom;\r\n    // When a paper is rotated, its height and width would be switched automatically. However, leftPoints and bottomPoints remain the same.\r\n    let marginTopPixels = marginTop;\r\n    let bottomPixels = (height * bottomPoints) / PDF_HEIGHT_POINTS;\r\n    let leftPixels = (width * leftPoints) / PDF_WIDTH_POINTS;\r\n    if (rotation == PageRotation.Rotate90) {\r\n        marginTopPixels = marginLeft;\r\n        bottomPixels = (height * (PDF_WIDTH_POINTS - leftPoints)) / PDF_WIDTH_POINTS;\r\n        leftPixels = (width * bottomPoints) / PDF_HEIGHT_POINTS;\r\n    }\r\n    else if (rotation == PageRotation.Rotate180) {\r\n        marginTopPixels = marginBottom;\r\n        bottomPixels = (height * (PDF_HEIGHT_POINTS - bottomPoints)) / PDF_HEIGHT_POINTS;\r\n        leftPixels = (width * (PDF_WIDTH_POINTS - leftPoints)) / PDF_WIDTH_POINTS;\r\n    }\r\n    else if (rotation == PageRotation.Rotate270) {\r\n        marginTopPixels = marginRight;\r\n        bottomPixels = (height * leftPoints) / PDF_WIDTH_POINTS;\r\n        leftPixels = (width * (PDF_HEIGHT_POINTS - bottomPoints)) / PDF_HEIGHT_POINTS;\r\n    }\r\n    // Find page element\r\n    const pageId = generatePageIdFromIndex(pageIndex);\r\n    const pageIdElement = document.getElementById(pageId);\r\n    if (!pageIdElement) {\r\n        return;\r\n    }\r\n    // Find first scrollable parent\r\n    const parentElement = getScrollParent(pageIdElement);\r\n    if (!parentElement) {\r\n        return;\r\n    }\r\n    // Apply scroll\r\n    parentElement.scrollTo({\r\n        top: calculateTopPx({\r\n            heightWithMarginsInPx: heightWithMargins,\r\n            pageIndex: pageIndex,\r\n            marginTopPx: marginTopPixels,\r\n            heightPx: height,\r\n            bottomPx: bottomPixels,\r\n        }),\r\n        left: Math.floor(leftPixels),\r\n        behavior: \'smooth\',\r\n    });\r\n}\r\nfunction getScrollParent(node) {\r\n    const minScrollableHeight = 50; // used to check for a bug where Firefox gives inline containers a small scrollHeight when it shouldnt\r\n    if (typeof document === \'undefined\') {\r\n        return null;\r\n    }\r\n    if (!node || node.nodeName.toLowerCase() === \'body\') {\r\n        return document.documentElement;\r\n    }\r\n    if (node.scrollHeight - node.clientHeight > minScrollableHeight && !isOverflowIsHidden(node)) {\r\n        return node;\r\n    }\r\n    return getScrollParent(node.parentElement);\r\n}\r\nfunction isOverflowIsHidden(node) {\r\n    const style = getComputedStyle(node);\r\n    return (style.overflow.includes(\'hidden\') ||\r\n        style.overflowX.includes(\'hidden\') ||\r\n        style.overflowY.includes(\'hidden\'));\r\n}\r\nfunction calculateTopPx({ heightWithMarginsInPx, pageIndex, marginTopPx, heightPx, bottomPx, }) {\r\n    return Math.floor(heightWithMarginsInPx * pageIndex + marginTopPx + (heightPx - bottomPx));\r\n}\r\n/**\r\n * Get lengths, widths, and margins of a page.\r\n * @returns a PageProperties object\r\n */\r\nfunction getPagePropertiesInPixels() {\r\n    const firstPage = document.getElementById(generatePageIdFromIndex(0));\r\n    if (!firstPage) {\r\n        console.error(`Cannot get the first page of this document.`);\r\n        const emptyPageProperties = {\r\n            width: 0,\r\n            height: 0,\r\n            marginTop: 0,\r\n            marginBottom: 0,\r\n            marginLeft: 0,\r\n            marginRight: 0,\r\n        };\r\n        return emptyPageProperties;\r\n    }\r\n    const style = getComputedStyle(firstPage);\r\n    const pageProperties = {\r\n        width: parseInt(style.width),\r\n        height: parseInt(style.height),\r\n        marginTop: parseInt(style.marginTop),\r\n        marginBottom: parseInt(style.marginBottom),\r\n        marginLeft: parseInt(style.marginLeft),\r\n        marginRight: parseInt(style.marginRight),\r\n    };\r\n    return pageProperties;\r\n}\r\nfunction calculateTargetPosition({ scale, leftPoint, bottomPoint, pageDimensions, rotation = PageRotation.Rotate0, }) {\r\n    switch (rotation) {\r\n        default:\r\n        case PageRotation.Rotate0: {\r\n            const leftPx = (leftPoint / PDF_WIDTH_POINTS) * pageDimensions.width * scale;\r\n            const topPx = (1 - bottomPoint / PDF_HEIGHT_POINTS) * pageDimensions.height * scale;\r\n            return { leftPx, topPx };\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/context/DocumentContext.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nconst DocumentContext = external_commonjs_react_commonjs2_react_amd_react_root_React_.createContext({\r\n    numPages: 0,\r\n    numPagesLoaded: 0,\r\n    outline: [],\r\n    outlinePositions: null,\r\n    pageDimensions: { height: 0, width: 0 },\r\n    pdfDocProxy: undefined,\r\n    getOutlineTargets: opts => {\r\n        logProviderWarning(`getOutlineTargets(${JSON.stringify(opts)})`, \'DocumentContext\');\r\n        return [];\r\n    },\r\n    setNumPages: numPages => {\r\n        logProviderWarning(`setNumPages(${numPages})`, \'DocumentContext\');\r\n    },\r\n    setNumPagesLoaded: numPages => {\r\n        logProviderWarning(`setNumPagesLoaded(${numPages})`, \'DocumentContext\');\r\n    },\r\n    setOutline: outline => {\r\n        logProviderWarning(`setOutline(${outline})`, \'DocumentContext\');\r\n    },\r\n    setOutlinePositions: outline => {\r\n        logProviderWarning(`setOutlinePositions(${outline})`, \'DocumentContext\');\r\n    },\r\n    setPageDimensions: pageDimensions => {\r\n        logProviderWarning(`setPageDimensions(${pageDimensions})`, \'DocumentContext\');\r\n    },\r\n    setPdfDocProxy: pdfDocProxy => {\r\n        logProviderWarning(`setPdfDocProxy(${pdfDocProxy})`, \'DocumentContext\');\r\n    },\r\n});\r\nfunction useDocumentContextProps() {\r\n    const [numPages, setNumPages] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(0);\r\n    const [numPagesLoaded, setNumPagesLoaded] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(0);\r\n    const [outline, setOutline] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\r\n    const [outlinePositions, setOutlinePositions] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\r\n    const [pageDimensions, setPageDimensions] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState({\r\n        height: 0,\r\n        width: 0,\r\n    });\r\n    const [pdfDocProxy, setPdfDocProxy] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState();\r\n    // Draw outline target into the pdf based on the args\r\n    const getOutlineTargets = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex, scale, rotation, pageDimensions, }) => {\r\n        if (typeof pageIndex === \'number\') {\r\n            pageNumber = pageIndex + 1;\r\n        }\r\n        if (typeof pageNumber !== \'number\') {\r\n            return [];\r\n        }\r\n        const positions = (outlinePositions === null || outlinePositions === void 0 ? void 0 : outlinePositions.get(pageNumber)) || [];\r\n        return positions.map(({ dest, leftPoint, bottomPoint }) => {\r\n            const { leftPx, topPx } = calculateTargetPosition({\r\n                scale,\r\n                rotation,\r\n                leftPoint,\r\n                bottomPoint,\r\n                pageDimensions,\r\n            });\r\n            return {\r\n                dest,\r\n                leftPx,\r\n                topPx,\r\n            };\r\n        });\r\n    }, [outlinePositions]);\r\n    return {\r\n        numPages,\r\n        numPagesLoaded,\r\n        outline,\r\n        outlinePositions,\r\n        pageDimensions,\r\n        pdfDocProxy,\r\n        getOutlineTargets,\r\n        setNumPages,\r\n        setNumPagesLoaded,\r\n        setOutline,\r\n        setOutlinePositions,\r\n        setPageDimensions: setPageDimensions,\r\n        setPdfDocProxy,\r\n    };\r\n}\r\nfunction buildOutlinePositions(pdfDocProxy, outline) {\r\n    var _a;\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (!outline) {\r\n            outline = yield pdfDocProxy.getOutline();\r\n        }\r\n        // Depth first search through outline items\r\n        const itemQueue = outline.slice();\r\n        const proms = [];\r\n        while (itemQueue.length > 0) {\r\n            const item = itemQueue.pop();\r\n            if (!item) {\r\n                continue; // Not able to process\r\n            }\r\n            const { dest, items } = item;\r\n            // Add child items to queue\r\n            if (Array.isArray(items)) {\r\n                itemQueue.push(...items);\r\n            }\r\n            // Fetch destinations for item\r\n            if (Array.isArray(dest)) {\r\n                proms.push(...dest.map(dest => getDestination(pdfDocProxy, dest)));\r\n            }\r\n            else if (typeof dest === \'string\') {\r\n                proms.push(getDestination(pdfDocProxy, dest));\r\n            }\r\n        }\r\n        // Collect results all at once, so we don\'t have to pay for the cost of\r\n        // queueing messages sent to the worker\r\n        const results = yield Promise.all(proms);\r\n        // Split results into pages\r\n        const map = new Map();\r\n        for (const result of results) {\r\n            if (!result) {\r\n                continue; // Filter out null\r\n            }\r\n            const { pageNumber } = result;\r\n            if (!map.has(pageNumber)) {\r\n                map.set(pageNumber, []);\r\n            }\r\n            (_a = map.get(pageNumber)) === null || _a === void 0 ? void 0 : _a.push(result);\r\n        }\r\n        // Freeze objects so consumers cannot mutate\r\n        for (const pagePos of map.values()) {\r\n            for (const pos of pagePos) {\r\n                Object.freeze(pos);\r\n            }\r\n            Object.freeze(pagePos);\r\n        }\r\n        Object.freeze(map);\r\n        return map;\r\n    });\r\n}\r\nfunction getDestination(pdfDocProxy, dest) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const result = yield pdfDocProxy.getDestination(dest);\r\n        if (!result) {\r\n            return null;\r\n        }\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        const [ref, _format, leftPoint, bottomPoint] = result;\r\n        const pageIndex = yield pdfDocProxy.getPageIndex(ref);\r\n        const pageNumber = pageIndex + 1;\r\n        return { pageNumber, dest, leftPoint, bottomPoint };\r\n    });\r\n}\r\n\n;// CONCATENATED MODULE: ./src/context/TransformContext.ts\n\r\n\r\n\r\nconst DEFAULT_ZOOM_SCALE = 1.0;\r\nconst TransformContext = external_commonjs_react_commonjs2_react_amd_react_root_React_.createContext({\r\n    pixelRatio: (typeof window !== \'undefined\' ? window.devicePixelRatio : null) || 1,\r\n    rotation: PageRotation.Rotate0,\r\n    scale: 1,\r\n    zoomIncrementValue: 0.2,\r\n    setPixelRatio: pixelRatio => {\r\n        logProviderWarning(`setPixelRatio(${pixelRatio})`, \'TransformContext\');\r\n    },\r\n    setRotation: rotation => {\r\n        logProviderWarning(`setRotation(${rotation})`, \'TransformContext\');\r\n    },\r\n    setScale: scale => {\r\n        logProviderWarning(`setScale(${scale})`, \'TransformContext\');\r\n    },\r\n    setZoomIncrementValue: value => {\r\n        logProviderWarning(`setZoomIncrementValue(${value})`, \'TransformContext\');\r\n    },\r\n});\r\nfunction useTransformContextProps() {\r\n    const [pixelRatio, setPixelRatio] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState((typeof window !== \'undefined\' ? window.devicePixelRatio : null) || 1);\r\n    const [rotation, setRotation] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(PageRotation.Rotate0);\r\n    const [scale, setScale] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(DEFAULT_ZOOM_SCALE);\r\n    const [zoomIncrementValue, setZoomIncrementValue] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(0.2);\r\n    return {\r\n        pixelRatio,\r\n        rotation,\r\n        scale,\r\n        setPixelRatio,\r\n        setRotation,\r\n        setScale,\r\n        zoomIncrementValue,\r\n        setZoomIncrementValue,\r\n    };\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/style.ts\n\r\n// Computes the style for a bounding box, accounting for page roation and page scaling/zoom\r\nfunction computeBoundingBoxStyle(boundingBoxSize, pageDimensions, rotation, scale) {\r\n    const { top, left, height, width } = boundingBoxSize;\r\n    switch (rotation) {\r\n        case PageRotation.Rotate90:\r\n            return {\r\n                top: left * scale,\r\n                left: (pageDimensions.height - height - top) * scale,\r\n                height: width * scale,\r\n                width: height * scale,\r\n            };\r\n        case PageRotation.Rotate180:\r\n            return {\r\n                top: (pageDimensions.height - height - top) * scale,\r\n                left: (pageDimensions.width - width - left) * scale,\r\n                height: height * scale,\r\n                width: width * scale,\r\n            };\r\n        case PageRotation.Rotate270:\r\n            return {\r\n                top: (pageDimensions.width - width - left) * scale,\r\n                left: top * scale,\r\n                height: width * scale,\r\n                width: height * scale,\r\n            };\r\n        default:\r\n            return {\r\n                top: top * scale,\r\n                left: left * scale,\r\n                height: height * scale,\r\n                width: width * scale,\r\n            };\r\n    }\r\n}\r\n// Compute the style for a page, accounting for page rotation and page scaling/zoom\r\nfunction computePageStyle(pageDimensions, rotation, scale) {\r\n    return {\r\n        height: getPageHeight(pageDimensions, rotation) * scale,\r\n        width: getPageWidth(pageDimensions, rotation) * scale,\r\n        left: 0,\r\n        top: 0,\r\n    };\r\n}\r\n// Get page height accounting for page rotation- if the page is rotated on its side, its width becomes its height\r\nfunction getPageHeight(pageDimensions, rotation) {\r\n    return isSideways(rotation) ? pageDimensions.width : pageDimensions.height;\r\n}\r\n// Get page width accounting for page rotation- if the page is rotated on its side, its height becomes its width\r\nfunction getPageWidth(pageDimensions, rotation) {\r\n    return isSideways(rotation) ? pageDimensions.height : pageDimensions.width;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/BoundingBox.tsx\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\n\r\nconst BoundingBox = (_a) => {\r\n    var { top, left, height, width, className, underlineClassName, id, isHighlighted, onClick, voiceOverLabel } = _a, extraProps = __rest(_a, ["top", "left", "height", "width", "className", "underlineClassName", "id", "isHighlighted", "onClick", "voiceOverLabel"]);\r\n    const { pageDimensions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\r\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\r\n    const boxSize = { top, left, height, width };\r\n    const componentClassName = classnames_default()(\'pdf-reader__overlay-bounding-box\', isHighlighted === true ? \'pdf-reader__overlay-bounding-box-highlighted\' : \'\', className);\r\n    const getBoundingBoxStyle = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\r\n        return computeBoundingBoxStyle(boxSize, pageDimensions, rotation, scale);\r\n    }, [pageDimensions, rotation, scale]);\r\n    const rotationClassName = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\r\n        return `rotate${rotation}`;\r\n    }, [rotation]);\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(external_commonjs_react_commonjs2_react_amd_react_root_React_.Fragment, null,\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { \r\n            // className={`pdf-reader__overlay-bounding-box-underline ${\r\n            //   underlineClassName || rotationClassName()\r\n            // }`}\r\n            className: \'pdf-reader__overlay-bounding-box-highlighted\', style: getBoundingBoxStyle() }),\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ id: id, className: `${componentClassName} ${rotationClassName()}`, style: getBoundingBoxStyle(), onClick: onClick, role: "button", tabIndex: 0, "aria-label": voiceOverLabel }, extraProps))));\r\n};\r\n\n// EXTERNAL MODULE: external "react-pdf"\nvar external_react_pdf_ = __webpack_require__(323);\n;// CONCATENATED MODULE: ./src/utils/ScrollDirectionDetector.ts\nvar ScrollDirection;\r\n(function (ScrollDirection) {\r\n    ScrollDirection["UP"] = "UP";\r\n    ScrollDirection["DOWN"] = "DOWN";\r\n})(ScrollDirection || (ScrollDirection = {}));\r\nclass ScrollDetector {\r\n    constructor(el, setScrollDirection, setIsAtTop, setScrollThresholdReachedInDirection, scrollThreshold) {\r\n        this._onScroll = () => {\r\n            const currScrollTop = this._el.scrollTop;\r\n            if (this._isAtTop !== (currScrollTop === 0)) {\r\n                this._isAtTop = currScrollTop === 0;\r\n                this._setIsAtTop(currScrollTop === 0);\r\n            }\r\n            if (this._lastScrollTop === currScrollTop) {\r\n                return;\r\n            }\r\n            // Determine direction\r\n            const currScrollDirection = (() => {\r\n                if (currScrollTop <= 0) {\r\n                    return ScrollDirection.DOWN;\r\n                }\r\n                return this._lastScrollTop < currScrollTop ? ScrollDirection.DOWN : ScrollDirection.UP;\r\n            })();\r\n            // Update state, if changed\r\n            this._lastScrollTop = currScrollTop;\r\n            if (this._lastScrollDirection !== currScrollDirection) {\r\n                this._lastScrollDirection = currScrollDirection;\r\n                this._setScrollDirection(currScrollDirection);\r\n                this._lastScrollTopBeforeDirectionChange = currScrollTop;\r\n                this._isScrollThresholdReachedInDirection = null;\r\n                if (this._setScrollThresholdReachedInDirection && !this._isAtTop) {\r\n                    this._setScrollThresholdReachedInDirection(null);\r\n                }\r\n            }\r\n            else {\r\n                if (this._scrollThreshold && this._setScrollThresholdReachedInDirection) {\r\n                    const scrolledAmount = Math.abs(this._lastScrollTopBeforeDirectionChange - currScrollTop);\r\n                    if (scrolledAmount >= this._scrollThreshold) {\r\n                        this._isScrollThresholdReachedInDirection = this._lastScrollDirection;\r\n                        this._setScrollThresholdReachedInDirection(this._lastScrollDirection);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        this._el = el;\r\n        this._lastScrollTop = this._el.scrollTop;\r\n        this._lastScrollDirection = null;\r\n        this._setScrollDirection = setScrollDirection;\r\n        this._isAtTop = null;\r\n        this._setIsAtTop = setIsAtTop;\r\n        this._lastScrollTopBeforeDirectionChange = this._el.scrollTop;\r\n        this._scrollThreshold = scrollThreshold;\r\n        this._isScrollThresholdReachedInDirection = null;\r\n        this._setScrollThresholdReachedInDirection = setScrollThresholdReachedInDirection;\r\n    }\r\n    attachScrollListener() {\r\n        var _a, _b;\r\n        if (((_b = (_a = this._el) === null || _a === void 0 ? void 0 : _a.tagName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === \'html\') {\r\n            window.addEventListener(\'scroll\', this._onScroll, false);\r\n            return;\r\n        }\r\n        this._el.addEventListener(\'scroll\', this._onScroll, false);\r\n    }\r\n    detachScrollListener() {\r\n        var _a, _b;\r\n        if (((_b = (_a = this._el) === null || _a === void 0 ? void 0 : _a.tagName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === \'html\') {\r\n            window.removeEventListener(\'scroll\', this._onScroll, false);\r\n            return;\r\n        }\r\n        this._el.removeEventListener(\'scroll\', this._onScroll, false);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/VisibleEntriesDetector.ts\nconst DEFAULT_ROOT_MARGIN = \'50px\';\r\nconst DEFAULT_THRESHOLD = Array.from({ length: 101 }).map((_, i) => i / 100);\r\nclass VisibleEntriesDetector {\r\n    constructor({ root, thresHold, setVisibleEntries, onVisibleEntriesChange, }) {\r\n        var _a;\r\n        this._root = root;\r\n        this._lastVisibleEntries = new Map();\r\n        this._setVisibleEntries = setVisibleEntries;\r\n        this._onVisibleEntriesChange = onVisibleEntriesChange;\r\n        this._observer = new IntersectionObserver(entries => {\r\n            // Collect visible and hidden elements\r\n            const visibleEntries = entries.filter(entry => entry.isIntersecting);\r\n            const hiddenEntries = entries.filter(entry => !entry.isIntersecting);\r\n            // Determine what needs saved\r\n            const newVisibleEntries = this._onVisibleEntriesChange({\r\n                visibleEntries,\r\n                hiddenEntries,\r\n                lastEntries: this._lastVisibleEntries,\r\n            });\r\n            const frozenEntries = new Map(newVisibleEntries);\r\n            Object.freeze(frozenEntries);\r\n            this._lastVisibleEntries = frozenEntries;\r\n            this._setVisibleEntries(frozenEntries);\r\n        }, \r\n        // Default setting for intersection observer\r\n        {\r\n            root: ((_a = this._root.tagName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === \'html\' ? null : this._root,\r\n            rootMargin: DEFAULT_ROOT_MARGIN,\r\n            threshold: thresHold ? thresHold : DEFAULT_THRESHOLD,\r\n        });\r\n    }\r\n    observeNodes(selector) {\r\n        for (const node of this._root.querySelectorAll(selector)) {\r\n            this._observer.observe(node);\r\n        }\r\n    }\r\n    destroy() {\r\n        this._observer.disconnect();\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/context/ScrollContext.ts\n\r\n\r\n\r\n\r\n\r\nconst OUTLINE_ATTRIBUTE = \'data-outline-target-dest\';\r\nconst OUTLINE_SELECTOR = \'.pdf-reader__page__outline-target\';\r\nconst PAGE_NUMBER_ATTRIBUTE = \'data-page-number\';\r\nconst PAGE_NUMBER_SELECTOR = `.pdf-reader__page[${PAGE_NUMBER_ATTRIBUTE}]`;\r\nconst DEFAULT_PAGE_SCROLLED_INTO_VIEW_THRESHOLD = 0.1;\r\nconst EMPTY_NUMBER_TO_VISIBLE_ENTRY_DETAIL_MAP = Object.freeze(new Map());\r\nconst DEFAULT_CONTEXT = {\r\n    scrollDirection: null,\r\n    visibleOutlineTargets: new Map(),\r\n    visiblePageRatios: new Map(),\r\n    isOutlineTargetVisible: opts => {\r\n        logProviderWarning(`isOutlineTargetVisible(${JSON.stringify(opts)})`, \'ScrollContext\');\r\n        return false;\r\n    },\r\n    isPageVisible: opts => {\r\n        logProviderWarning(`isPageVisible(${JSON.stringify(opts)})`, \'ScrollContext\');\r\n        return false;\r\n    },\r\n    resetScrollObservers: () => {\r\n        logProviderWarning(`resetScrollObservers()`, \'ScrollContext\');\r\n    },\r\n    scrollRoot: {},\r\n    setScrollRoot: (_el) => {\r\n        logProviderWarning(`setScrollRoot(...)`, \'ScrollContext\');\r\n    },\r\n    scrollToOutlineTarget: dest => {\r\n        logProviderWarning(`scrollToOutlineTarget(${dest})`, \'ScrollContext\');\r\n    },\r\n    setScrollThreshold: (scrollThreshold) => {\r\n        logProviderWarning(`setScrollThreshold(${scrollThreshold})`, \'ScrollContext\');\r\n    },\r\n    scrollToPage: opts => {\r\n        logProviderWarning(`scrollToPage(${JSON.stringify(opts)})`, \'ScrollContext\');\r\n    },\r\n    updateScrollPosition: zoomMultiplier => {\r\n        logProviderWarning(`updateScrollPosition(${JSON.stringify(zoomMultiplier)})`, \'ScrollContext\');\r\n    },\r\n    setIsOutlineClicked: opts => {\r\n        logProviderWarning(`setIsOutlineGetClicked(${JSON.stringify(opts)})`, \'ScrollContext\');\r\n    },\r\n    scrollThresholdReachedInDirection: null,\r\n    isAtTop: null,\r\n    isOutlineClicked: null,\r\n    pagesScrolledIntoView: new Map(),\r\n    setPageScrolledIntoViewThreshold: (threshold) => {\r\n        logProviderWarning(`pagesScrolledIntoView(${threshold})`, \'ScrollContext\');\r\n    },\r\n};\r\nconst ScrollContext = external_commonjs_react_commonjs2_react_amd_react_root_React_.createContext(DEFAULT_CONTEXT);\r\nfunction useScrollContextProps() {\r\n    // Node used for observing the scroll position\r\n    const [scrollRoot, setScrollRoot] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\r\n    // Determine scroll direction\r\n    const [scrollDirection, setScrollDirection] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\r\n    const [scrollThreshold, setScrollThreshold] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\r\n    const [scrollThresholdReachedInDirection, setScrollThresholdReachedInDirection] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\r\n    const [isAtTop, setIsAtTop] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\r\n    const [isOutlineClicked, setIsOutlineClicked] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\r\n    const [pageScrolledIntoViewThreshold, setPageScrolledIntoViewThreshold] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(DEFAULT_PAGE_SCROLLED_INTO_VIEW_THRESHOLD);\r\n    const [pagesScrolledIntoView, setPagesScrolledIntoView] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(() => EMPTY_NUMBER_TO_VISIBLE_ENTRY_DETAIL_MAP);\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        const scrollElem = scrollRoot || document.documentElement;\r\n        if (!scrollElem) {\r\n            return;\r\n        }\r\n        let scrollDirectionDetector;\r\n        if (!scrollThreshold) {\r\n            // scroll threshold is optional\r\n            scrollDirectionDetector = new ScrollDetector(scrollElem, setScrollDirection, setIsAtTop);\r\n        }\r\n        else {\r\n            scrollDirectionDetector = new ScrollDetector(scrollElem, setScrollDirection, setIsAtTop, setScrollThresholdReachedInDirection, scrollThreshold);\r\n        }\r\n        scrollDirectionDetector.attachScrollListener();\r\n        return () => {\r\n            scrollDirectionDetector.detachScrollListener();\r\n        };\r\n    }, [scrollRoot, scrollThreshold]);\r\n    // Causes the IntersectionObservers to disconnect and be recreated (useful when DOM changes)\r\n    const [observerIndex, setObserverIndex] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(0);\r\n    const resetScrollObservers = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\r\n        setObserverIndex(observerIndex + 1);\r\n    }, [observerIndex]);\r\n    const [visibleOutlineTargets, setVisibleOutlineNodes] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(() => {\r\n        const map = new Map();\r\n        Object.freeze(map);\r\n        return map;\r\n    });\r\n    const [visiblePageRatios, setVisiblePageRatios] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(() => EMPTY_NUMBER_TO_VISIBLE_ENTRY_DETAIL_MAP);\r\n    const isOutlineTargetVisible = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((dest) => {\r\n        return visibleOutlineTargets.has(dest);\r\n    }, [visibleOutlineTargets]);\r\n    const scrollToOutlineTarget = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((dest) => {\r\n        var _a;\r\n        setIsOutlineClicked(true);\r\n        (_a = document\r\n            .querySelector(`[data-outline-target-dest="${dest}"]`)) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ behavior: \'smooth\' });\r\n    }, []);\r\n    const isPageVisible = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex }) => {\r\n        if (typeof pageIndex === \'number\') {\r\n            pageNumber = pageIndex + 1;\r\n        }\r\n        if (typeof pageNumber !== \'number\') {\r\n            return false;\r\n        }\r\n        return visiblePageRatios.has(pageNumber);\r\n    }, [visiblePageRatios]);\r\n    const scrollToPage = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex }) => {\r\n        var _a;\r\n        if (typeof pageNumber === \'number\') {\r\n            pageIndex = pageNumber - 1;\r\n        }\r\n        if (typeof pageIndex !== \'number\') {\r\n            return;\r\n        }\r\n        (_a = document\r\n            .getElementById(generatePageIdFromIndex(pageIndex))) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ behavior: \'smooth\' });\r\n    }, []);\r\n    // Watch outline nodes\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        const root = scrollRoot || document.documentElement;\r\n        const detector = new VisibleEntriesDetector({\r\n            root: root,\r\n            setVisibleEntries: setVisibleOutlineNodes,\r\n            onVisibleEntriesChange: ({ visibleEntries, hiddenEntries, lastEntries }) => {\r\n                hiddenEntries.map(entry => lastEntries.delete(entry.target.getAttribute(OUTLINE_ATTRIBUTE)));\r\n                const newEntries = new Map(lastEntries);\r\n                visibleEntries.map(entry => newEntries.set(entry.target.getAttribute(OUTLINE_ATTRIBUTE), {\r\n                    ratio: entry.intersectionRatio,\r\n                    timestamp: entry.time,\r\n                }));\r\n                return newEntries;\r\n            },\r\n        });\r\n        detector.observeNodes(OUTLINE_SELECTOR);\r\n        return () => {\r\n            detector.destroy();\r\n        };\r\n    }, [scrollRoot, observerIndex]);\r\n    // Watch pages\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        const root = scrollRoot || document.documentElement;\r\n        const detector = new VisibleEntriesDetector({\r\n            root: root,\r\n            setVisibleEntries: setVisiblePageRatios,\r\n            onVisibleEntriesChange: ({ visibleEntries, hiddenEntries, lastEntries }) => {\r\n                if (hiddenEntries.length) {\r\n                    const maxTime = Math.max(...hiddenEntries.map(e => e.time));\r\n                    const hiddenPageNums = hiddenEntries.map(e => { var _a; return ((_a = e.target) === null || _a === void 0 ? void 0 : _a.getAttribute(PAGE_NUMBER_ATTRIBUTE)) || \'\'; });\r\n                    // due to upper limit on how fast the Intersection Observer API can sample and how fast browsers can render (happens when users scroll fast)\r\n                    // sometimes entries will not be signaled as hidden, meaning they should be removed from lastEntries but weren\'t\r\n                    // so if an entry has a timestamp thats older then an entry we are currently removing, we can assume its "stale" and delete\r\n                    // more details about this issue here: https://stackoverflow.com/questions/61951380/intersection-observer-fails-sometimes-when-i-scroll-fast\r\n                    for (const [key, value] of lastEntries.entries()) {\r\n                        if (value.timestamp <= maxTime || hiddenPageNums.includes(String(key))) {\r\n                            lastEntries.delete(key);\r\n                        }\r\n                    }\r\n                }\r\n                const newEntries = new Map(lastEntries);\r\n                visibleEntries.map(entry => {\r\n                    var _a;\r\n                    newEntries.set(parseInt(((_a = entry.target) === null || _a === void 0 ? void 0 : _a.getAttribute(PAGE_NUMBER_ATTRIBUTE)) || \'\', 10), {\r\n                        ratio: entry.intersectionRatio,\r\n                        timestamp: entry.time,\r\n                    });\r\n                });\r\n                return newEntries;\r\n            },\r\n        });\r\n        detector.observeNodes(PAGE_NUMBER_SELECTOR);\r\n        return () => {\r\n            detector.destroy();\r\n        };\r\n    }, [scrollRoot, observerIndex]);\r\n    // map of pages at the moment they are scrolled into view, useful for tracking analytics such as page impressions\r\n    // different than the visiblePageRatios in that it only saves the ~initial~ point of when a page comes into view\r\n    // it doesn\'t track the live change in ratios as the page remains in view when scrolled\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        const root = scrollRoot || document.documentElement;\r\n        const detector = new VisibleEntriesDetector({\r\n            root: root,\r\n            thresHold: pageScrolledIntoViewThreshold,\r\n            setVisibleEntries: setPagesScrolledIntoView,\r\n            onVisibleEntriesChange: ({ visibleEntries }) => {\r\n                const newEntries = new Map();\r\n                visibleEntries.map(entry => {\r\n                    var _a;\r\n                    newEntries.set(parseInt(((_a = entry.target) === null || _a === void 0 ? void 0 : _a.getAttribute(PAGE_NUMBER_ATTRIBUTE)) || \'\', 10), entry.intersectionRatio);\r\n                });\r\n                return newEntries;\r\n            },\r\n        });\r\n        detector.observeNodes(PAGE_NUMBER_SELECTOR);\r\n        return () => {\r\n            detector.destroy();\r\n        };\r\n    }, [scrollRoot, observerIndex]);\r\n    // calculates a new scroll position after zooming in/out so user doesnt lose their position\r\n    const updateScrollPosition = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((zoomMultiplier) => {\r\n        const root = scrollRoot || document.documentElement;\r\n        if (!root) {\r\n            return;\r\n        }\r\n        const newScrollTop = Math.floor(root.scrollTop * zoomMultiplier);\r\n        setTimeout(() => {\r\n            root.scrollTop = newScrollTop;\r\n        }, 0);\r\n    }, [scrollRoot]);\r\n    return {\r\n        isOutlineTargetVisible,\r\n        isPageVisible,\r\n        scrollDirection,\r\n        visibleOutlineTargets,\r\n        visiblePageRatios,\r\n        resetScrollObservers,\r\n        scrollRoot,\r\n        setScrollRoot,\r\n        scrollToOutlineTarget,\r\n        setScrollThreshold,\r\n        scrollToPage,\r\n        updateScrollPosition,\r\n        setIsOutlineClicked,\r\n        scrollThresholdReachedInDirection,\r\n        isAtTop,\r\n        isOutlineClicked,\r\n        pagesScrolledIntoView,\r\n        setPageScrolledIntoViewThreshold,\r\n    };\r\n}\r\n\n;// CONCATENATED MODULE: ./src/context/UiContext.ts\n\r\n\r\nconst UiContext = external_commonjs_react_commonjs2_react_amd_react_root_React_.createContext({\r\n    errorMessage: null,\r\n    isLoading: false,\r\n    isShowingHighlightOverlay: false,\r\n    isShowingOutline: false,\r\n    isShowingTextHighlight: false,\r\n    isShowingThumbnail: false,\r\n    isShowingInteract: false,\r\n    setErrorMessage: errorMessage => {\r\n        logProviderWarning(`setErrorMessage(${errorMessage})`, \'UiContext\');\r\n    },\r\n    setIsShowingOutline: isShowingOutline => {\r\n        logProviderWarning(`setIsShowingOutline(${isShowingOutline})`, \'UiContext\');\r\n    },\r\n    setIsShowingInteract: isShowingInteract => {\r\n        logProviderWarning(`setIsShowingInteract(${isShowingInteract})`, \'UiContext\');\r\n    },\r\n    setIsLoading: isLoading => {\r\n        logProviderWarning(`setIsLoading(${isLoading})`, \'UiContext\');\r\n    },\r\n    setIsShowingHighlightOverlay: isShowingHighlightOverlay => {\r\n        logProviderWarning(`setIsShowingHighlightOverlay(${isShowingHighlightOverlay})`, \'UiContext\');\r\n    },\r\n    setIsShowingTextHighlight: isShowingTextHighlight => {\r\n        logProviderWarning(`setIsShowingTextHighlight(${isShowingTextHighlight})`, \'UiContext\');\r\n    },\r\n    setIsShowingThumbnail: isShowingThumbnail => {\r\n        logProviderWarning(`setIsShowingThumbnail(${isShowingThumbnail})`, \'UiContext\');\r\n    },\r\n});\r\nfunction useUiContextProps() {\r\n    const [errorMessage, setErrorMessage] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\r\n    const [isLoading, setIsLoading] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(true);\r\n    const [isShowingHighlightOverlay, setIsShowingHighlightOverlay] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\r\n    const [isShowingOutline, setIsShowingOutline] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\r\n    const [isShowingTextHighlight, setIsShowingTextHighlight] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\r\n    const [isShowingThumbnail, setIsShowingThumbnail] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\r\n    const [isShowingInteract, setIsShowingInteract] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\r\n    return {\r\n        errorMessage,\r\n        isLoading,\r\n        isShowingHighlightOverlay,\r\n        isShowingOutline,\r\n        isShowingTextHighlight,\r\n        isShowingThumbnail,\r\n        isShowingInteract,\r\n        setErrorMessage,\r\n        setIsLoading,\r\n        setIsShowingHighlightOverlay,\r\n        setIsShowingOutline,\r\n        setIsShowingTextHighlight,\r\n        setIsShowingThumbnail,\r\n        setIsShowingInteract,\r\n    };\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/errorMessage.ts\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nfunction getErrorMessage(error) {\r\n    if (!error) {\r\n        return \'Unknown error\';\r\n    }\r\n    if (typeof error === \'string\') {\r\n        return error;\r\n    }\r\n    if (error instanceof Error) {\r\n        return error.message;\r\n    }\r\n    if (typeof error.error === \'string\') {\r\n        return error.error;\r\n    }\r\n    return error.toString();\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/pdfWorker.ts\n\r\n// Set PDFjs worker source or else PDF will not load when this library is imported as a package.\r\nfunction initPdfWorker() {\r\n    external_react_pdf_.pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${external_react_pdf_.pdfjs.version}/pdf.worker.min.js`;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/reader-utils.ts\nconst RENDER_TYPE = {\r\n    MULTI_CANVAS: \'multi-canvas\',\r\n    SINGLE_CANVAS: \'single-canvas\',\r\n};\r\nfunction getRenderMode(renderType) {\r\n    switch (renderType) {\r\n        case RENDER_TYPE.SINGLE_CANVAS:\r\n            return \'none\';\r\n        default:\r\n            return \'canvas\';\r\n    }\r\n}\r\nfunction getClassNameSuffixFromRenderType(renderType) {\r\n    switch (renderType) {\r\n        case RENDER_TYPE.SINGLE_CANVAS:\r\n            return \'single-canvas\';\r\n        default:\r\n            return \'multi-canvas\';\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/scale.ts\n// We assume 96 DPI for display\r\n// TODO: There are more accurate ways to do this, but this is what ScholarPhi does now\r\nconst DPI = 96;\r\n// PDF units are in 1/72nds of an inch\r\nconst USER_UNIT_DENOMINATOR = 72;\r\n/**\r\n * Given a PDFPageProxy, calculates the screen pixel size of the PDF page at 100% scale\r\n * @param page The PDFPageProxy to calculate size for\r\n * @returns Pixel size of a page at 100% scale assuming 96DPI display\r\n */\r\nfunction computePageDimensions(page) {\r\n    const [leftPx, topPx, rightPx, bottomPx] = page.view;\r\n    const PPI = (page.userUnit / USER_UNIT_DENOMINATOR) * DPI;\r\n    return {\r\n        height: (bottomPx - topPx) * PPI,\r\n        width: (rightPx - leftPx) * PPI,\r\n    };\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/types/destination.ts\n/**\r\n * This class is the definition of the first item when Destination is returned as an array.\r\n * It is created based on the same class in \'react-pdf\' library:\r\n * https://github.com/wojtekmaj/react-pdf/blob/ca4453f123af51e2faed39a8a62800901030459a/src/Ref.js\r\n */\r\nclass Ref {\r\n    constructor({ num, gen }) {\r\n        this.num = num;\r\n        this.gen = gen;\r\n    }\r\n    toString() {\r\n        return this.gen !== 0 ? `${this.num}R${this.gen}` : `${this.num}R`;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/DocumentWrapper.tsx\nvar DocumentWrapper_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst DocumentWrapper = (_a) => {\r\n    var { children, renderType } = _a, extraProps = DocumentWrapper_rest(_a, ["children", "renderType"]);\r\n    initPdfWorker();\r\n    const { pdfDocProxy, setNumPages, setNumPagesLoaded, setPageDimensions, setPdfDocProxy } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\r\n    const { resetScrollObservers, updateScrollPosition } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(ScrollContext);\r\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\r\n    const { setErrorMessage, setIsLoading } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(UiContext);\r\n    const [lastScale, setLastScale] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(1); // assuming the scale defaults to 100%\r\n    function getFirstPage(pdfDoc) {\r\n        // getPage uses 1-indexed pageNumber, not 0-indexed pageIndex\r\n        return pdfDoc.getPage(1);\r\n    }\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        resetScrollObservers();\r\n    }, []);\r\n    // after scale changes, update scroll position so the user stays looking at the same position of the paper\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        if (scale === lastScale) {\r\n            return;\r\n        }\r\n        const zoomMultiplier = scale / lastScale;\r\n        updateScrollPosition(zoomMultiplier);\r\n        setLastScale(scale);\r\n    }, [scale, updateScrollPosition]);\r\n    const onPdfLoadSuccess = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((pdfDoc) => {\r\n        setNumPagesLoaded(0);\r\n        setNumPages(pdfDoc.numPages);\r\n        getFirstPage(pdfDoc)\r\n            .then(page => {\r\n            setPageDimensions(computePageDimensions(page));\r\n            setErrorMessage(null);\r\n        })\r\n            .catch(error => {\r\n            setErrorMessage(getErrorMessage(error));\r\n        })\r\n            .finally(() => {\r\n            setIsLoading(false);\r\n        });\r\n        if (!pdfDocProxy) {\r\n            setPdfDocProxy(pdfDoc);\r\n        }\r\n    }, []);\r\n    const onSourceError = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((error) => {\r\n        setErrorMessage(getErrorMessage(error));\r\n        setIsLoading(false);\r\n    }, []);\r\n    const onPdfLoadError = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((error) => {\r\n        setErrorMessage(getErrorMessage(error));\r\n        setIsLoading(false);\r\n    }, []);\r\n    const onItemClicked = (param) => {\r\n        if (!pdfDocProxy) {\r\n            return;\r\n        }\r\n        // Scroll to the destination of the item\r\n        pdfDocProxy.getDestination(param.dest).then(destArray => {\r\n            if (!destArray) {\r\n                return;\r\n            }\r\n            const [ref, , , bottomPoints] = destArray;\r\n            pdfDocProxy.getPageIndex(new Ref(ref)).then(refInfo => {\r\n                scrollToPosition(parseInt(refInfo.toString()), 0, bottomPoints, rotation);\r\n            });\r\n        });\r\n    };\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(external_react_pdf_.Document, Object.assign({ options: { cMapUrl: \'cmaps/\', cMapPacked: true }, onSourceError: onSourceError, onLoadError: onPdfLoadError, onLoadSuccess: onPdfLoadSuccess, externalLinkTarget: "_blank", renderMode: getRenderMode(renderType), \r\n        // @ts-ignore: the arguments should be { dest, pageIndex, pageNumber }\r\n        // @types/react-pdf hasn\'t updated the function signature\r\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/d73eb652e0ba8f89395a0ef2ba69cf1e640ce5be/types/react-pdf/dist/Document.d.ts#L72\r\n        onItemClick: onItemClicked }, extraProps), children));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/DownloadButton.tsx\nvar DownloadButton_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n/**\r\n * HTML anchor tag allows you to download a file from the same origin.\r\n * This is a workaround to download a file served from a different origin\r\n */\r\nconst DownloadButton = (_a) => {\r\n    var { pdfUrl, children, className } = _a, extraProps = DownloadButton_rest(_a, ["pdfUrl", "children", "className"]);\r\n    const [fetching, setFetching] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\r\n    const download = () => {\r\n        setFetching(true);\r\n        fetch(pdfUrl)\r\n            .then(response => response.blob())\r\n            .then(blob => {\r\n            setFetching(false);\r\n            const blobURL = URL.createObjectURL(blob);\r\n            const a = document.createElement(\'a\');\r\n            a.href = blobURL;\r\n            a.download = pdfUrl.split(\'/\').pop() || pdfUrl;\r\n            document.body.appendChild(a);\r\n            a.click();\r\n        });\r\n    };\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("button", Object.assign({ disabled: fetching, onClick: () => download(), "aria-label": "Download PDF", className: `pdf-reader__download-btn ${className}` }, extraProps), children ? children : \'Download\'));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/HighlightOverlay.tsx\nvar HighlightOverlay_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\nconst HighlightOverlay = (_a) => {\r\n    var { children, pageIndex, color } = _a, extraProps = HighlightOverlay_rest(_a, ["children", "pageIndex", "color"]);\r\n    const { pageDimensions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\r\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\r\n    const maskId = `highlight-overlay-mask-${pageIndex}`;\r\n    const getPageStyle = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\r\n        return computePageStyle(pageDimensions, rotation, scale);\r\n    }, [pageDimensions, rotation, scale]);\r\n    const getUnmaskedArea = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((boundingBoxes) => {\r\n        const boxes = Array.isArray(boundingBoxes) ? boundingBoxes : [boundingBoxes];\r\n        return boxes.map((box, i) => {\r\n            const boxStyle = computeBoundingBoxStyle(box.props, pageDimensions, rotation, scale);\r\n            return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("rect", { style: boxStyle, x: boxStyle.left, y: boxStyle.top, key: i, fill: color }));\r\n        });\r\n    }, [pageDimensions, rotation, scale]);\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ className: "pdf-reader__page-highlight-overlay", style: getPageStyle() }, extraProps),\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("svg", { className: "page-mask", style: getPageStyle() },\r\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("mask", { id: maskId },\r\n                external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("rect", { style: getPageStyle(), fill: "white" }),\r\n                children && getUnmaskedArea(children)))));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/marker/ArrowFlagBase.tsx\nvar ArrowFlagBase_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst POSITION = {\r\n    LEFT: \'LEFT\',\r\n    RIGHT: \'RIGHT\',\r\n};\r\nconst DEFAULT_ORIGIN_TOP_PX = 0;\r\nconst DEFAULT_FLAG_WIDTH_PX = 62;\r\nconst DEFAULT_FLAG_HEIGHT_PX = 20;\r\nconst DEFAULT_TAIL_LENGTH_PX = 40;\r\nconst DEFAULT_TAIL_WIDTH_PX = 7;\r\nconst ArrowFlagBase = (_a) => {\r\n    var { className, label, flagWidth, originTop, position = POSITION.LEFT, tailLength, tailWidgth } = _a, extraProps = ArrowFlagBase_rest(_a, ["className", "label", "flagWidth", "originTop", "position", "tailLength", "tailWidgth"]);\r\n    const { pageDimensions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\r\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\r\n    // function for scaling bounding boxes based on current document states\r\n    const computeSize = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((box) => computeBoundingBoxStyle(box, pageDimensions, rotation, scale), [pageDimensions, rotation, scale, originTop]);\r\n    // bounding box of the flag\r\n    const flagSize = {\r\n        top: originTop || DEFAULT_ORIGIN_TOP_PX,\r\n        left: 0,\r\n        height: DEFAULT_FLAG_HEIGHT_PX,\r\n        width: flagWidth || DEFAULT_FLAG_WIDTH_PX,\r\n    };\r\n    // bounding box of the tail\r\n    const tailSize = {\r\n        top: originTop || DEFAULT_ORIGIN_TOP_PX,\r\n        left: 0,\r\n        height: tailLength || DEFAULT_TAIL_LENGTH_PX,\r\n        width: tailWidgth || DEFAULT_TAIL_WIDTH_PX,\r\n    };\r\n    const computedFlagSize = computeSize(flagSize);\r\n    const computedTailSize = computeSize(tailSize);\r\n    const tailPosition = {\r\n        top: computedTailSize.top,\r\n        left: position === POSITION.LEFT ? -computedTailSize.width : pageDimensions.width * scale,\r\n        height: computedTailSize.height,\r\n        width: computedTailSize.width,\r\n    };\r\n    const renderFlag = () => {\r\n        const { top, width, height } = computedFlagSize;\r\n        const flagPosition = {\r\n            top,\r\n            height,\r\n            width,\r\n            left: position === POSITION.LEFT\r\n                ? -computedTailSize.width\r\n                : tailPosition.left + tailPosition.width - width + 1,\r\n        };\r\n        const labelPosition = position === POSITION.LEFT ? \'47%\' : \'53%\';\r\n        return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__arrow-flag-base__flag", style: flagPosition },\r\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(IconFlag, { className: "pdf-reader__arrow-flag-base__flag-icon", headerPosition: position },\r\n                external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("text", { x: labelPosition, y: "54%", dominantBaseline: "middle", textAnchor: "middle", className: "pdf-reader__arrow-flag-base__flag-label" }, label))));\r\n    };\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ className: classnames_default()(\'pdf-reader__arrow-flag-base\', className) }, extraProps),\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__arrow-flag-base__tail", style: tailPosition }),\r\n        label && renderFlag()));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/icon/IconFlag.tsx\n\r\n\r\nconst IconFlag = ({ children, className, headerPosition = POSITION.LEFT, }) => {\r\n    if (headerPosition == POSITION.LEFT) {\r\n        return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("svg", { viewBox: "0 0 62 22", className: className },\r\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("path", { d: "M52.0108 20.8315L52.0105 20.8318C51.5525 21.2525 50.9527 21.491 50.3265 21.5H3.02828C2.35623 21.5 1.71264 21.2355 1.23885 20.7661C0.76522 20.2969 0.5 19.6615 0.5 19V3C0.5 2.33848 0.765221 1.70309 1.23885 1.23389C1.71264 0.764519 2.35623 0.5 3.02828 0.5H50.2457C50.8719 0.50902 51.4718 0.747466 51.9298 1.16821L51.93 1.16846L60.6515 9.16846L60.6514 9.16852L60.658 9.17439C60.9175 9.40408 61.126 9.68412 61.2707 9.99679C61.4154 10.3095 61.4933 10.6482 61.4996 10.9917C61.5059 11.3353 61.4405 11.6765 61.3074 11.9941C61.1749 12.3104 60.9779 12.5966 60.7286 12.8348L52.0108 20.8315Z" }),\r\n            children));\r\n    }\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("svg", { viewBox: "0 0 62 22", className: className },\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("path", { d: "M9.98922 1.16846L9.9895 1.16821C10.4475 0.747472 11.0473 0.509029 11.6735 0.499999L58.9717 0.500004C59.6438 0.500004 60.2874 0.764522 60.7611 1.23389C61.2348 1.7031 61.5 2.33848 61.5 3L61.5 19C61.5 19.6615 61.2348 20.2969 60.7611 20.7661C60.2874 21.2355 59.6438 21.5 58.9717 21.5L11.7543 21.5C11.1281 21.491 10.5282 21.2525 10.0702 20.8318L10.07 20.8315L1.34854 12.8315L1.3486 12.8315L1.34196 12.8256C1.08248 12.5959 0.87399 12.3159 0.729283 12.0032C0.584584 11.6905 0.506719 11.3518 0.500417 11.0083C0.494111 10.6647 0.559495 10.3235 0.692605 10.0059C0.825143 9.68961 1.02206 9.40341 1.27136 9.16519L9.98922 1.16846Z" }),\r\n        children));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/types/boundingBox.ts\n// Calculate a bounding box\'s pixel coordinates from the raw bounding box\'s coorditate ratios scaled to the page size\r\nfunction scaleRawBoundingBox(boundingBoxRaw, pageHeight, pageWidth) {\r\n    const boxScaled = {\r\n        page: boundingBoxRaw.page,\r\n        top: boundingBoxRaw.top * pageHeight,\r\n        left: boundingBoxRaw.left * pageWidth,\r\n        height: boundingBoxRaw.height * pageHeight,\r\n        width: boundingBoxRaw.width * pageWidth,\r\n    };\r\n    return boxScaled;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/marker/ArrowFlag.tsx\nvar ArrowFlag_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\n\r\nconst CENTER_LINE = 0.5;\r\nconst LINE_HEIGHT_MULTIPLIER = 1.5;\r\nconst ArrowFlag = (_a) => {\r\n    var { boundingBoxes, className, label } = _a, extraProps = ArrowFlag_rest(_a, ["boundingBoxes", "className", "label"]);\r\n    const { pageDimensions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\r\n    const convertRatioToPx = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((rawBoundingBox) => scaleRawBoundingBox(rawBoundingBox, pageDimensions.height, pageDimensions.width), [pageDimensions]);\r\n    if (boundingBoxes.length == 0)\r\n        return null;\r\n    // If any bounding boxes span over the center line, we know that either the paper is\r\n    // single-column or a mix of single-column and two-column. In such case, bounding\r\n    // boxes will not be divided so as to guarantee only 1 flag is rendered on the left side.\r\n    const hasWideBox = boundingBoxes.some(({ left, width }) => left < CENTER_LINE && left + width >= CENTER_LINE);\r\n    let leftBoundingBoxes = boundingBoxes, rightBoundingBoxes = [];\r\n    if (!hasWideBox) {\r\n        leftBoundingBoxes = boundingBoxes.filter(({ left }) => left < CENTER_LINE);\r\n        rightBoundingBoxes = boundingBoxes.filter(({ left }) => left >= CENTER_LINE);\r\n    }\r\n    // To handle a special case where the previous bounding box is on the right while\r\n    // the later is on the left. In such case, there are only 2 bounding boxes.\r\n    // The vertical distance between the two boxes is used to differentiate whether this case\r\n    // happens on a single-column paper or a two-column paper. If it\'s the previous, then\r\n    // the whole flag should appear on the left. Both bounding boxes will be categorized\r\n    // as leftBoundingBoxes. Otherwise, the tail wrapping still applies.\r\n    if (leftBoundingBoxes.length === 1 && rightBoundingBoxes.length === 1) {\r\n        // If the vertical difference between the two boxes is smaller then 1.5 times line height,\r\n        // the paper is categorized as single-column. Both bounding boxes are set to leftBoundingBoxes.\r\n        // ArrowFlag will appear on the left\r\n        if (Math.abs(rightBoundingBoxes[0].top - leftBoundingBoxes[0].top) <\r\n            LINE_HEIGHT_MULTIPLIER * rightBoundingBoxes[0].height) {\r\n            leftBoundingBoxes = boundingBoxes;\r\n            rightBoundingBoxes = [];\r\n        }\r\n    }\r\n    // Sort bounding boxes by their top positions\r\n    leftBoundingBoxes.sort((first, second) => first.top - second.top);\r\n    rightBoundingBoxes.sort((first, second) => first.top - second.top);\r\n    const renderArrowFlagBase = (boxes, position, showLabel) => {\r\n        if (boxes.length == 0)\r\n            return null;\r\n        const firstBox = convertRatioToPx(boxes[0]), lastBox = convertRatioToPx(boxes[boxes.length - 1]);\r\n        const props = {\r\n            label: showLabel ? label : undefined,\r\n            tailLength: lastBox.top + lastBox.height - firstBox.top,\r\n            originTop: firstBox.top,\r\n            position,\r\n        };\r\n        return external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(ArrowFlagBase, Object.assign({}, props));\r\n    };\r\n    const hasLeftFlag = leftBoundingBoxes.length > 0;\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ className: classnames_default()(\'pdf-reader__arrow-flag\', className) }, extraProps),\r\n        renderArrowFlagBase(leftBoundingBoxes, POSITION.LEFT, hasLeftFlag),\r\n        renderArrowFlagBase(rightBoundingBoxes, POSITION.RIGHT, !hasLeftFlag)));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/outline/OutlineItem.tsx\n\r\n\r\n\r\nconst OutlineItem = ({ items, onClick }) => {\r\n    const { isOutlineTargetVisible } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(ScrollContext);\r\n    if (!items || !items.length) {\r\n        return null;\r\n    }\r\n    function renderItem(item) {\r\n        var _a;\r\n        const clickHandler = (event) => {\r\n            event.preventDefault();\r\n            if (onClick) {\r\n                onClick(item.dest);\r\n            }\r\n        };\r\n        // If an item has sub titles, render <OutlineItem />\r\n        return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("li", { key: ((_a = item.dest) === null || _a === void 0 ? void 0 : _a.toString()) || item.title, className: classnames_default()(\'reader__outline-item\', {\r\n                \'reader__outline-item--target-visible\': isOutlineTargetVisible(item.dest),\r\n            }) },\r\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("a", { href: "#", onClick: clickHandler, "data-test-id": "reader-outline-item" }, item.title),\r\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(OutlineItem, { items: item.items, onClick: onClick })));\r\n    }\r\n    return external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("ul", { className: "reader__outline-items" }, items.map(item => renderItem(item)));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/outline/Outline.tsx\nvar Outline_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\nconst Outline = (_a) => {\r\n    var extraProps = Outline_rest(_a, []);\r\n    const { outline, pdfDocProxy, setOutline, setOutlinePositions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\r\n    const { scrollToOutlineTarget, resetScrollObservers } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(ScrollContext);\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        if (outline) {\r\n            return;\r\n        }\r\n        if (!pdfDocProxy) {\r\n            return;\r\n        }\r\n        pdfDocProxy\r\n            .getOutline()\r\n            .then((outlineArray) => {\r\n            setOutline(outlineArray);\r\n            return buildOutlinePositions(pdfDocProxy, outlineArray);\r\n        })\r\n            .then(outlinePositions => {\r\n            setOutlinePositions(outlinePositions);\r\n        })\r\n            .then(() => {\r\n            resetScrollObservers();\r\n        });\r\n    }, [outline]);\r\n    const clickHandler = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((dest) => {\r\n        if (!dest) {\r\n            return;\r\n        }\r\n        scrollToOutlineTarget(dest);\r\n        return;\r\n    }, []);\r\n    if (!pdfDocProxy) {\r\n        return null;\r\n    }\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ className: "reader__outline" }, extraProps), !!outline && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(OutlineItem, { items: outline, onClick: clickHandler })));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/Overlay.tsx\nvar Overlay_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\nconst Overlay = (_a) => {\r\n    var { children } = _a, extraProps = Overlay_rest(_a, ["children"]);\r\n    const { pageDimensions } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\r\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\r\n    const getOverlayStyle = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\r\n        return computePageStyle(pageDimensions, rotation, scale);\r\n    }, [pageDimensions, rotation, scale]);\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ className: "pdf-reader__overlay", style: getOverlayStyle() }, extraProps), children));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/utils/MaxVisibleElement.ts\nfunction getMaxVisibleElement(visibleElements) {\r\n    let maxVisibleKey = null;\r\n    let maxRatio = 0;\r\n    for (const [visibleKey, { ratio }] of visibleElements) {\r\n        if (maxRatio < ratio) {\r\n            maxVisibleKey = visibleKey;\r\n            maxRatio = ratio;\r\n        }\r\n    }\r\n    return maxVisibleKey;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/PageNumberControl.tsx\n\r\n\r\n\r\n\r\n\r\nconst DELAY_SCROLL_TIME_OUT_MS = 1000;\r\nconst PageNumberControl = ({ className }) => {\r\n    const delayTimerRef = external_commonjs_react_commonjs2_react_amd_react_root_React_.useRef();\r\n    const { numPages } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\r\n    const { scrollToPage, visiblePageRatios } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(ScrollContext);\r\n    const [minPage, setMinPage] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(0);\r\n    const [userInput, setUserInput] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(\'0\');\r\n    // Initialize page control element\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        if (numPages != 0) {\r\n            setMinPage(1);\r\n        }\r\n    }, [numPages]);\r\n    // Everytime we scroll through the page this useEffect\r\n    // will trigger and set current page based on our current\r\n    // scroll position\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        if (visiblePageRatios.size !== 0) {\r\n            const maxVisiblePageNumber = getMaxVisibleElement(visiblePageRatios);\r\n            if (maxVisiblePageNumber) {\r\n                setUserInput(maxVisiblePageNumber.toString());\r\n            }\r\n        }\r\n    }, [visiblePageRatios]);\r\n    const onPageNumberChange = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((event) => {\r\n        const { value } = event.currentTarget;\r\n        // Decimal case\r\n        if (!Number.isInteger(value)) {\r\n            setUserInput(parseInt(value, 10).toString());\r\n        }\r\n        setUserInput(value);\r\n        if (delayTimerRef.current) {\r\n            clearTimeout(delayTimerRef.current);\r\n        }\r\n        // After user input the page that they want to scroll to\r\n        // our ref will start setting a delay around 1s before scroll\r\n        // to the position that user desire\r\n        const newPageNumber = parseInt(value, 10);\r\n        if (newPageNumber >= minPage && newPageNumber <= numPages) {\r\n            delayTimerRef.current = setTimeout(() => {\r\n                scrollToPage({ pageNumber: newPageNumber });\r\n            }, DELAY_SCROLL_TIME_OUT_MS);\r\n        }\r\n    }, [minPage, numPages, scrollToPage]);\r\n    const handleBlur = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\r\n        if (delayTimerRef.current) {\r\n            clearTimeout(delayTimerRef.current);\r\n        }\r\n        const pageNumber = parseInt(userInput, 10);\r\n        if (Number.isNaN(pageNumber)) {\r\n            return;\r\n        }\r\n        delayTimerRef.current = setTimeout(() => {\r\n            scrollToPage({ pageNumber: pageNumber });\r\n        }, DELAY_SCROLL_TIME_OUT_MS);\r\n    }, [userInput, scrollToPage]);\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: classnames_default()(\'pdf-reader__page-number-control\', className) },\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("input", { "aria-label": "Current Page", className: "pdf-reader__page-number-control__current-page", type: "number", name: "currentPage", value: userInput, onChange: onPageNumberChange, onBlur: handleBlur }),\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("span", { className: "pdf-reader__page-number-control__separator " }, "/"),\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("span", { "aria-label": "Total Pages", className: "pdf-reader__page-number-control__total-pages" }, numPages)));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/context/PageRenderContext.ts\nvar PageRenderContext_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\nconst PageRenderContext = external_commonjs_react_commonjs2_react_amd_react_root_React_.createContext({\r\n    pageRenderStates: new Map(),\r\n    getObjectURLForPage: args => {\r\n        logProviderWarning(`getObjectURLForPage(${JSON.stringify(args)})`, \'PageRenderContext\');\r\n        return null;\r\n    },\r\n    isBuildingObjectURLForPage: args => {\r\n        logProviderWarning(`isBuildingObjectURLForPage(${JSON.stringify(args)})`, \'PageRenderContext\');\r\n        return false;\r\n    },\r\n    isFinishedBuildingAllPagesObjectURLs: () => {\r\n        logProviderWarning(`isFinishedBuildingAllPagesObjectURLs()`, \'PageRenderContext\');\r\n        return false;\r\n    },\r\n    buildObjectURLForPage: args => {\r\n        logProviderWarning(`buildObjectURLForPage(${JSON.stringify(args)})`, \'PageRenderContext\');\r\n        return Promise.resolve(\'\');\r\n    },\r\n});\r\nfunction usePageRenderContextProps({ pdfDocProxy, pixelRatio, scale, visiblePageRatios, }) {\r\n    const [pageRenderStates, _setPageRenderStates] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(() => {\r\n        const map = new Map();\r\n        Object.freeze(map);\r\n        return map;\r\n    });\r\n    // Because rendering a page is async, we will lose the current pageRenderStates\r\n    // This ref trick allows the latest to be accessible when the objectURL is ready\r\n    const pageRenderStatesRef = external_commonjs_react_commonjs2_react_amd_react_root_React_.useRef(pageRenderStates);\r\n    const setPageRenderStates = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((pageRenderStates) => {\r\n        pageRenderStatesRef.current = pageRenderStates;\r\n        _setPageRenderStates(pageRenderStates);\r\n    }, [pageRenderStatesRef]);\r\n    const isBuildingObjectURLForPage = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex }) => {\r\n        if (typeof pageIndex === \'number\') {\r\n            pageNumber = pageIndex + 1;\r\n        }\r\n        if (typeof pageNumber !== \'number\') {\r\n            return false;\r\n        }\r\n        const state = pageRenderStates.get(pageNumber);\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        return !state.objectURL;\r\n    }, [pageRenderStates]);\r\n    const isFinishedBuildingAllPagesObjectURLs = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\r\n        var _a;\r\n        if (!pdfDocProxy)\r\n            return false;\r\n        for (let pageNumber = 1; pageNumber <= pdfDocProxy.numPages; pageNumber++) {\r\n            if (!((_a = pageRenderStates.get(pageNumber)) === null || _a === void 0 ? void 0 : _a.objectURL)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }, [pdfDocProxy, pageRenderStates]);\r\n    const getObjectURLForPage = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex }) => {\r\n        var _a;\r\n        if (typeof pageIndex === \'number\') {\r\n            pageNumber = pageIndex + 1;\r\n        }\r\n        if (typeof pageNumber !== \'number\') {\r\n            return null;\r\n        }\r\n        return ((_a = pageRenderStates.get(pageNumber)) === null || _a === void 0 ? void 0 : _a.objectURL) || null;\r\n    }, [pageRenderStates]);\r\n    const buildObjectURLForPage = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(({ pageNumber, pageIndex }) => {\r\n        var _a;\r\n        if (typeof pageIndex === \'number\') {\r\n            pageNumber = pageIndex + 1;\r\n        }\r\n        if (typeof pageNumber !== \'number\') {\r\n            throw new Error(\'prop "pageNumber" is not a number\');\r\n        }\r\n        if (!pdfDocProxy) {\r\n            throw new Error(\'cannot build a page until a "pdfDocProxy" is set on DocumentContext\');\r\n        }\r\n        // Don\'t need to start another task if already rendered\r\n        const existingPromise = (_a = pageRenderStates.get(pageNumber)) === null || _a === void 0 ? void 0 : _a.promise;\r\n        if (existingPromise) {\r\n            return existingPromise;\r\n        }\r\n        const promise = buildPageObjectURL({\r\n            pageNumber,\r\n            pdfDocProxy,\r\n            pixelRatio,\r\n            scale,\r\n            promiseTimestamp: flushTimestamp,\r\n        });\r\n        const renderState = {\r\n            promise,\r\n            objectURL: null,\r\n        };\r\n        promise.then(objectURL => {\r\n            if (!objectURL)\r\n                return;\r\n            renderState.objectURL = objectURL;\r\n            const newPageRenderStates = new Map(pageRenderStatesRef.current);\r\n            Object.freeze(newPageRenderStates);\r\n            setPageRenderStates(newPageRenderStates);\r\n        });\r\n        const newPageRenderStates = new Map(pageRenderStatesRef.current);\r\n        newPageRenderStates.set(pageNumber, renderState);\r\n        Object.freeze(newPageRenderStates);\r\n        setPageRenderStates(newPageRenderStates);\r\n        return promise;\r\n    }, [pageRenderStates, pdfDocProxy, scale]);\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        const visiblePages = [...visiblePageRatios.keys()];\r\n        if (!pdfDocProxy || [...pageRenderStates.keys()].length === pdfDocProxy.numPages) {\r\n            return;\r\n        }\r\n        const priorityQueue = getPriorityQueue(visiblePages, pdfDocProxy.numPages);\r\n        for (const pageNumber of priorityQueue) {\r\n            buildObjectURLForPage({ pageNumber });\r\n        }\r\n    }, [pageRenderStates, pdfDocProxy, visiblePageRatios]);\r\n    // Flush page render states when scale changes\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        // Clean memory of old generated images\r\n        for (const [, renderState] of pageRenderStatesRef.current) {\r\n            if (renderState.objectURL) {\r\n                URL.revokeObjectURL(renderState.objectURL);\r\n            }\r\n        }\r\n        // if current async promises dont have this timestamp, then we flush them\r\n        flushTimestamp = new Date().getTime();\r\n        // Clear all page render states, so pages can rebuild images\r\n        const newPageRenderStates = new Map();\r\n        Object.freeze(newPageRenderStates);\r\n        setPageRenderStates(newPageRenderStates);\r\n    }, [scale, pixelRatio]);\r\n    return {\r\n        pageRenderStates,\r\n        getObjectURLForPage,\r\n        isBuildingObjectURLForPage,\r\n        isFinishedBuildingAllPagesObjectURLs,\r\n        buildObjectURLForPage,\r\n    };\r\n}\r\nfunction getNeighboringPages(pages, numTotalPages) {\r\n    return pages.length === 0\r\n        ? []\r\n        : [Math.max(1, pages[0] - 1), Math.min(numTotalPages, pages[pages.length - 1] + 1)];\r\n}\r\nfunction getPriorityQueue(visiblePages, numPages) {\r\n    const visiblePagesNeighbors = getNeighboringPages(visiblePages, numPages);\r\n    const allPages = Array.from({ length: numPages }, (_, i) => i + 1);\r\n    const priorityQueue = new Set([...visiblePages, ...visiblePagesNeighbors, ...allPages]); // put into set to remove duplicats\r\n    return Array.from(priorityQueue); // convert set to array\r\n}\r\n// This boost causes the rendered image to be scaled up by this amount\r\nconst SCALE_BOOST = 2;\r\n// Generate an object url for a given page, rendered in a shared canvas\r\nfunction buildPageObjectURL({ pageNumber, pdfDocProxy, pixelRatio = (typeof window !== \'undefined\' ? window.devicePixelRatio : null) || 0, scale = 1, imageType = \'image/png\', imageQuality = 1.0, promiseTimestamp, }) {\r\n    return PageRenderContext_awaiter(this, void 0, void 0, function* () {\r\n        const pageProxy = yield pdfDocProxy.getPage(pageNumber);\r\n        const blob = yield useRenderCanvas((canvas) => PageRenderContext_awaiter(this, void 0, void 0, function* () {\r\n            if (promiseTimestamp !== flushTimestamp) {\r\n                return promiseTimestamp; // flush stale promise\r\n            }\r\n            // Render page in a canvas\r\n            const viewport = pageProxy.getViewport({ scale: scale * pixelRatio * SCALE_BOOST });\r\n            canvas.height = viewport.height;\r\n            canvas.width = viewport.width;\r\n            const canvasContext = canvas.getContext(\'2d\');\r\n            if (!canvasContext) {\r\n                throw new Error(\'canvas was unable to get a context\');\r\n            }\r\n            const renderTask = pageProxy.render({\r\n                canvasContext,\r\n                viewport,\r\n                intent: \'print\', // immediately render pages on inactive pages\r\n            });\r\n            yield renderTask.promise;\r\n            yield new Promise(resolve => setTimeout(resolve, 16));\r\n            // Fetch a blob for an image of the canvas\r\n            return new Promise((resolve, reject) => {\r\n                try {\r\n                    canvas.toBlob(blob => resolve(blob), imageType, imageQuality);\r\n                }\r\n                catch (error) {\r\n                    reject(error);\r\n                }\r\n            });\r\n        }));\r\n        if (typeof blob === \'number\') {\r\n            return \'\';\r\n        }\r\n        // Convert blob image to object url\r\n        if (!blob) {\r\n            throw new Error(\'unable to create image from page\');\r\n        }\r\n        return URL.createObjectURL(blob);\r\n    });\r\n}\r\nlet renderCanvas = null;\r\n// Get or create a shared canvas for rendering pages in\r\nfunction getRenderCanvas() {\r\n    if (!renderCanvas) {\r\n        renderCanvas = document.createElement(\'canvas\');\r\n    }\r\n    return renderCanvas;\r\n}\r\nlet flushTimestamp = new Date().getTime();\r\nlet nextCanvasUse = Promise.resolve();\r\n// Use the shared canvas to render a page, using promises to create a queue\r\nfunction useRenderCanvas(callback) {\r\n    return PageRenderContext_awaiter(this, void 0, void 0, function* () {\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        let resolve = (_value) => { };\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        let reject = (_reason) => { };\r\n        const prom = new Promise((_resolve, _reject) => {\r\n            resolve = _resolve;\r\n            reject = _reject;\r\n        });\r\n        nextCanvasUse = nextCanvasUse.then(() => callback(getRenderCanvas()).then(resolve, reject));\r\n        const result = yield prom;\r\n        yield new Promise(res => setTimeout(res, 16)); // Give some time between renders\r\n        return result;\r\n    });\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/PageWrapper.tsx\nvar PageWrapper_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst PageWrapper = (_a) => {\r\n    var { children, error, loading, loadingContentForBuildingImage, noData, pageIndex, renderType } = _a, extraProps = PageWrapper_rest(_a, ["children", "error", "loading", "loadingContentForBuildingImage", "noData", "pageIndex", "renderType"]);\r\n    const { rotation, scale } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\r\n    const { pageDimensions, getOutlineTargets, setNumPagesLoaded } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\r\n    const { getObjectURLForPage, isBuildingObjectURLForPage } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(PageRenderContext);\r\n    const { isLoading } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(UiContext);\r\n    const objectURLForPage = getObjectURLForPage({ pageIndex });\r\n    const isBuildingPageImage = isBuildingObjectURLForPage({ pageIndex });\r\n    // Don\'t display until we have page size data\r\n    // TODO: Handle this nicer so we display either the loading or error treatment\r\n    if (!pageDimensions) {\r\n        return null;\r\n    }\r\n    const getPageStyle = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\r\n        const styles = computePageStyle(pageDimensions, rotation, scale);\r\n        if (objectURLForPage) {\r\n            styles.backgroundImage = `url(${objectURLForPage})`;\r\n        }\r\n        return styles;\r\n    }, [pageDimensions, rotation, scale, objectURLForPage]);\r\n    const getWidth = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\r\n        return getPageWidth(pageDimensions, rotation);\r\n    }, [pageDimensions, rotation]);\r\n    const outlineTargets = getOutlineTargets({\r\n        pageIndex,\r\n        scale,\r\n        rotation,\r\n        pageDimensions,\r\n    });\r\n    const markPageAsLoaded = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(() => {\r\n        setNumPagesLoaded(prevNumPagesLoaded => prevNumPagesLoaded + 1);\r\n    }, []);\r\n    // Width needs to be set to prevent the outermost Page div from extending to fit the parent,\r\n    // and mis-aligning the text layer.\r\n    // TODO: Can we CSS this to auto-shrink?\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ id: generatePageIdFromIndex(pageIndex), className: classnames_default()(\'pdf-reader__page\', { \'pdf-reader__page--has-page-image\': objectURLForPage }, { \'pdf-reader__page--no-page-image\': !objectURLForPage }, `pdf-reader__page--render-type-${getClassNameSuffixFromRenderType(renderType)}`, { \'pdf-reader__is-building-page-image\': isBuildingPageImage }), "data-page-number": pageIndex + 1, style: getPageStyle() }, extraProps),\r\n        children,\r\n        isBuildingPageImage && !isLoading && (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: classnames_default()(\'pdf-reader__page\', {\r\n                \'pdf-reader__page--is-loading-image\': isBuildingPageImage,\r\n            }) }, loadingContentForBuildingImage)),\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(external_react_pdf_.Page, { width: getWidth(), error: error, loading: loading, noData: noData, pageIndex: pageIndex, scale: scale, rotate: rotation, renderAnnotationLayer: true, onGetTextSuccess: markPageAsLoaded }),\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__page__outline-targets" }, outlineTargets.map(({ dest, leftPx, topPx }) => (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("span", { key: dest, className: "pdf-reader__page__outline-target", "data-outline-target-dest": dest, "data-test-id": "pdf-reader__page__outline-target", style: { left: leftPx + \'px\', top: topPx + \'px\' } }))))));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/PrintButton.tsx\nvar PrintButton_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n/**\r\n * HTML anchor tag allows you to download a file from the same origin.\r\n * This is a workaround to download a file served from a different origin\r\n */\r\nconst PrintButton = (_a) => {\r\n    var { children, className } = _a, extraProps = PrintButton_rest(_a, ["children", "className"]);\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("button", Object.assign({ onClick: () => onClickPrint(), "aria-label": "Print PDF", className: `pdf-reader__print-btn ${className}` }, extraProps), children ? children : \'Print\'));\r\n};\r\nfunction onClickPrint() {\r\n    window.print();\r\n}\r\n\n;// CONCATENATED MODULE: ./src/utils/util.ts\n// This function returns min or max if value exceeds the range, otherwise\r\n// the original value is returned\r\nconst bandPassFilter = (value, min, max) => {\r\n    return Math.min(Math.max(value, min), max);\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/SidePanel.tsx\nvar SidePanel_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\nconst DEFAULT_MIN_WIDTH_PX = 300;\r\nconst DEFAULT_MAX_WIDTH_PX = 700;\r\nconst SidePanel = (_a) => {\r\n    var { minWidthPx = DEFAULT_MIN_WIDTH_PX, maxWidthPx = DEFAULT_MAX_WIDTH_PX, className, children, header, content, footer, dragHandlePosition, closeButton, isVisible = true, onClose } = _a, extraProps = SidePanel_rest(_a, ["minWidthPx", "maxWidthPx", "className", "children", "header", "content", "footer", "dragHandlePosition", "closeButton", "isVisible", "onClose"]);\r\n    // The overlay is used to catch mouse up events over iframe contents\r\n    // so the mouseup events will not be missed if the click is released over\r\n    // the iframe and the event listeners will fail to be removed\r\n    const [isOverlayVisible, setIsOverlayVisible] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(false);\r\n    const [panelWidth, setPanelWidth] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(minWidthPx);\r\n    const sidePanelRef = external_commonjs_react_commonjs2_react_amd_react_root_React_.useRef(null);\r\n    const dragHandleRef = external_commonjs_react_commonjs2_react_amd_react_root_React_.useRef(null);\r\n    const renderCloseButton = () => {\r\n        if (typeof closeButton === \'boolean\') {\r\n            return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("button", { className: "pdf-reader__side-panel-close-button", onClick: onClose }, "x"));\r\n        }\r\n        return closeButton;\r\n    };\r\n    const renderDragHandle = () => {\r\n        const isDragHandleOnLeft = dragHandlePosition === \'left\';\r\n        const isDragHandleOnRight = dragHandlePosition === \'right\';\r\n        if (!isDragHandleOnLeft && !isDragHandleOnRight) {\r\n            return null;\r\n        }\r\n        const onMouseMove = (mouseMoveEvent) => {\r\n            if (!sidePanelRef || !sidePanelRef.current) {\r\n                return;\r\n            }\r\n            const newWidth = dragHandlePosition === \'left\'\r\n                ? sidePanelRef.current.getBoundingClientRect().right - mouseMoveEvent.pageX\r\n                : mouseMoveEvent.pageX - sidePanelRef.current.getBoundingClientRect().left;\r\n            setPanelWidth(bandPassFilter(newWidth, minWidthPx, maxWidthPx));\r\n        };\r\n        const onMouseUp = () => {\r\n            // drop opacity styling on drag handle\r\n            if (dragHandleRef && dragHandleRef.current) {\r\n                dragHandleRef.current.removeAttribute(\'style\');\r\n            }\r\n            setIsOverlayVisible(false);\r\n            document.body.removeEventListener(\'mousemove\', onMouseMove);\r\n        };\r\n        const onDraggingHandle = () => {\r\n            // prevent flashing when the mouse hovers outside the resize zone\r\n            if (dragHandleRef && dragHandleRef.current) {\r\n                dragHandleRef.current.style.opacity = \'1\';\r\n            }\r\n            setIsOverlayVisible(true);\r\n            document.body.addEventListener(\'mousemove\', onMouseMove);\r\n            document.body.addEventListener(\'mouseup\', onMouseUp, { once: true });\r\n        };\r\n        const onChangePanelWidth = (event) => {\r\n            const newWidth = parseInt(event.currentTarget.value);\r\n            setPanelWidth(bandPassFilter(newWidth, minWidthPx, maxWidthPx));\r\n        };\r\n        return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: classnames_default()(\'pdf-reader__resize-zone\', {\r\n                \'pdf-reader__resize-zone--left\': isDragHandleOnLeft,\r\n                \'pdf-reader__resize-zone--right\': isDragHandleOnRight,\r\n            }) },\r\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("input", { className: "pdf-reader__drag-handle__assistive-input", type: "range", min: minWidthPx, max: maxWidthPx, step: "5", value: panelWidth, onChange: onChangePanelWidth }),\r\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { ref: dragHandleRef, role: "slider", "aria-valuenow": panelWidth, tabIndex: -1, onMouseDown: onDraggingHandle, className: "pdf-reader__drag-handle" },\r\n                external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__drag-handle__inner" }))));\r\n    };\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", Object.assign({ ref: sidePanelRef, style: { width: panelWidth }, className: classnames_default()(\'pdf-reader__side-panel\', { \'pdf-reader__side-panel--hidden\': !isVisible }, className) }, extraProps),\r\n        renderDragHandle(),\r\n        closeButton && renderCloseButton(),\r\n        header && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("h2", { className: "pdf-reader__side-panel-title" }, header),\r\n        content && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__side-panel-content" }, content),\r\n        footer && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__side-panel-footer" }, footer),\r\n        children,\r\n        isOverlayVisible && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__side-panel-overlay" })));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/thumbnails/Thumbnail.tsx\n\r\n\r\n\r\n\r\n\r\nconst Thumbnail = ({ pageNumber }) => {\r\n    const { getObjectURLForPage } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(PageRenderContext);\r\n    const { isPageVisible, scrollToPage, visiblePageRatios } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(ScrollContext);\r\n    const [maxVisiblePageNumber, setMaxVisiblePageNumber] = external_commonjs_react_commonjs2_react_amd_react_root_React_.useState(null);\r\n    const objectURL = getObjectURLForPage({ pageNumber });\r\n    external_commonjs_react_commonjs2_react_amd_react_root_React_.useEffect(() => {\r\n        if (visiblePageRatios.size !== 0) {\r\n            const max = getMaxVisibleElement(visiblePageRatios);\r\n            if (max) {\r\n                setMaxVisiblePageNumber(max.toString());\r\n            }\r\n        }\r\n    }, [visiblePageRatios]);\r\n    const isThumbnailVisible = maxVisiblePageNumber &&\r\n        parseInt(maxVisiblePageNumber) === pageNumber &&\r\n        isPageVisible({ pageNumber });\r\n    const onClick = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback(event => {\r\n        event.preventDefault();\r\n        scrollToPage({ pageNumber });\r\n    }, [pageNumber, scrollToPage]);\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("a", { "aria-label": `scroll to page ${pageNumber}`, href: `#${pageNumber}`, onClick: onClick, className: classnames_default()(\'pdf-reader__thumbnail\', { \'pdf-reader__thumbnail--no-image\': !objectURL }, { \'pdf-reader__thumbnail--is-visible\': isThumbnailVisible }), "data-page-number": pageNumber, "data-test-id": "thumbnail-link" }, !!objectURL && external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("img", { className: "pdf-reader__thumbnail-image", src: objectURL })));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/thumbnails/ThumbnailList.tsx\n\r\n\r\n\r\nconst ThumbnailList = () => {\r\n    const { numPages } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(DocumentContext);\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("div", { className: "pdf-reader__thumbnail-list-wrapper" },\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("ul", { className: "pdf-reader__thumbnail-list" }, Array.from({ length: numPages }).map((_, pageIndex) => (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("li", { key: pageIndex + 1, className: "pdf-reader__thumbnail-list__item" },\r\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(Thumbnail, { pageNumber: pageIndex + 1 })))))));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/utils/format.ts\nconst PercentFormatter = new Intl.NumberFormat(\'en-US\', {\r\n    style: \'percent\',\r\n    maximumSignificantDigits: 3,\r\n});\r\n\n;// CONCATENATED MODULE: ./src/components/ZoomInButton.tsx\nvar ZoomInButton_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\nconst MAX_ZOOM_IN_SCALE = 500;\r\nconst ZoomInButton = (_a) => {\r\n    var { className, children, onZoom } = _a, extraProps = ZoomInButton_rest(_a, ["className", "children", "onZoom"]);\r\n    const { scale, setScale, zoomIncrementValue } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\r\n    const handleZoomIn = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const newScaleValue = scale + zoomIncrementValue;\r\n        const zoomScale = Number(PercentFormatter.format(newScaleValue).replace(\'%\', \'\'));\r\n        if (zoomScale <= MAX_ZOOM_IN_SCALE) {\r\n            if (onZoom) {\r\n                onZoom(newScaleValue);\r\n            }\r\n            setScale(newScaleValue);\r\n        }\r\n    }, [scale]);\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("button", Object.assign({ className: `reader__zoom-btn zoom-in ${className}`, onClick: handleZoomIn }, extraProps), children ? children : \'+\'));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/components/ZoomOutButton.tsx\nvar ZoomOutButton_rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === "function")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\nconst MIN_ZOOM_OUT_SCALE = 20;\r\nconst ZoomOutButton = (_a) => {\r\n    var { className, children, onZoom } = _a, extraProps = ZoomOutButton_rest(_a, ["className", "children", "onZoom"]);\r\n    const { scale, setScale, zoomIncrementValue } = external_commonjs_react_commonjs2_react_amd_react_root_React_.useContext(TransformContext);\r\n    const handleZoomOut = external_commonjs_react_commonjs2_react_amd_react_root_React_.useCallback((event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const newScaleValue = scale - zoomIncrementValue;\r\n        const zoomScale = Number(PercentFormatter.format(newScaleValue).replace(\'%\', \'\'));\r\n        if (zoomScale >= MIN_ZOOM_OUT_SCALE) {\r\n            if (onZoom) {\r\n                onZoom(newScaleValue);\r\n            }\r\n            setScale(newScaleValue);\r\n        }\r\n    }, [scale]);\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement("button", Object.assign({ className: `reader__zoom-btn zoom-out ${className}`, onClick: handleZoomOut }, extraProps), children ? children : \'-\'));\r\n};\r\n\n;// CONCATENATED MODULE: ./src/context/ContextProvider.tsx\n\r\n\r\n\r\n\r\n\r\n\r\nconst ContextProvider = ({ children }) => {\r\n    const documentProps = useDocumentContextProps();\r\n    const transformProps = useTransformContextProps();\r\n    const uiProps = useUiContextProps();\r\n    const scrollProps = useScrollContextProps();\r\n    const pageRenderProps = usePageRenderContextProps({\r\n        pdfDocProxy: documentProps.pdfDocProxy,\r\n        pixelRatio: transformProps.pixelRatio,\r\n        scale: transformProps.scale,\r\n        visiblePageRatios: scrollProps.visiblePageRatios,\r\n    });\r\n    return (external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(DocumentContext.Provider, { value: documentProps },\r\n        external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(TransformContext.Provider, { value: transformProps },\r\n            external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(UiContext.Provider, { value: uiProps },\r\n                external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(ScrollContext.Provider, { value: scrollProps },\r\n                    external_commonjs_react_commonjs2_react_amd_react_root_React_.createElement(PageRenderContext.Provider, { value: pageRenderProps }, children))))));\r\n};\r\n\n;// CONCATENATED MODULE: ./index.ts\n/*\r\n * PDF Component Library exports\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* harmony default export */ const index = ({\r\n    BoundingBox: BoundingBox,\r\n    computeBoundingBoxStyle: computeBoundingBoxStyle,\r\n    computePageStyle: computePageStyle,\r\n    ContextProvider: ContextProvider,\r\n    DEFAULT_ZOOM_SCALE: DEFAULT_ZOOM_SCALE,\r\n    DocumentContext: DocumentContext,\r\n    DocumentWrapper: DocumentWrapper,\r\n    DownloadButton: DownloadButton,\r\n    ArrowFlag: ArrowFlag,\r\n    ArrowFlagBase: ArrowFlagBase,\r\n    PrintButton: PrintButton,\r\n    generatePageIdFromIndex: generatePageIdFromIndex,\r\n    getPageHeight: getPageHeight,\r\n    getPageWidth: getPageWidth,\r\n    HighlightOverlay: HighlightOverlay,\r\n    IconFlag: IconFlag,\r\n    isSideways: isSideways,\r\n    Outline: Outline,\r\n    OutlineItem: OutlineItem,\r\n    Overlay: Overlay,\r\n    PageNumberControl: PageNumberControl,\r\n    PageRenderContext: PageRenderContext,\r\n    PageRotation: PageRotation,\r\n    PageWrapper: PageWrapper,\r\n    POSITION: POSITION,\r\n    SidePanel: SidePanel,\r\n    PercentFormatter: PercentFormatter,\r\n    RENDER_TYPE: RENDER_TYPE,\r\n    rotateClockwise: rotateClockwise,\r\n    rotateCounterClockwise: rotateCounterClockwise,\r\n    scaleRawBoundingBox: scaleRawBoundingBox,\r\n    scrollToId: scrollToId,\r\n    scrollToPdfPageIndex: scrollToPdfPageIndex,\r\n    Thumbnail: Thumbnail,\r\n    ThumbnailList: ThumbnailList,\r\n    ScrollContext: ScrollContext,\r\n    TransformContext: TransformContext,\r\n    UiContext: UiContext,\r\n    ZoomInButton: ZoomInButton,\r\n    ZoomOutButton: ZoomOutButton,\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///224\n')},323:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__323__},888:Q=>{"use strict";Q.exports=__WEBPACK_EXTERNAL_MODULE__888__}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](U,U.exports,__webpack_require__),U.exports}__webpack_require__.n=Q=>{var F=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(F,{a:F}),F},__webpack_require__.d=(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F);var __webpack_exports__=__webpack_require__(224);return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));